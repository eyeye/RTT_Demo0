   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"irq.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	rt_interrupt_nest,1,1
  19              		.align	2
  20              		.global	rt_interrupt_enter
  21              		.thumb
  22              		.thumb_func
  24              	rt_interrupt_enter:
  25              	.LFB5:
  26              		.file 1 "../src/os/rt-thread/src/irq.c"
   1:../src/os/rt-thread/src/irq.c **** /*
   2:../src/os/rt-thread/src/irq.c ****  * File      : irq.c
   3:../src/os/rt-thread/src/irq.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/irq.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/irq.c ****  *
   6:../src/os/rt-thread/src/irq.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/irq.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/irq.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/irq.c ****  *
  10:../src/os/rt-thread/src/irq.c ****  * Change Logs:
  11:../src/os/rt-thread/src/irq.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/irq.c ****  * 2006-02-24     Bernard      first version
  13:../src/os/rt-thread/src/irq.c ****  * 2006-05-03     Bernard      add IRQ_DEBUG
  14:../src/os/rt-thread/src/irq.c ****  */
  15:../src/os/rt-thread/src/irq.c **** 
  16:../src/os/rt-thread/src/irq.c **** #include <rthw.h>
  17:../src/os/rt-thread/src/irq.c **** #include <rtthread.h>
  18:../src/os/rt-thread/src/irq.c **** 
  19:../src/os/rt-thread/src/irq.c **** /* #define IRQ_DEBUG */
  20:../src/os/rt-thread/src/irq.c **** 
  21:../src/os/rt-thread/src/irq.c **** /**
  22:../src/os/rt-thread/src/irq.c ****  * @addtogroup Kernel
  23:../src/os/rt-thread/src/irq.c ****  */
  24:../src/os/rt-thread/src/irq.c **** 
  25:../src/os/rt-thread/src/irq.c **** /*@{*/
  26:../src/os/rt-thread/src/irq.c **** 
  27:../src/os/rt-thread/src/irq.c **** volatile rt_uint8_t rt_interrupt_nest;
  28:../src/os/rt-thread/src/irq.c **** 
  29:../src/os/rt-thread/src/irq.c **** /**
  30:../src/os/rt-thread/src/irq.c ****  * This function will be invoked by BSP, when enter interrupt service routine
  31:../src/os/rt-thread/src/irq.c ****  *
  32:../src/os/rt-thread/src/irq.c ****  * @note please don't invoke this routine in application
  33:../src/os/rt-thread/src/irq.c ****  *
  34:../src/os/rt-thread/src/irq.c ****  * @see rt_interrupt_leave
  35:../src/os/rt-thread/src/irq.c ****  */
  36:../src/os/rt-thread/src/irq.c **** void rt_interrupt_enter(void)
  37:../src/os/rt-thread/src/irq.c **** {
  27              		.loc 1 37 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  38:../src/os/rt-thread/src/irq.c **** 	rt_base_t level;
  39:../src/os/rt-thread/src/irq.c **** 
  40:../src/os/rt-thread/src/irq.c **** 	RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n", rt_interrupt_nest));
  41:../src/os/rt-thread/src/irq.c **** 
  42:../src/os/rt-thread/src/irq.c **** 	level = rt_hw_interrupt_disable();
  42              		.loc 1 42 0
  43 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
  44 000a 7860     		str	r0, [r7, #4]
  43:../src/os/rt-thread/src/irq.c **** 	rt_interrupt_nest ++;
  45              		.loc 1 43 0
  46 000c 074B     		ldr	r3, .L2
  47 000e 1B78     		ldrb	r3, [r3, #0]
  48 0010 DBB2     		uxtb	r3, r3
  49 0012 03F10103 		add	r3, r3, #1
  50 0016 DAB2     		uxtb	r2, r3
  51 0018 044B     		ldr	r3, .L2
  52 001a 1A70     		strb	r2, [r3, #0]
  44:../src/os/rt-thread/src/irq.c **** 	rt_hw_interrupt_enable(level);
  53              		.loc 1 44 0
  54 001c 7868     		ldr	r0, [r7, #4]
  55 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
  45:../src/os/rt-thread/src/irq.c **** }
  56              		.loc 1 45 0
  57 0022 07F10807 		add	r7, r7, #8
  58 0026 BD46     		mov	sp, r7
  59 0028 80BD     		pop	{r7, pc}
  60              	.L3:
  61 002a 00BF     		.align	2
  62              	.L2:
  63 002c 00000000 		.word	rt_interrupt_nest
  64              		.cfi_endproc
  65              	.LFE5:
  67              		.align	2
  68              		.global	rt_interrupt_leave
  69              		.thumb
  70              		.thumb_func
  72              	rt_interrupt_leave:
  73              	.LFB6:
  46:../src/os/rt-thread/src/irq.c **** RTM_EXPORT(rt_interrupt_enter);
  47:../src/os/rt-thread/src/irq.c **** 
  48:../src/os/rt-thread/src/irq.c **** /**
  49:../src/os/rt-thread/src/irq.c ****  * This function will be invoked by BSP, when leave interrupt service routine
  50:../src/os/rt-thread/src/irq.c ****  *
  51:../src/os/rt-thread/src/irq.c ****  * @note please don't invoke this routine in application
  52:../src/os/rt-thread/src/irq.c ****  *
  53:../src/os/rt-thread/src/irq.c ****  * @see rt_interrupt_enter
  54:../src/os/rt-thread/src/irq.c ****  */
  55:../src/os/rt-thread/src/irq.c **** void rt_interrupt_leave(void)
  56:../src/os/rt-thread/src/irq.c **** {
  74              		.loc 1 56 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0030 80B5     		push	{r7, lr}
  79              	.LCFI3:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0032 82B0     		sub	sp, sp, #8
  84              	.LCFI4:
  85              		.cfi_def_cfa_offset 16
  86 0034 00AF     		add	r7, sp, #0
  87              	.LCFI5:
  88              		.cfi_def_cfa_register 7
  57:../src/os/rt-thread/src/irq.c **** 	rt_base_t level;
  58:../src/os/rt-thread/src/irq.c **** 
  59:../src/os/rt-thread/src/irq.c **** 	RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n", rt_interrupt_nest));
  60:../src/os/rt-thread/src/irq.c **** 
  61:../src/os/rt-thread/src/irq.c **** 	level = rt_hw_interrupt_disable();
  89              		.loc 1 61 0
  90 0036 FFF7FEFF 		bl	rt_hw_interrupt_disable
  91 003a 7860     		str	r0, [r7, #4]
  62:../src/os/rt-thread/src/irq.c **** 	rt_interrupt_nest --;
  92              		.loc 1 62 0
  93 003c 074B     		ldr	r3, .L5
  94 003e 1B78     		ldrb	r3, [r3, #0]
  95 0040 DBB2     		uxtb	r3, r3
  96 0042 03F1FF33 		add	r3, r3, #-1
  97 0046 DAB2     		uxtb	r2, r3
  98 0048 044B     		ldr	r3, .L5
  99 004a 1A70     		strb	r2, [r3, #0]
  63:../src/os/rt-thread/src/irq.c **** 	rt_hw_interrupt_enable(level);
 100              		.loc 1 63 0
 101 004c 7868     		ldr	r0, [r7, #4]
 102 004e FFF7FEFF 		bl	rt_hw_interrupt_enable
  64:../src/os/rt-thread/src/irq.c **** }
 103              		.loc 1 64 0
 104 0052 07F10807 		add	r7, r7, #8
 105 0056 BD46     		mov	sp, r7
 106 0058 80BD     		pop	{r7, pc}
 107              	.L6:
 108 005a 00BF     		.align	2
 109              	.L5:
 110 005c 00000000 		.word	rt_interrupt_nest
 111              		.cfi_endproc
 112              	.LFE6:
 114              		.align	2
 115              		.global	rt_interrupt_get_nest
 116              		.thumb
 117              		.thumb_func
 119              	rt_interrupt_get_nest:
 120              	.LFB7:
  65:../src/os/rt-thread/src/irq.c **** RTM_EXPORT(rt_interrupt_leave);
  66:../src/os/rt-thread/src/irq.c **** 
  67:../src/os/rt-thread/src/irq.c **** /**
  68:../src/os/rt-thread/src/irq.c ****  * This function will return the nest of interrupt.
  69:../src/os/rt-thread/src/irq.c ****  * 
  70:../src/os/rt-thread/src/irq.c ****  * User application can invoke this function to get whether current
  71:../src/os/rt-thread/src/irq.c ****  * context is interrupt context.
  72:../src/os/rt-thread/src/irq.c ****  * 
  73:../src/os/rt-thread/src/irq.c ****  * @return the number of nested interrupts.
  74:../src/os/rt-thread/src/irq.c ****  */
  75:../src/os/rt-thread/src/irq.c **** rt_uint8_t rt_interrupt_get_nest(void)
  76:../src/os/rt-thread/src/irq.c **** {
 121              		.loc 1 76 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0060 80B4     		push	{r7}
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0062 00AF     		add	r7, sp, #0
 131              	.LCFI7:
 132              		.cfi_def_cfa_register 7
  77:../src/os/rt-thread/src/irq.c **** 	return rt_interrupt_nest;
 133              		.loc 1 77 0
 134 0064 034B     		ldr	r3, .L9
 135 0066 1B78     		ldrb	r3, [r3, #0]
 136 0068 DBB2     		uxtb	r3, r3
  78:../src/os/rt-thread/src/irq.c **** }
 137              		.loc 1 78 0
 138 006a 1846     		mov	r0, r3
 139 006c BD46     		mov	sp, r7
 140 006e 80BC     		pop	{r7}
 141 0070 7047     		bx	lr
 142              	.L10:
 143 0072 00BF     		.align	2
 144              	.L9:
 145 0074 00000000 		.word	rt_interrupt_nest
 146              		.cfi_endproc
 147              	.LFE7:
 149              	.Letext0:
 150              		.file 2 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 irq.c
                            *COM*:00000001 rt_interrupt_nest
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:19     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:24     .text:00000000 rt_interrupt_enter
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:63     .text:0000002c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:67     .text:00000030 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:72     .text:00000030 rt_interrupt_leave
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:110    .text:0000005c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:114    .text:00000060 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:119    .text:00000060 rt_interrupt_get_nest
C:\Users\YANGZH~1\AppData\Local\Temp\ccwcrAiw.s:145    .text:00000074 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.1271905b0c3eea0323671cb235cf482e
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
