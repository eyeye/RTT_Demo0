   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"timer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	rt_list_init:
  23              	.LFB0:
  24              		.file 1 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtservice.h"
   1:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*
   2:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * File      : rtservice.h
   3:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * This file is part of RT-Thread RTOS
   4:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
   6:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * The license and distribution terms for this file may be
   7:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * found in the file LICENSE in this distribution or at
   8:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * http://www.rt-thread.org/license/LICENSE
   9:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  10:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Change Logs:
  11:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Date           Author       Notes
  12:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-03-16     Bernard      the first version
  13:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  14:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  15:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  16:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  17:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  18:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifndef __RT_SERVICE_H__
  19:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define __RT_SERVICE_H__
  20:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  21:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifdef __cplusplus
  22:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** extern "C" {
  23:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #endif
  24:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  25:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  26:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @addtogroup KernelService
  27:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  28:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  29:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*@{*/
  30:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  31:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  32:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list object
  33:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  34:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  35:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  36:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  37:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list
  38:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  39:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to be initialized
  40:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  41:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  42:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  25              		.loc 1 42 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  43:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = l->prev = l;
  41              		.loc 1 43 0
  42 0008 7B68     		ldr	r3, [r7, #4]
  43 000a 7A68     		ldr	r2, [r7, #4]
  44 000c 5A60     		str	r2, [r3, #4]
  45 000e 7B68     		ldr	r3, [r7, #4]
  46 0010 5A68     		ldr	r2, [r3, #4]
  47 0012 7B68     		ldr	r3, [r7, #4]
  48 0014 1A60     		str	r2, [r3, #0]
  44:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  49              		.loc 1 44 0
  50 0016 07F10C07 		add	r7, r7, #12
  51 001a BD46     		mov	sp, r7
  52 001c 80BC     		pop	{r7}
  53 001e 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.align	2
  58              		.thumb
  59              		.thumb_func
  61              	rt_list_insert_before:
  62              	.LFB2:
  45:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  46:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  47:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node after a list
  48:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  49:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  50:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  51:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  52:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  53:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  54:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next->prev = n;
  55:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l->next;
  56:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  57:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = n;
  58:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l;
  59:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  60:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  61:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  62:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node before a list
  63:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  64:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  65:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  66:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  67:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  68:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  63              		.loc 1 68 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68 0020 80B4     		push	{r7}
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 7, -4
  72 0022 83B0     		sub	sp, sp, #12
  73              	.LCFI4:
  74              		.cfi_def_cfa_offset 16
  75 0024 00AF     		add	r7, sp, #0
  76              	.LCFI5:
  77              		.cfi_def_cfa_register 7
  78 0026 7860     		str	r0, [r7, #4]
  79 0028 3960     		str	r1, [r7, #0]
  69:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev->next = n;
  80              		.loc 1 69 0
  81 002a 7B68     		ldr	r3, [r7, #4]
  82 002c 5B68     		ldr	r3, [r3, #4]
  83 002e 3A68     		ldr	r2, [r7, #0]
  84 0030 1A60     		str	r2, [r3, #0]
  70:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l->prev;
  85              		.loc 1 70 0
  86 0032 7B68     		ldr	r3, [r7, #4]
  87 0034 5A68     		ldr	r2, [r3, #4]
  88 0036 3B68     		ldr	r3, [r7, #0]
  89 0038 5A60     		str	r2, [r3, #4]
  71:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  72:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev = n;
  90              		.loc 1 72 0
  91 003a 7B68     		ldr	r3, [r7, #4]
  92 003c 3A68     		ldr	r2, [r7, #0]
  93 003e 5A60     		str	r2, [r3, #4]
  73:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l;
  94              		.loc 1 73 0
  95 0040 3B68     		ldr	r3, [r7, #0]
  96 0042 7A68     		ldr	r2, [r7, #4]
  97 0044 1A60     		str	r2, [r3, #0]
  74:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  98              		.loc 1 74 0
  99 0046 07F10C07 		add	r7, r7, #12
 100 004a BD46     		mov	sp, r7
 101 004c 80BC     		pop	{r7}
 102 004e 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE2:
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 110              	rt_list_remove:
 111              	.LFB3:
  75:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  76:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  77:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief remove node from list.
  78:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n the node to remove from the list.
  79:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  80:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  81:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
 112              		.loc 1 81 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0050 80B4     		push	{r7}
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0052 83B0     		sub	sp, sp, #12
 122              	.LCFI7:
 123              		.cfi_def_cfa_offset 16
 124 0054 00AF     		add	r7, sp, #0
 125              	.LCFI8:
 126              		.cfi_def_cfa_register 7
 127 0056 7860     		str	r0, [r7, #4]
  82:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next->prev = n->prev;
 128              		.loc 1 82 0
 129 0058 7B68     		ldr	r3, [r7, #4]
 130 005a 1B68     		ldr	r3, [r3, #0]
 131 005c 7A68     		ldr	r2, [r7, #4]
 132 005e 5268     		ldr	r2, [r2, #4]
 133 0060 5A60     		str	r2, [r3, #4]
  83:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev->next = n->next;
 134              		.loc 1 83 0
 135 0062 7B68     		ldr	r3, [r7, #4]
 136 0064 5B68     		ldr	r3, [r3, #4]
 137 0066 7A68     		ldr	r2, [r7, #4]
 138 0068 1268     		ldr	r2, [r2, #0]
 139 006a 1A60     		str	r2, [r3, #0]
  84:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  85:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = n->prev = n;
 140              		.loc 1 85 0
 141 006c 7B68     		ldr	r3, [r7, #4]
 142 006e 7A68     		ldr	r2, [r7, #4]
 143 0070 5A60     		str	r2, [r3, #4]
 144 0072 7B68     		ldr	r3, [r7, #4]
 145 0074 5A68     		ldr	r2, [r3, #4]
 146 0076 7B68     		ldr	r3, [r7, #4]
 147 0078 1A60     		str	r2, [r3, #0]
  86:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
 148              		.loc 1 86 0
 149 007a 07F10C07 		add	r7, r7, #12
 150 007e BD46     		mov	sp, r7
 151 0080 80BC     		pop	{r7}
 152 0082 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE3:
 156              		.align	2
 157              		.thumb
 158              		.thumb_func
 160              	rt_list_isempty:
 161              	.LFB4:
  87:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  88:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  89:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief tests whether a list is empty
  90:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l the list to test.
  91:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  92:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  93:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
 162              		.loc 1 93 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 0084 80B4     		push	{r7}
 168              	.LCFI9:
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0086 83B0     		sub	sp, sp, #12
 172              	.LCFI10:
 173              		.cfi_def_cfa_offset 16
 174 0088 00AF     		add	r7, sp, #0
 175              	.LCFI11:
 176              		.cfi_def_cfa_register 7
 177 008a 7860     		str	r0, [r7, #4]
  94:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     return l->next == l;
 178              		.loc 1 94 0
 179 008c 7B68     		ldr	r3, [r7, #4]
 180 008e 1A68     		ldr	r2, [r3, #0]
 181 0090 7B68     		ldr	r3, [r7, #4]
 182 0092 9A42     		cmp	r2, r3
 183 0094 14BF     		ite	ne
 184 0096 0023     		movne	r3, #0
 185 0098 0123     		moveq	r3, #1
 186 009a DBB2     		uxtb	r3, r3
  95:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
 187              		.loc 1 95 0
 188 009c 1846     		mov	r0, r3
 189 009e 07F10C07 		add	r7, r7, #12
 190 00a2 BD46     		mov	sp, r7
 191 00a4 80BC     		pop	{r7}
 192 00a6 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE4:
 196              		.data
 197              		.align	2
 200              	rt_timer_list:
 201 0000 00000000 		.word	rt_timer_list
 202 0004 00000000 		.word	rt_timer_list
 203              		.bss
 204              		.align	2
 205              	rt_timer_timeout_hook:
 206 0000 00000000 		.space	4
 207              		.text
 208              		.align	2
 209              		.global	rt_timer_timeout_sethook
 210              		.thumb
 211              		.thumb_func
 213              	rt_timer_timeout_sethook:
 214              	.LFB5:
 215              		.file 2 "../src/os/rt-thread/src/timer.c"
   1:../src/os/rt-thread/src/timer.c **** /*
   2:../src/os/rt-thread/src/timer.c ****  * File      : timer.c
   3:../src/os/rt-thread/src/timer.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/timer.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/timer.c ****  *
   6:../src/os/rt-thread/src/timer.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/timer.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/timer.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/timer.c ****  *
  10:../src/os/rt-thread/src/timer.c ****  * Change Logs:
  11:../src/os/rt-thread/src/timer.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/timer.c ****  * 2006-03-12     Bernard      first version
  13:../src/os/rt-thread/src/timer.c ****  * 2006-04-29     Bernard      implement thread timer
  14:../src/os/rt-thread/src/timer.c ****  * 2006-06-04     Bernard      implement rt_timer_control
  15:../src/os/rt-thread/src/timer.c ****  * 2006-08-10     Bernard      fix the periodic timer bug
  16:../src/os/rt-thread/src/timer.c ****  * 2006-09-03     Bernard      implement rt_timer_detach
  17:../src/os/rt-thread/src/timer.c ****  * 2009-11-11     LiJin        add soft timer
  18:../src/os/rt-thread/src/timer.c ****  * 2010-05-12     Bernard      fix the timer check bug.
  19:../src/os/rt-thread/src/timer.c ****  * 2010-11-02     Charlie      re-implement tick overflow issue
  20:../src/os/rt-thread/src/timer.c ****  */
  21:../src/os/rt-thread/src/timer.c **** 
  22:../src/os/rt-thread/src/timer.c **** #include <rtthread.h>
  23:../src/os/rt-thread/src/timer.c **** #include <rthw.h>
  24:../src/os/rt-thread/src/timer.c **** 
  25:../src/os/rt-thread/src/timer.c **** /* hard timer list */
  26:../src/os/rt-thread/src/timer.c **** static rt_list_t rt_timer_list = RT_LIST_OBJECT_INIT(rt_timer_list);
  27:../src/os/rt-thread/src/timer.c **** 
  28:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
  29:../src/os/rt-thread/src/timer.c **** /* soft timer list */
  30:../src/os/rt-thread/src/timer.c **** static rt_list_t rt_soft_timer_list;
  31:../src/os/rt-thread/src/timer.c **** static struct rt_thread timer_thread;
  32:../src/os/rt-thread/src/timer.c **** ALIGN(RT_ALIGN_SIZE)
  33:../src/os/rt-thread/src/timer.c **** static rt_uint8_t timer_thread_stack[RT_TIMER_THREAD_STACK_SIZE];
  34:../src/os/rt-thread/src/timer.c **** #endif
  35:../src/os/rt-thread/src/timer.c **** 
  36:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_HOOK
  37:../src/os/rt-thread/src/timer.c **** extern void (*rt_object_take_hook)(struct rt_object *object);
  38:../src/os/rt-thread/src/timer.c **** extern void (*rt_object_put_hook)(struct rt_object *object);
  39:../src/os/rt-thread/src/timer.c **** static void (*rt_timer_timeout_hook)(struct rt_timer *timer);
  40:../src/os/rt-thread/src/timer.c **** 
  41:../src/os/rt-thread/src/timer.c **** /**
  42:../src/os/rt-thread/src/timer.c ****  * @addtogroup Hook
  43:../src/os/rt-thread/src/timer.c ****  */
  44:../src/os/rt-thread/src/timer.c **** 
  45:../src/os/rt-thread/src/timer.c **** /*@{*/
  46:../src/os/rt-thread/src/timer.c **** 
  47:../src/os/rt-thread/src/timer.c **** /**
  48:../src/os/rt-thread/src/timer.c ****  * This function will set a hook function, which will be invoked when timer
  49:../src/os/rt-thread/src/timer.c ****  * is timeout.
  50:../src/os/rt-thread/src/timer.c ****  *
  51:../src/os/rt-thread/src/timer.c ****  * @param hook the hook function
  52:../src/os/rt-thread/src/timer.c ****  */
  53:../src/os/rt-thread/src/timer.c **** void rt_timer_timeout_sethook(void (*hook)(struct rt_timer *timer))
  54:../src/os/rt-thread/src/timer.c **** {
 216              		.loc 2 54 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 8
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221 00a8 80B4     		push	{r7}
 222              	.LCFI12:
 223              		.cfi_def_cfa_offset 4
 224              		.cfi_offset 7, -4
 225 00aa 83B0     		sub	sp, sp, #12
 226              	.LCFI13:
 227              		.cfi_def_cfa_offset 16
 228 00ac 00AF     		add	r7, sp, #0
 229              	.LCFI14:
 230              		.cfi_def_cfa_register 7
 231 00ae 7860     		str	r0, [r7, #4]
  55:../src/os/rt-thread/src/timer.c **** 	rt_timer_timeout_hook = hook;
 232              		.loc 2 55 0
 233 00b0 034B     		ldr	r3, .L7
 234 00b2 7A68     		ldr	r2, [r7, #4]
 235 00b4 1A60     		str	r2, [r3, #0]
  56:../src/os/rt-thread/src/timer.c **** }
 236              		.loc 2 56 0
 237 00b6 07F10C07 		add	r7, r7, #12
 238 00ba BD46     		mov	sp, r7
 239 00bc 80BC     		pop	{r7}
 240 00be 7047     		bx	lr
 241              	.L8:
 242              		.align	2
 243              	.L7:
 244 00c0 00000000 		.word	rt_timer_timeout_hook
 245              		.cfi_endproc
 246              	.LFE5:
 248              		.align	2
 249              		.thumb
 250              		.thumb_func
 252              	_rt_timer_init:
 253              	.LFB6:
  57:../src/os/rt-thread/src/timer.c **** 
  58:../src/os/rt-thread/src/timer.c **** /*@}*/
  59:../src/os/rt-thread/src/timer.c **** #endif
  60:../src/os/rt-thread/src/timer.c **** 
  61:../src/os/rt-thread/src/timer.c **** static void _rt_timer_init(rt_timer_t timer,
  62:../src/os/rt-thread/src/timer.c **** 						   void (*timeout)(void *parameter), void *parameter,
  63:../src/os/rt-thread/src/timer.c **** 						   rt_tick_t time, rt_uint8_t flag)
  64:../src/os/rt-thread/src/timer.c **** {
 254              		.loc 2 64 0
 255              		.cfi_startproc
 256              		@ args = 4, pretend = 0, frame = 16
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 00c4 80B5     		push	{r7, lr}
 259              	.LCFI15:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 00c6 84B0     		sub	sp, sp, #16
 264              	.LCFI16:
 265              		.cfi_def_cfa_offset 24
 266 00c8 00AF     		add	r7, sp, #0
 267              	.LCFI17:
 268              		.cfi_def_cfa_register 7
 269 00ca F860     		str	r0, [r7, #12]
 270 00cc B960     		str	r1, [r7, #8]
 271 00ce 7A60     		str	r2, [r7, #4]
 272 00d0 3B60     		str	r3, [r7, #0]
  65:../src/os/rt-thread/src/timer.c **** 	/* set flag */
  66:../src/os/rt-thread/src/timer.c **** 	timer->parent.flag  = flag;
 273              		.loc 2 66 0
 274 00d2 FB68     		ldr	r3, [r7, #12]
 275 00d4 3A7E     		ldrb	r2, [r7, #24]
 276 00d6 DA71     		strb	r2, [r3, #7]
  67:../src/os/rt-thread/src/timer.c **** 
  68:../src/os/rt-thread/src/timer.c **** 	/* set deactivated */
  69:../src/os/rt-thread/src/timer.c **** 	timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 277              		.loc 2 69 0
 278 00d8 FB68     		ldr	r3, [r7, #12]
 279 00da DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 280 00dc 23F00103 		bic	r3, r3, #1
 281 00e0 DAB2     		uxtb	r2, r3
 282 00e2 FB68     		ldr	r3, [r7, #12]
 283 00e4 DA71     		strb	r2, [r3, #7]
  70:../src/os/rt-thread/src/timer.c **** 
  71:../src/os/rt-thread/src/timer.c **** 	timer->timeout_func = timeout;
 284              		.loc 2 71 0
 285 00e6 FB68     		ldr	r3, [r7, #12]
 286 00e8 BA68     		ldr	r2, [r7, #8]
 287 00ea 9A61     		str	r2, [r3, #24]
  72:../src/os/rt-thread/src/timer.c **** 	timer->parameter    = parameter;
 288              		.loc 2 72 0
 289 00ec FB68     		ldr	r3, [r7, #12]
 290 00ee 7A68     		ldr	r2, [r7, #4]
 291 00f0 DA61     		str	r2, [r3, #28]
  73:../src/os/rt-thread/src/timer.c **** 
  74:../src/os/rt-thread/src/timer.c **** 	timer->timeout_tick = 0;
 292              		.loc 2 74 0
 293 00f2 FB68     		ldr	r3, [r7, #12]
 294 00f4 4FF00002 		mov	r2, #0
 295 00f8 5A62     		str	r2, [r3, #36]
  75:../src/os/rt-thread/src/timer.c **** 	timer->init_tick    = time;
 296              		.loc 2 75 0
 297 00fa FB68     		ldr	r3, [r7, #12]
 298 00fc 3A68     		ldr	r2, [r7, #0]
 299 00fe 1A62     		str	r2, [r3, #32]
  76:../src/os/rt-thread/src/timer.c **** 
  77:../src/os/rt-thread/src/timer.c **** 	/* initialize timer list */
  78:../src/os/rt-thread/src/timer.c **** 	rt_list_init(&(timer->list));
 300              		.loc 2 78 0
 301 0100 FB68     		ldr	r3, [r7, #12]
 302 0102 03F11003 		add	r3, r3, #16
 303 0106 1846     		mov	r0, r3
 304 0108 FFF77AFF 		bl	rt_list_init
  79:../src/os/rt-thread/src/timer.c **** }
 305              		.loc 2 79 0
 306 010c 07F11007 		add	r7, r7, #16
 307 0110 BD46     		mov	sp, r7
 308 0112 80BD     		pop	{r7, pc}
 309              		.cfi_endproc
 310              	.LFE6:
 312              		.align	2
 313              		.thumb
 314              		.thumb_func
 316              	rt_timer_list_next_timeout:
 317              	.LFB7:
  80:../src/os/rt-thread/src/timer.c **** 
  81:../src/os/rt-thread/src/timer.c **** static rt_tick_t rt_timer_list_next_timeout(rt_list_t *timer_list)
  82:../src/os/rt-thread/src/timer.c **** {
 318              		.loc 2 82 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 16
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322 0114 80B5     		push	{r7, lr}
 323              	.LCFI18:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0116 84B0     		sub	sp, sp, #16
 328              	.LCFI19:
 329              		.cfi_def_cfa_offset 24
 330 0118 00AF     		add	r7, sp, #0
 331              	.LCFI20:
 332              		.cfi_def_cfa_register 7
 333 011a 7860     		str	r0, [r7, #4]
  83:../src/os/rt-thread/src/timer.c **** 	struct rt_timer *timer;
  84:../src/os/rt-thread/src/timer.c **** 
  85:../src/os/rt-thread/src/timer.c **** 	if (rt_list_isempty(timer_list))
 334              		.loc 2 85 0
 335 011c 7868     		ldr	r0, [r7, #4]
 336 011e FFF7B1FF 		bl	rt_list_isempty
 337 0122 0346     		mov	r3, r0
 338 0124 002B     		cmp	r3, #0
 339 0126 02D0     		beq	.L11
  86:../src/os/rt-thread/src/timer.c **** 		return RT_TICK_MAX;
 340              		.loc 2 86 0
 341 0128 4FF0FF33 		mov	r3, #-1
 342 012c 06E0     		b	.L12
 343              	.L11:
  87:../src/os/rt-thread/src/timer.c **** 	
  88:../src/os/rt-thread/src/timer.c **** 	timer = rt_list_entry(timer_list->next, struct rt_timer, list);
 344              		.loc 2 88 0
 345 012e 7B68     		ldr	r3, [r7, #4]
 346 0130 1B68     		ldr	r3, [r3, #0]
 347 0132 A3F11003 		sub	r3, r3, #16
 348 0136 FB60     		str	r3, [r7, #12]
  89:../src/os/rt-thread/src/timer.c **** 
  90:../src/os/rt-thread/src/timer.c **** 	return timer->timeout_tick;
 349              		.loc 2 90 0
 350 0138 FB68     		ldr	r3, [r7, #12]
 351 013a 5B6A     		ldr	r3, [r3, #36]
 352              	.L12:
  91:../src/os/rt-thread/src/timer.c **** }
 353              		.loc 2 91 0
 354 013c 1846     		mov	r0, r3
 355 013e 07F11007 		add	r7, r7, #16
 356 0142 BD46     		mov	sp, r7
 357 0144 80BD     		pop	{r7, pc}
 358              		.cfi_endproc
 359              	.LFE7:
 361              		.section	.rodata
 362              		.align	2
 363              	.LC0:
 364 0000 28257329 		.ascii	"(%s) assert failed at %s:%d \012\000"
 364      20617373 
 364      65727420 
 364      6661696C 
 364      65642061 
 365 001e 0000     		.align	2
 366              	.LC1:
 367 0020 74696D65 		.ascii	"timer != RT_NULL\000"
 367      7220213D 
 367      2052545F 
 367      4E554C4C 
 367      00
 368              		.text
 369 0146 00BF     		.align	2
 370              		.global	rt_timer_init
 371              		.thumb
 372              		.thumb_func
 374              	rt_timer_init:
 375              	.LFB8:
  92:../src/os/rt-thread/src/timer.c **** 
  93:../src/os/rt-thread/src/timer.c **** /**
  94:../src/os/rt-thread/src/timer.c ****  * @addtogroup Clock
  95:../src/os/rt-thread/src/timer.c ****  */
  96:../src/os/rt-thread/src/timer.c **** 
  97:../src/os/rt-thread/src/timer.c **** /*@{*/
  98:../src/os/rt-thread/src/timer.c **** 
  99:../src/os/rt-thread/src/timer.c **** /**
 100:../src/os/rt-thread/src/timer.c ****  * This function will initialize a timer, normally this function is used to
 101:../src/os/rt-thread/src/timer.c ****  * initialize a static timer object.
 102:../src/os/rt-thread/src/timer.c ****  *
 103:../src/os/rt-thread/src/timer.c ****  * @param timer the static timer object
 104:../src/os/rt-thread/src/timer.c ****  * @param name the name of timer
 105:../src/os/rt-thread/src/timer.c ****  * @param timeout the timeout function
 106:../src/os/rt-thread/src/timer.c ****  * @param parameter the parameter of timeout function
 107:../src/os/rt-thread/src/timer.c ****  * @param time the tick of timer
 108:../src/os/rt-thread/src/timer.c ****  * @param flag the flag of timer
 109:../src/os/rt-thread/src/timer.c ****  */
 110:../src/os/rt-thread/src/timer.c **** void rt_timer_init(rt_timer_t timer,
 111:../src/os/rt-thread/src/timer.c **** 				   const char *name,
 112:../src/os/rt-thread/src/timer.c **** 				   void (*timeout)(void *parameter), void *parameter,
 113:../src/os/rt-thread/src/timer.c **** 				   rt_tick_t time, rt_uint8_t flag)
 114:../src/os/rt-thread/src/timer.c **** {
 376              		.loc 2 114 0
 377              		.cfi_startproc
 378              		@ args = 8, pretend = 0, frame = 24
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380 0148 80B5     		push	{r7, lr}
 381              	.LCFI21:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 7, -8
 384              		.cfi_offset 14, -4
 385 014a 88B0     		sub	sp, sp, #32
 386              	.LCFI22:
 387              		.cfi_def_cfa_offset 40
 388 014c 02AF     		add	r7, sp, #8
 389              	.LCFI23:
 390              		.cfi_def_cfa 7, 32
 391 014e F860     		str	r0, [r7, #12]
 392 0150 B960     		str	r1, [r7, #8]
 393 0152 7A60     		str	r2, [r7, #4]
 394 0154 3B60     		str	r3, [r7, #0]
 115:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 116:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 395              		.loc 2 116 0
 396 0156 FB68     		ldr	r3, [r7, #12]
 397 0158 002B     		cmp	r3, #0
 398 015a 0DD1     		bne	.L14
 399              	.LBB2:
 400              		.loc 2 116 0 is_stmt 0 discriminator 1
 401 015c 4FF00003 		mov	r3, #0
 402 0160 FB75     		strb	r3, [r7, #23]
 403 0162 0F48     		ldr	r0, .L16
 404 0164 0F49     		ldr	r1, .L16+4
 405 0166 104A     		ldr	r2, .L16+8
 406 0168 4FF07403 		mov	r3, #116
 407 016c FFF7FEFF 		bl	rt_kprintf
 408              	.L15:
 409              		.loc 2 116 0 discriminator 2
 410 0170 FB7D     		ldrb	r3, [r7, #23]
 411 0172 DBB2     		uxtb	r3, r3
 412 0174 002B     		cmp	r3, #0
 413 0176 FBD0     		beq	.L15
 414              	.L14:
 415              	.LBE2:
 117:../src/os/rt-thread/src/timer.c **** 
 118:../src/os/rt-thread/src/timer.c **** 	/* timer object initialization */
 119:../src/os/rt-thread/src/timer.c **** 	rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
 416              		.loc 2 119 0 is_stmt 1
 417 0178 F868     		ldr	r0, [r7, #12]
 418 017a 4FF00901 		mov	r1, #9
 419 017e BA68     		ldr	r2, [r7, #8]
 420 0180 FFF7FEFF 		bl	rt_object_init
 120:../src/os/rt-thread/src/timer.c **** 
 121:../src/os/rt-thread/src/timer.c **** 	_rt_timer_init(timer, timeout, parameter, time, flag);
 421              		.loc 2 121 0
 422 0184 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 423 0188 0093     		str	r3, [sp, #0]
 424 018a F868     		ldr	r0, [r7, #12]
 425 018c 7968     		ldr	r1, [r7, #4]
 426 018e 3A68     		ldr	r2, [r7, #0]
 427 0190 3B6A     		ldr	r3, [r7, #32]
 428 0192 FFF797FF 		bl	_rt_timer_init
 122:../src/os/rt-thread/src/timer.c **** }
 429              		.loc 2 122 0
 430 0196 07F11807 		add	r7, r7, #24
 431 019a BD46     		mov	sp, r7
 432 019c 80BD     		pop	{r7, pc}
 433              	.L17:
 434 019e 00BF     		.align	2
 435              	.L16:
 436 01a0 00000000 		.word	.LC0
 437 01a4 20000000 		.word	.LC1
 438 01a8 AC000000 		.word	__FUNCTION__.4870
 439              		.cfi_endproc
 440              	.LFE8:
 442              		.align	2
 443              		.global	rt_timer_detach
 444              		.thumb
 445              		.thumb_func
 447              	rt_timer_detach:
 448              	.LFB9:
 123:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_init);
 124:../src/os/rt-thread/src/timer.c **** 
 125:../src/os/rt-thread/src/timer.c **** /**
 126:../src/os/rt-thread/src/timer.c ****  * This function will detach a timer from timer management.
 127:../src/os/rt-thread/src/timer.c ****  *
 128:../src/os/rt-thread/src/timer.c ****  * @param timer the static timer object
 129:../src/os/rt-thread/src/timer.c ****  *
 130:../src/os/rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 131:../src/os/rt-thread/src/timer.c ****  */
 132:../src/os/rt-thread/src/timer.c **** rt_err_t rt_timer_detach(rt_timer_t timer)
 133:../src/os/rt-thread/src/timer.c **** {
 449              		.loc 2 133 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 16
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453 01ac 90B5     		push	{r4, r7, lr}
 454              	.LCFI24:
 455              		.cfi_def_cfa_offset 12
 456              		.cfi_offset 4, -12
 457              		.cfi_offset 7, -8
 458              		.cfi_offset 14, -4
 459 01ae 85B0     		sub	sp, sp, #20
 460              	.LCFI25:
 461              		.cfi_def_cfa_offset 32
 462 01b0 00AF     		add	r7, sp, #0
 463              	.LCFI26:
 464              		.cfi_def_cfa_register 7
 465 01b2 7860     		str	r0, [r7, #4]
 134:../src/os/rt-thread/src/timer.c **** 	register rt_base_t level;
 135:../src/os/rt-thread/src/timer.c **** 
 136:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 137:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 466              		.loc 2 137 0
 467 01b4 7B68     		ldr	r3, [r7, #4]
 468 01b6 002B     		cmp	r3, #0
 469 01b8 0DD1     		bne	.L19
 470              	.LBB3:
 471              		.loc 2 137 0 is_stmt 0 discriminator 1
 472 01ba 4FF00003 		mov	r3, #0
 473 01be FB73     		strb	r3, [r7, #15]
 474 01c0 1048     		ldr	r0, .L22
 475 01c2 1149     		ldr	r1, .L22+4
 476 01c4 114A     		ldr	r2, .L22+8
 477 01c6 4FF08903 		mov	r3, #137
 478 01ca FFF7FEFF 		bl	rt_kprintf
 479              	.L20:
 480              		.loc 2 137 0 discriminator 2
 481 01ce FB7B     		ldrb	r3, [r7, #15]
 482 01d0 DBB2     		uxtb	r3, r3
 483 01d2 002B     		cmp	r3, #0
 484 01d4 FBD0     		beq	.L20
 485              	.L19:
 486              	.LBE3:
 138:../src/os/rt-thread/src/timer.c **** 
 139:../src/os/rt-thread/src/timer.c **** 	/* disable interrupt */
 140:../src/os/rt-thread/src/timer.c **** 	level = rt_hw_interrupt_disable();
 487              		.loc 2 140 0 is_stmt 1
 488 01d6 FFF7FEFF 		bl	rt_hw_interrupt_disable
 489 01da 0446     		mov	r4, r0
 141:../src/os/rt-thread/src/timer.c **** 
 142:../src/os/rt-thread/src/timer.c **** 	/* remove it from timer list */
 143:../src/os/rt-thread/src/timer.c **** 	rt_list_remove(&(timer->list));
 490              		.loc 2 143 0
 491 01dc 7B68     		ldr	r3, [r7, #4]
 492 01de 03F11003 		add	r3, r3, #16
 493 01e2 1846     		mov	r0, r3
 494 01e4 FFF734FF 		bl	rt_list_remove
 144:../src/os/rt-thread/src/timer.c **** 
 145:../src/os/rt-thread/src/timer.c **** 	/* enable interrupt */
 146:../src/os/rt-thread/src/timer.c **** 	rt_hw_interrupt_enable(level);
 495              		.loc 2 146 0
 496 01e8 2046     		mov	r0, r4
 497 01ea FFF7FEFF 		bl	rt_hw_interrupt_enable
 147:../src/os/rt-thread/src/timer.c **** 
 148:../src/os/rt-thread/src/timer.c **** 	rt_object_detach((rt_object_t)timer);
 498              		.loc 2 148 0
 499 01ee 7868     		ldr	r0, [r7, #4]
 500 01f0 FFF7FEFF 		bl	rt_object_detach
 149:../src/os/rt-thread/src/timer.c **** 
 150:../src/os/rt-thread/src/timer.c **** 	return -RT_EOK;
 501              		.loc 2 150 0
 502 01f4 4FF00003 		mov	r3, #0
 151:../src/os/rt-thread/src/timer.c **** }
 503              		.loc 2 151 0
 504 01f8 1846     		mov	r0, r3
 505 01fa 07F11407 		add	r7, r7, #20
 506 01fe BD46     		mov	sp, r7
 507 0200 90BD     		pop	{r4, r7, pc}
 508              	.L23:
 509 0202 00BF     		.align	2
 510              	.L22:
 511 0204 00000000 		.word	.LC0
 512 0208 20000000 		.word	.LC1
 513 020c 9C000000 		.word	__FUNCTION__.4879
 514              		.cfi_endproc
 515              	.LFE9:
 517              		.align	2
 518              		.global	rt_timer_create
 519              		.thumb
 520              		.thumb_func
 522              	rt_timer_create:
 523              	.LFB10:
 152:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_detach);
 153:../src/os/rt-thread/src/timer.c **** 
 154:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_HEAP
 155:../src/os/rt-thread/src/timer.c **** /**
 156:../src/os/rt-thread/src/timer.c ****  * This function will create a timer
 157:../src/os/rt-thread/src/timer.c ****  *
 158:../src/os/rt-thread/src/timer.c ****  * @param name the name of timer
 159:../src/os/rt-thread/src/timer.c ****  * @param timeout the timeout function
 160:../src/os/rt-thread/src/timer.c ****  * @param parameter the parameter of timeout function
 161:../src/os/rt-thread/src/timer.c ****  * @param time the tick of timer
 162:../src/os/rt-thread/src/timer.c ****  * @param flag the flag of timer
 163:../src/os/rt-thread/src/timer.c ****  *
 164:../src/os/rt-thread/src/timer.c ****  * @return the created timer object
 165:../src/os/rt-thread/src/timer.c ****  */
 166:../src/os/rt-thread/src/timer.c **** rt_timer_t rt_timer_create(const char *name, void (*timeout)(void *parameter),
 167:../src/os/rt-thread/src/timer.c **** 		void *parameter, rt_tick_t time, rt_uint8_t flag)
 168:../src/os/rt-thread/src/timer.c **** {
 524              		.loc 2 168 0
 525              		.cfi_startproc
 526              		@ args = 4, pretend = 0, frame = 24
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0210 80B5     		push	{r7, lr}
 529              	.LCFI27:
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0212 88B0     		sub	sp, sp, #32
 534              	.LCFI28:
 535              		.cfi_def_cfa_offset 40
 536 0214 02AF     		add	r7, sp, #8
 537              	.LCFI29:
 538              		.cfi_def_cfa 7, 32
 539 0216 F860     		str	r0, [r7, #12]
 540 0218 B960     		str	r1, [r7, #8]
 541 021a 7A60     		str	r2, [r7, #4]
 542 021c 3B60     		str	r3, [r7, #0]
 169:../src/os/rt-thread/src/timer.c **** 	struct rt_timer *timer;
 170:../src/os/rt-thread/src/timer.c **** 
 171:../src/os/rt-thread/src/timer.c **** 	/* allocate a object */
 172:../src/os/rt-thread/src/timer.c **** 	timer = (struct rt_timer *)rt_object_allocate(RT_Object_Class_Timer, name);
 543              		.loc 2 172 0
 544 021e 4FF00900 		mov	r0, #9
 545 0222 F968     		ldr	r1, [r7, #12]
 546 0224 FFF7FEFF 		bl	rt_object_allocate
 547 0228 7861     		str	r0, [r7, #20]
 173:../src/os/rt-thread/src/timer.c **** 	if (timer == RT_NULL)
 548              		.loc 2 173 0
 549 022a 7B69     		ldr	r3, [r7, #20]
 550 022c 002B     		cmp	r3, #0
 551 022e 02D1     		bne	.L25
 174:../src/os/rt-thread/src/timer.c **** 	{
 175:../src/os/rt-thread/src/timer.c **** 		return RT_NULL;
 552              		.loc 2 175 0
 553 0230 4FF00003 		mov	r3, #0
 554 0234 09E0     		b	.L26
 555              	.L25:
 176:../src/os/rt-thread/src/timer.c **** 	}
 177:../src/os/rt-thread/src/timer.c **** 
 178:../src/os/rt-thread/src/timer.c **** 	_rt_timer_init(timer, timeout, parameter, time, flag);
 556              		.loc 2 178 0
 557 0236 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 558 023a 0093     		str	r3, [sp, #0]
 559 023c 7869     		ldr	r0, [r7, #20]
 560 023e B968     		ldr	r1, [r7, #8]
 561 0240 7A68     		ldr	r2, [r7, #4]
 562 0242 3B68     		ldr	r3, [r7, #0]
 563 0244 FFF73EFF 		bl	_rt_timer_init
 179:../src/os/rt-thread/src/timer.c **** 
 180:../src/os/rt-thread/src/timer.c **** 	return timer;
 564              		.loc 2 180 0
 565 0248 7B69     		ldr	r3, [r7, #20]
 566              	.L26:
 181:../src/os/rt-thread/src/timer.c **** }
 567              		.loc 2 181 0
 568 024a 1846     		mov	r0, r3
 569 024c 07F11807 		add	r7, r7, #24
 570 0250 BD46     		mov	sp, r7
 571 0252 80BD     		pop	{r7, pc}
 572              		.cfi_endproc
 573              	.LFE10:
 575              		.align	2
 576              		.global	rt_timer_delete
 577              		.thumb
 578              		.thumb_func
 580              	rt_timer_delete:
 581              	.LFB11:
 182:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_create);
 183:../src/os/rt-thread/src/timer.c **** 
 184:../src/os/rt-thread/src/timer.c **** /**
 185:../src/os/rt-thread/src/timer.c ****  * This function will delete a timer and release timer memory
 186:../src/os/rt-thread/src/timer.c ****  *
 187:../src/os/rt-thread/src/timer.c ****  * @param timer the timer to be deleted
 188:../src/os/rt-thread/src/timer.c ****  *
 189:../src/os/rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 190:../src/os/rt-thread/src/timer.c ****  */
 191:../src/os/rt-thread/src/timer.c **** rt_err_t rt_timer_delete(rt_timer_t timer)
 192:../src/os/rt-thread/src/timer.c **** {
 582              		.loc 2 192 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 16
 585              		@ frame_needed = 1, uses_anonymous_args = 0
 586 0254 90B5     		push	{r4, r7, lr}
 587              	.LCFI30:
 588              		.cfi_def_cfa_offset 12
 589              		.cfi_offset 4, -12
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 0256 85B0     		sub	sp, sp, #20
 593              	.LCFI31:
 594              		.cfi_def_cfa_offset 32
 595 0258 00AF     		add	r7, sp, #0
 596              	.LCFI32:
 597              		.cfi_def_cfa_register 7
 598 025a 7860     		str	r0, [r7, #4]
 193:../src/os/rt-thread/src/timer.c **** 	register rt_base_t level;
 194:../src/os/rt-thread/src/timer.c **** 
 195:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 196:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 599              		.loc 2 196 0
 600 025c 7B68     		ldr	r3, [r7, #4]
 601 025e 002B     		cmp	r3, #0
 602 0260 0DD1     		bne	.L28
 603              	.LBB4:
 604              		.loc 2 196 0 is_stmt 0 discriminator 1
 605 0262 4FF00003 		mov	r3, #0
 606 0266 FB73     		strb	r3, [r7, #15]
 607 0268 1048     		ldr	r0, .L31
 608 026a 1149     		ldr	r1, .L31+4
 609 026c 114A     		ldr	r2, .L31+8
 610 026e 4FF0C403 		mov	r3, #196
 611 0272 FFF7FEFF 		bl	rt_kprintf
 612              	.L29:
 613              		.loc 2 196 0 discriminator 2
 614 0276 FB7B     		ldrb	r3, [r7, #15]
 615 0278 DBB2     		uxtb	r3, r3
 616 027a 002B     		cmp	r3, #0
 617 027c FBD0     		beq	.L29
 618              	.L28:
 619              	.LBE4:
 197:../src/os/rt-thread/src/timer.c **** 
 198:../src/os/rt-thread/src/timer.c **** 	/* disable interrupt */
 199:../src/os/rt-thread/src/timer.c **** 	level = rt_hw_interrupt_disable();
 620              		.loc 2 199 0 is_stmt 1
 621 027e FFF7FEFF 		bl	rt_hw_interrupt_disable
 622 0282 0446     		mov	r4, r0
 200:../src/os/rt-thread/src/timer.c **** 
 201:../src/os/rt-thread/src/timer.c **** 	/* remove it from timer list */
 202:../src/os/rt-thread/src/timer.c **** 	rt_list_remove(&(timer->list));
 623              		.loc 2 202 0
 624 0284 7B68     		ldr	r3, [r7, #4]
 625 0286 03F11003 		add	r3, r3, #16
 626 028a 1846     		mov	r0, r3
 627 028c FFF7E0FE 		bl	rt_list_remove
 203:../src/os/rt-thread/src/timer.c **** 
 204:../src/os/rt-thread/src/timer.c **** 	/* enable interrupt */
 205:../src/os/rt-thread/src/timer.c **** 	rt_hw_interrupt_enable(level);
 628              		.loc 2 205 0
 629 0290 2046     		mov	r0, r4
 630 0292 FFF7FEFF 		bl	rt_hw_interrupt_enable
 206:../src/os/rt-thread/src/timer.c **** 
 207:../src/os/rt-thread/src/timer.c **** 	rt_object_delete((rt_object_t)timer);
 631              		.loc 2 207 0
 632 0296 7868     		ldr	r0, [r7, #4]
 633 0298 FFF7FEFF 		bl	rt_object_delete
 208:../src/os/rt-thread/src/timer.c **** 
 209:../src/os/rt-thread/src/timer.c **** 	return -RT_EOK;
 634              		.loc 2 209 0
 635 029c 4FF00003 		mov	r3, #0
 210:../src/os/rt-thread/src/timer.c **** }
 636              		.loc 2 210 0
 637 02a0 1846     		mov	r0, r3
 638 02a2 07F11407 		add	r7, r7, #20
 639 02a6 BD46     		mov	sp, r7
 640 02a8 90BD     		pop	{r4, r7, pc}
 641              	.L32:
 642 02aa 00BF     		.align	2
 643              	.L31:
 644 02ac 00000000 		.word	.LC0
 645 02b0 20000000 		.word	.LC1
 646 02b4 8C000000 		.word	__FUNCTION__.4897
 647              		.cfi_endproc
 648              	.LFE11:
 650              		.section	.rodata
 651 0031 000000   		.align	2
 652              	.LC2:
 653 0034 74696D65 		.ascii	"timer->init_tick < RT_TICK_MAX/2\000"
 653      722D3E69 
 653      6E69745F 
 653      7469636B 
 653      203C2052 
 654              		.text
 655              		.align	2
 656              		.global	rt_timer_start
 657              		.thumb
 658              		.thumb_func
 660              	rt_timer_start:
 661              	.LFB12:
 211:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_delete);
 212:../src/os/rt-thread/src/timer.c **** #endif
 213:../src/os/rt-thread/src/timer.c **** 
 214:../src/os/rt-thread/src/timer.c **** /**
 215:../src/os/rt-thread/src/timer.c ****  * This function will start the timer
 216:../src/os/rt-thread/src/timer.c ****  *
 217:../src/os/rt-thread/src/timer.c ****  * @param timer the timer to be started
 218:../src/os/rt-thread/src/timer.c ****  *
 219:../src/os/rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 220:../src/os/rt-thread/src/timer.c ****  */
 221:../src/os/rt-thread/src/timer.c **** rt_err_t rt_timer_start(rt_timer_t timer)
 222:../src/os/rt-thread/src/timer.c **** {
 662              		.loc 2 222 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 24
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666 02b8 90B5     		push	{r4, r7, lr}
 667              	.LCFI33:
 668              		.cfi_def_cfa_offset 12
 669              		.cfi_offset 4, -12
 670              		.cfi_offset 7, -8
 671              		.cfi_offset 14, -4
 672 02ba 87B0     		sub	sp, sp, #28
 673              	.LCFI34:
 674              		.cfi_def_cfa_offset 40
 675 02bc 00AF     		add	r7, sp, #0
 676              	.LCFI35:
 677              		.cfi_def_cfa_register 7
 678 02be 7860     		str	r0, [r7, #4]
 223:../src/os/rt-thread/src/timer.c **** 	struct rt_timer *t;
 224:../src/os/rt-thread/src/timer.c **** 	register rt_base_t level;
 225:../src/os/rt-thread/src/timer.c **** 	rt_list_t *n, *timer_list;
 226:../src/os/rt-thread/src/timer.c **** 
 227:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 228:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 679              		.loc 2 228 0
 680 02c0 7B68     		ldr	r3, [r7, #4]
 681 02c2 002B     		cmp	r3, #0
 682 02c4 0DD1     		bne	.L34
 683              	.LBB5:
 684              		.loc 2 228 0 is_stmt 0 discriminator 1
 685 02c6 4FF00003 		mov	r3, #0
 686 02ca FB72     		strb	r3, [r7, #11]
 687 02cc 3B48     		ldr	r0, .L46
 688 02ce 3C49     		ldr	r1, .L46+4
 689 02d0 3C4A     		ldr	r2, .L46+8
 690 02d2 4FF0E403 		mov	r3, #228
 691 02d6 FFF7FEFF 		bl	rt_kprintf
 692              	.L35:
 693              		.loc 2 228 0 discriminator 2
 694 02da FB7A     		ldrb	r3, [r7, #11]
 695 02dc DBB2     		uxtb	r3, r3
 696 02de 002B     		cmp	r3, #0
 697 02e0 FBD0     		beq	.L35
 698              	.L34:
 699              	.LBE5:
 229:../src/os/rt-thread/src/timer.c **** 	if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
 700              		.loc 2 229 0 is_stmt 1
 701 02e2 7B68     		ldr	r3, [r7, #4]
 702 02e4 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 703 02e6 03F00103 		and	r3, r3, #1
 704 02ea 002B     		cmp	r3, #0
 705 02ec 02D0     		beq	.L36
 230:../src/os/rt-thread/src/timer.c **** 		return -RT_ERROR;
 706              		.loc 2 230 0
 707 02ee 4FF0FF33 		mov	r3, #-1
 708 02f2 5EE0     		b	.L37
 709              	.L36:
 231:../src/os/rt-thread/src/timer.c **** 
 232:../src/os/rt-thread/src/timer.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
 710              		.loc 2 232 0
 711 02f4 344B     		ldr	r3, .L46+12
 712 02f6 1B68     		ldr	r3, [r3, #0]
 713 02f8 002B     		cmp	r3, #0
 714 02fa 04D0     		beq	.L38
 715              		.loc 2 232 0 is_stmt 0 discriminator 1
 716 02fc 324B     		ldr	r3, .L46+12
 717 02fe 1B68     		ldr	r3, [r3, #0]
 718 0300 7A68     		ldr	r2, [r7, #4]
 719 0302 1046     		mov	r0, r2
 720 0304 9847     		blx	r3
 721              	.L38:
 233:../src/os/rt-thread/src/timer.c **** 
 234:../src/os/rt-thread/src/timer.c **** 	/* get timeout tick, the max timeout tick shall not great than RT_TICK_MAX/2 */
 235:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer->init_tick < RT_TICK_MAX/2);
 722              		.loc 2 235 0 is_stmt 1
 723 0306 7B68     		ldr	r3, [r7, #4]
 724 0308 1A6A     		ldr	r2, [r3, #32]
 725 030a 304B     		ldr	r3, .L46+16
 726 030c 9A42     		cmp	r2, r3
 727 030e 0DD9     		bls	.L39
 728              	.LBB6:
 729              		.loc 2 235 0 is_stmt 0 discriminator 1
 730 0310 4FF00003 		mov	r3, #0
 731 0314 BB72     		strb	r3, [r7, #10]
 732 0316 2948     		ldr	r0, .L46
 733 0318 2D49     		ldr	r1, .L46+20
 734 031a 2A4A     		ldr	r2, .L46+8
 735 031c 4FF0EB03 		mov	r3, #235
 736 0320 FFF7FEFF 		bl	rt_kprintf
 737              	.L40:
 738              		.loc 2 235 0 discriminator 2
 739 0324 BB7A     		ldrb	r3, [r7, #10]
 740 0326 DBB2     		uxtb	r3, r3
 741 0328 002B     		cmp	r3, #0
 742 032a FBD0     		beq	.L40
 743              	.L39:
 744              	.LBE6:
 236:../src/os/rt-thread/src/timer.c **** 	timer->timeout_tick = rt_tick_get() + timer->init_tick;
 745              		.loc 2 236 0 is_stmt 1
 746 032c FFF7FEFF 		bl	rt_tick_get
 747 0330 0246     		mov	r2, r0
 748 0332 7B68     		ldr	r3, [r7, #4]
 749 0334 1B6A     		ldr	r3, [r3, #32]
 750 0336 D218     		adds	r2, r2, r3
 751 0338 7B68     		ldr	r3, [r7, #4]
 752 033a 5A62     		str	r2, [r3, #36]
 237:../src/os/rt-thread/src/timer.c **** 
 238:../src/os/rt-thread/src/timer.c **** 	/* disable interrupt */
 239:../src/os/rt-thread/src/timer.c **** 	level = rt_hw_interrupt_disable();
 753              		.loc 2 239 0
 754 033c FFF7FEFF 		bl	rt_hw_interrupt_disable
 755 0340 0446     		mov	r4, r0
 240:../src/os/rt-thread/src/timer.c **** 
 241:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 242:../src/os/rt-thread/src/timer.c **** 	if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 243:../src/os/rt-thread/src/timer.c **** 	{
 244:../src/os/rt-thread/src/timer.c **** 		/* insert timer to soft timer list */
 245:../src/os/rt-thread/src/timer.c **** 		timer_list = &rt_soft_timer_list;
 246:../src/os/rt-thread/src/timer.c **** 	}
 247:../src/os/rt-thread/src/timer.c **** 	else
 248:../src/os/rt-thread/src/timer.c **** #endif
 249:../src/os/rt-thread/src/timer.c **** 	{
 250:../src/os/rt-thread/src/timer.c **** 		/* insert timer to system timer list */
 251:../src/os/rt-thread/src/timer.c **** 		timer_list = &rt_timer_list;
 756              		.loc 2 251 0
 757 0342 244B     		ldr	r3, .L46+24
 758 0344 3B61     		str	r3, [r7, #16]
 252:../src/os/rt-thread/src/timer.c **** 	}
 253:../src/os/rt-thread/src/timer.c **** 
 254:../src/os/rt-thread/src/timer.c **** 	for (n = timer_list->next; n != timer_list; n = n->next)
 759              		.loc 2 254 0
 760 0346 3B69     		ldr	r3, [r7, #16]
 761 0348 1B68     		ldr	r3, [r3, #0]
 762 034a 7B61     		str	r3, [r7, #20]
 763 034c 16E0     		b	.L41
 764              	.L44:
 255:../src/os/rt-thread/src/timer.c **** 	{
 256:../src/os/rt-thread/src/timer.c **** 		t = rt_list_entry(n, struct rt_timer, list);
 765              		.loc 2 256 0
 766 034e 7B69     		ldr	r3, [r7, #20]
 767 0350 A3F11003 		sub	r3, r3, #16
 768 0354 FB60     		str	r3, [r7, #12]
 257:../src/os/rt-thread/src/timer.c **** 		
 258:../src/os/rt-thread/src/timer.c **** 		/*
 259:../src/os/rt-thread/src/timer.c **** 		 * It supposes that the new tick shall less than the half duration of
 260:../src/os/rt-thread/src/timer.c **** 		 * tick max.
 261:../src/os/rt-thread/src/timer.c **** 		 */
 262:../src/os/rt-thread/src/timer.c **** 		if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX/2)
 769              		.loc 2 262 0
 770 0356 FB68     		ldr	r3, [r7, #12]
 771 0358 5A6A     		ldr	r2, [r3, #36]
 772 035a 7B68     		ldr	r3, [r7, #4]
 773 035c 5B6A     		ldr	r3, [r3, #36]
 774 035e D21A     		subs	r2, r2, r3
 775 0360 1A4B     		ldr	r3, .L46+16
 776 0362 9A42     		cmp	r2, r3
 777 0364 07D8     		bhi	.L42
 263:../src/os/rt-thread/src/timer.c **** 		{
 264:../src/os/rt-thread/src/timer.c **** 			rt_list_insert_before(n, &(timer->list));
 778              		.loc 2 264 0
 779 0366 7B68     		ldr	r3, [r7, #4]
 780 0368 03F11003 		add	r3, r3, #16
 781 036c 7869     		ldr	r0, [r7, #20]
 782 036e 1946     		mov	r1, r3
 783 0370 FFF756FE 		bl	rt_list_insert_before
 265:../src/os/rt-thread/src/timer.c **** 			break;
 784              		.loc 2 265 0
 785 0374 06E0     		b	.L43
 786              	.L42:
 254:../src/os/rt-thread/src/timer.c **** 	for (n = timer_list->next; n != timer_list; n = n->next)
 787              		.loc 2 254 0
 788 0376 7B69     		ldr	r3, [r7, #20]
 789 0378 1B68     		ldr	r3, [r3, #0]
 790 037a 7B61     		str	r3, [r7, #20]
 791              	.L41:
 254:../src/os/rt-thread/src/timer.c **** 	for (n = timer_list->next; n != timer_list; n = n->next)
 792              		.loc 2 254 0 is_stmt 0 discriminator 1
 793 037c 7A69     		ldr	r2, [r7, #20]
 794 037e 3B69     		ldr	r3, [r7, #16]
 795 0380 9A42     		cmp	r2, r3
 796 0382 E4D1     		bne	.L44
 797              	.L43:
 266:../src/os/rt-thread/src/timer.c **** 		}
 267:../src/os/rt-thread/src/timer.c **** 	}
 268:../src/os/rt-thread/src/timer.c **** 	/* no found suitable position in timer list */
 269:../src/os/rt-thread/src/timer.c **** 	if (n == timer_list)
 798              		.loc 2 269 0 is_stmt 1
 799 0384 7A69     		ldr	r2, [r7, #20]
 800 0386 3B69     		ldr	r3, [r7, #16]
 801 0388 9A42     		cmp	r2, r3
 802 038a 06D1     		bne	.L45
 270:../src/os/rt-thread/src/timer.c **** 	{
 271:../src/os/rt-thread/src/timer.c **** 		rt_list_insert_before(n, &(timer->list));
 803              		.loc 2 271 0
 804 038c 7B68     		ldr	r3, [r7, #4]
 805 038e 03F11003 		add	r3, r3, #16
 806 0392 7869     		ldr	r0, [r7, #20]
 807 0394 1946     		mov	r1, r3
 808 0396 FFF743FE 		bl	rt_list_insert_before
 809              	.L45:
 272:../src/os/rt-thread/src/timer.c **** 	}
 273:../src/os/rt-thread/src/timer.c **** 
 274:../src/os/rt-thread/src/timer.c **** 	timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
 810              		.loc 2 274 0
 811 039a 7B68     		ldr	r3, [r7, #4]
 812 039c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 813 039e 43F00103 		orr	r3, r3, #1
 814 03a2 DAB2     		uxtb	r2, r3
 815 03a4 7B68     		ldr	r3, [r7, #4]
 816 03a6 DA71     		strb	r2, [r3, #7]
 275:../src/os/rt-thread/src/timer.c **** 
 276:../src/os/rt-thread/src/timer.c **** 	/* enable interrupt */
 277:../src/os/rt-thread/src/timer.c **** 	rt_hw_interrupt_enable(level);
 817              		.loc 2 277 0
 818 03a8 2046     		mov	r0, r4
 819 03aa FFF7FEFF 		bl	rt_hw_interrupt_enable
 278:../src/os/rt-thread/src/timer.c **** 
 279:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 280:../src/os/rt-thread/src/timer.c **** 	if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 281:../src/os/rt-thread/src/timer.c **** 	{
 282:../src/os/rt-thread/src/timer.c **** 		/* check whether timer thread is ready */
 283:../src/os/rt-thread/src/timer.c **** 		if (timer_thread.stat != RT_THREAD_READY)
 284:../src/os/rt-thread/src/timer.c **** 		{
 285:../src/os/rt-thread/src/timer.c **** 			/* resume timer thread to check soft timer */
 286:../src/os/rt-thread/src/timer.c **** 			rt_thread_resume(&timer_thread);
 287:../src/os/rt-thread/src/timer.c **** 			rt_schedule();
 288:../src/os/rt-thread/src/timer.c **** 		}
 289:../src/os/rt-thread/src/timer.c **** 	}
 290:../src/os/rt-thread/src/timer.c **** #endif
 291:../src/os/rt-thread/src/timer.c **** 
 292:../src/os/rt-thread/src/timer.c **** 	return -RT_EOK;
 820              		.loc 2 292 0
 821 03ae 4FF00003 		mov	r3, #0
 822              	.L37:
 293:../src/os/rt-thread/src/timer.c **** }
 823              		.loc 2 293 0
 824 03b2 1846     		mov	r0, r3
 825 03b4 07F11C07 		add	r7, r7, #28
 826 03b8 BD46     		mov	sp, r7
 827 03ba 90BD     		pop	{r4, r7, pc}
 828              	.L47:
 829              		.align	2
 830              	.L46:
 831 03bc 00000000 		.word	.LC0
 832 03c0 20000000 		.word	.LC1
 833 03c4 7C000000 		.word	__FUNCTION__.4909
 834 03c8 00000000 		.word	rt_object_take_hook
 835 03cc FEFFFF7F 		.word	2147483646
 836 03d0 34000000 		.word	.LC2
 837 03d4 00000000 		.word	rt_timer_list
 838              		.cfi_endproc
 839              	.LFE12:
 841              		.align	2
 842              		.global	rt_timer_stop
 843              		.thumb
 844              		.thumb_func
 846              	rt_timer_stop:
 847              	.LFB13:
 294:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_start);
 295:../src/os/rt-thread/src/timer.c **** 
 296:../src/os/rt-thread/src/timer.c **** /**
 297:../src/os/rt-thread/src/timer.c ****  * This function will stop the timer
 298:../src/os/rt-thread/src/timer.c ****  *
 299:../src/os/rt-thread/src/timer.c ****  * @param timer the timer to be stopped
 300:../src/os/rt-thread/src/timer.c ****  *
 301:../src/os/rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 302:../src/os/rt-thread/src/timer.c ****  */
 303:../src/os/rt-thread/src/timer.c **** rt_err_t rt_timer_stop(rt_timer_t timer)
 304:../src/os/rt-thread/src/timer.c **** {
 848              		.loc 2 304 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 16
 851              		@ frame_needed = 1, uses_anonymous_args = 0
 852 03d8 90B5     		push	{r4, r7, lr}
 853              	.LCFI36:
 854              		.cfi_def_cfa_offset 12
 855              		.cfi_offset 4, -12
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 03da 85B0     		sub	sp, sp, #20
 859              	.LCFI37:
 860              		.cfi_def_cfa_offset 32
 861 03dc 00AF     		add	r7, sp, #0
 862              	.LCFI38:
 863              		.cfi_def_cfa_register 7
 864 03de 7860     		str	r0, [r7, #4]
 305:../src/os/rt-thread/src/timer.c **** 	register rt_base_t level;
 306:../src/os/rt-thread/src/timer.c **** 
 307:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 308:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 865              		.loc 2 308 0
 866 03e0 7B68     		ldr	r3, [r7, #4]
 867 03e2 002B     		cmp	r3, #0
 868 03e4 0DD1     		bne	.L49
 869              	.LBB7:
 870              		.loc 2 308 0 is_stmt 0 discriminator 1
 871 03e6 4FF00003 		mov	r3, #0
 872 03ea FB73     		strb	r3, [r7, #15]
 873 03ec 1B48     		ldr	r0, .L54
 874 03ee 1C49     		ldr	r1, .L54+4
 875 03f0 1C4A     		ldr	r2, .L54+8
 876 03f2 4FF49A73 		mov	r3, #308
 877 03f6 FFF7FEFF 		bl	rt_kprintf
 878              	.L50:
 879              		.loc 2 308 0 discriminator 2
 880 03fa FB7B     		ldrb	r3, [r7, #15]
 881 03fc DBB2     		uxtb	r3, r3
 882 03fe 002B     		cmp	r3, #0
 883 0400 FBD0     		beq	.L50
 884              	.L49:
 885              	.LBE7:
 309:../src/os/rt-thread/src/timer.c **** 	if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 886              		.loc 2 309 0 is_stmt 1
 887 0402 7B68     		ldr	r3, [r7, #4]
 888 0404 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 889 0406 03F00103 		and	r3, r3, #1
 890 040a 002B     		cmp	r3, #0
 891 040c 02D1     		bne	.L51
 310:../src/os/rt-thread/src/timer.c **** 		return -RT_ERROR;
 892              		.loc 2 310 0
 893 040e 4FF0FF33 		mov	r3, #-1
 894 0412 1DE0     		b	.L52
 895              	.L51:
 311:../src/os/rt-thread/src/timer.c **** 
 312:../src/os/rt-thread/src/timer.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
 896              		.loc 2 312 0
 897 0414 144B     		ldr	r3, .L54+12
 898 0416 1B68     		ldr	r3, [r3, #0]
 899 0418 002B     		cmp	r3, #0
 900 041a 04D0     		beq	.L53
 901              		.loc 2 312 0 is_stmt 0 discriminator 1
 902 041c 124B     		ldr	r3, .L54+12
 903 041e 1B68     		ldr	r3, [r3, #0]
 904 0420 7A68     		ldr	r2, [r7, #4]
 905 0422 1046     		mov	r0, r2
 906 0424 9847     		blx	r3
 907              	.L53:
 313:../src/os/rt-thread/src/timer.c **** 
 314:../src/os/rt-thread/src/timer.c **** 	/* disable interrupt */
 315:../src/os/rt-thread/src/timer.c **** 	level = rt_hw_interrupt_disable();
 908              		.loc 2 315 0 is_stmt 1
 909 0426 FFF7FEFF 		bl	rt_hw_interrupt_disable
 910 042a 0446     		mov	r4, r0
 316:../src/os/rt-thread/src/timer.c **** 
 317:../src/os/rt-thread/src/timer.c **** 	/* remove it from timer list */
 318:../src/os/rt-thread/src/timer.c **** 	rt_list_remove(&(timer->list));
 911              		.loc 2 318 0
 912 042c 7B68     		ldr	r3, [r7, #4]
 913 042e 03F11003 		add	r3, r3, #16
 914 0432 1846     		mov	r0, r3
 915 0434 FFF70CFE 		bl	rt_list_remove
 319:../src/os/rt-thread/src/timer.c **** 
 320:../src/os/rt-thread/src/timer.c **** 	/* enable interrupt */
 321:../src/os/rt-thread/src/timer.c **** 	rt_hw_interrupt_enable(level);
 916              		.loc 2 321 0
 917 0438 2046     		mov	r0, r4
 918 043a FFF7FEFF 		bl	rt_hw_interrupt_enable
 322:../src/os/rt-thread/src/timer.c **** 
 323:../src/os/rt-thread/src/timer.c **** 	/* change stat */
 324:../src/os/rt-thread/src/timer.c **** 	timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 919              		.loc 2 324 0
 920 043e 7B68     		ldr	r3, [r7, #4]
 921 0440 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 922 0442 23F00103 		bic	r3, r3, #1
 923 0446 DAB2     		uxtb	r2, r3
 924 0448 7B68     		ldr	r3, [r7, #4]
 925 044a DA71     		strb	r2, [r3, #7]
 325:../src/os/rt-thread/src/timer.c **** 
 326:../src/os/rt-thread/src/timer.c **** 	return RT_EOK;
 926              		.loc 2 326 0
 927 044c 4FF00003 		mov	r3, #0
 928              	.L52:
 327:../src/os/rt-thread/src/timer.c **** }
 929              		.loc 2 327 0
 930 0450 1846     		mov	r0, r3
 931 0452 07F11407 		add	r7, r7, #20
 932 0456 BD46     		mov	sp, r7
 933 0458 90BD     		pop	{r4, r7, pc}
 934              	.L55:
 935 045a 00BF     		.align	2
 936              	.L54:
 937 045c 00000000 		.word	.LC0
 938 0460 20000000 		.word	.LC1
 939 0464 6C000000 		.word	__FUNCTION__.4925
 940 0468 00000000 		.word	rt_object_put_hook
 941              		.cfi_endproc
 942              	.LFE13:
 944              		.align	2
 945              		.global	rt_timer_control
 946              		.thumb
 947              		.thumb_func
 949              	rt_timer_control:
 950              	.LFB14:
 328:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_stop);
 329:../src/os/rt-thread/src/timer.c **** 
 330:../src/os/rt-thread/src/timer.c **** /**
 331:../src/os/rt-thread/src/timer.c ****  * This function will get or set some options of the timer
 332:../src/os/rt-thread/src/timer.c ****  *
 333:../src/os/rt-thread/src/timer.c ****  * @param timer the timer to be get or set
 334:../src/os/rt-thread/src/timer.c ****  * @param cmd the control command
 335:../src/os/rt-thread/src/timer.c ****  * @param arg the argument
 336:../src/os/rt-thread/src/timer.c ****  *
 337:../src/os/rt-thread/src/timer.c ****  * @return RT_EOK
 338:../src/os/rt-thread/src/timer.c ****  */
 339:../src/os/rt-thread/src/timer.c **** rt_err_t rt_timer_control(rt_timer_t timer, rt_uint8_t cmd, void *arg)
 340:../src/os/rt-thread/src/timer.c **** {
 951              		.loc 2 340 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 24
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955 046c 80B5     		push	{r7, lr}
 956              	.LCFI39:
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 046e 86B0     		sub	sp, sp, #24
 961              	.LCFI40:
 962              		.cfi_def_cfa_offset 32
 963 0470 00AF     		add	r7, sp, #0
 964              	.LCFI41:
 965              		.cfi_def_cfa_register 7
 966 0472 F860     		str	r0, [r7, #12]
 967 0474 0B46     		mov	r3, r1
 968 0476 7A60     		str	r2, [r7, #4]
 969 0478 FB72     		strb	r3, [r7, #11]
 341:../src/os/rt-thread/src/timer.c **** 	/* timer check */
 342:../src/os/rt-thread/src/timer.c **** 	RT_ASSERT(timer != RT_NULL);
 970              		.loc 2 342 0
 971 047a FB68     		ldr	r3, [r7, #12]
 972 047c 002B     		cmp	r3, #0
 973 047e 0DD1     		bne	.L57
 974              	.LBB8:
 975              		.loc 2 342 0 is_stmt 0 discriminator 1
 976 0480 4FF00003 		mov	r3, #0
 977 0484 FB75     		strb	r3, [r7, #23]
 978 0486 1D48     		ldr	r0, .L66
 979 0488 1D49     		ldr	r1, .L66+4
 980 048a 1E4A     		ldr	r2, .L66+8
 981 048c 4FF4AB73 		mov	r3, #342
 982 0490 FFF7FEFF 		bl	rt_kprintf
 983              	.L58:
 984              		.loc 2 342 0 discriminator 2
 985 0494 FB7D     		ldrb	r3, [r7, #23]
 986 0496 DBB2     		uxtb	r3, r3
 987 0498 002B     		cmp	r3, #0
 988 049a FBD0     		beq	.L58
 989              	.L57:
 990              	.LBE8:
 343:../src/os/rt-thread/src/timer.c **** 
 344:../src/os/rt-thread/src/timer.c **** 	switch (cmd)
 991              		.loc 2 344 0 is_stmt 1
 992 049c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 993 049e 032B     		cmp	r3, #3
 994 04a0 24D8     		bhi	.L59
 995 04a2 01A2     		adr	r2, .L64
 996 04a4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 997              		.align	2
 998              	.L64:
 999 04a8 C3040000 		.word	.L60+1
 1000 04ac B9040000 		.word	.L61+1
 1001 04b0 CD040000 		.word	.L62+1
 1002 04b4 DD040000 		.word	.L63+1
 1003              	.L61:
 345:../src/os/rt-thread/src/timer.c **** 	{
 346:../src/os/rt-thread/src/timer.c **** 	case RT_TIMER_CTRL_GET_TIME:
 347:../src/os/rt-thread/src/timer.c **** 		*(rt_tick_t *)arg = timer->init_tick;
 1004              		.loc 2 347 0
 1005 04b8 FB68     		ldr	r3, [r7, #12]
 1006 04ba 1A6A     		ldr	r2, [r3, #32]
 1007 04bc 7B68     		ldr	r3, [r7, #4]
 1008 04be 1A60     		str	r2, [r3, #0]
 348:../src/os/rt-thread/src/timer.c **** 		break;
 1009              		.loc 2 348 0
 1010 04c0 14E0     		b	.L59
 1011              	.L60:
 349:../src/os/rt-thread/src/timer.c **** 
 350:../src/os/rt-thread/src/timer.c **** 	case RT_TIMER_CTRL_SET_TIME:
 351:../src/os/rt-thread/src/timer.c **** 		timer->init_tick = *(rt_tick_t *)arg;
 1012              		.loc 2 351 0
 1013 04c2 7B68     		ldr	r3, [r7, #4]
 1014 04c4 1A68     		ldr	r2, [r3, #0]
 1015 04c6 FB68     		ldr	r3, [r7, #12]
 1016 04c8 1A62     		str	r2, [r3, #32]
 352:../src/os/rt-thread/src/timer.c **** 		break;
 1017              		.loc 2 352 0
 1018 04ca 0FE0     		b	.L59
 1019              	.L62:
 353:../src/os/rt-thread/src/timer.c **** 
 354:../src/os/rt-thread/src/timer.c **** 	case RT_TIMER_CTRL_SET_ONESHOT:
 355:../src/os/rt-thread/src/timer.c **** 		timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
 1020              		.loc 2 355 0
 1021 04cc FB68     		ldr	r3, [r7, #12]
 1022 04ce DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1023 04d0 23F00203 		bic	r3, r3, #2
 1024 04d4 DAB2     		uxtb	r2, r3
 1025 04d6 FB68     		ldr	r3, [r7, #12]
 1026 04d8 DA71     		strb	r2, [r3, #7]
 356:../src/os/rt-thread/src/timer.c **** 		break;
 1027              		.loc 2 356 0
 1028 04da 07E0     		b	.L59
 1029              	.L63:
 357:../src/os/rt-thread/src/timer.c **** 
 358:../src/os/rt-thread/src/timer.c **** 	case RT_TIMER_CTRL_SET_PERIODIC:
 359:../src/os/rt-thread/src/timer.c **** 		timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
 1030              		.loc 2 359 0
 1031 04dc FB68     		ldr	r3, [r7, #12]
 1032 04de DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1033 04e0 43F00203 		orr	r3, r3, #2
 1034 04e4 DAB2     		uxtb	r2, r3
 1035 04e6 FB68     		ldr	r3, [r7, #12]
 1036 04e8 DA71     		strb	r2, [r3, #7]
 360:../src/os/rt-thread/src/timer.c **** 		break;
 1037              		.loc 2 360 0
 1038 04ea 00BF     		nop
 1039              	.L59:
 361:../src/os/rt-thread/src/timer.c **** 	}
 362:../src/os/rt-thread/src/timer.c **** 
 363:../src/os/rt-thread/src/timer.c **** 	return RT_EOK;
 1040              		.loc 2 363 0
 1041 04ec 4FF00003 		mov	r3, #0
 364:../src/os/rt-thread/src/timer.c **** }
 1042              		.loc 2 364 0
 1043 04f0 1846     		mov	r0, r3
 1044 04f2 07F11807 		add	r7, r7, #24
 1045 04f6 BD46     		mov	sp, r7
 1046 04f8 80BD     		pop	{r7, pc}
 1047              	.L67:
 1048 04fa 00BF     		.align	2
 1049              	.L66:
 1050 04fc 00000000 		.word	.LC0
 1051 0500 20000000 		.word	.LC1
 1052 0504 58000000 		.word	__FUNCTION__.4935
 1053              		.cfi_endproc
 1054              	.LFE14:
 1056              		.align	2
 1057              		.global	rt_timer_check
 1058              		.thumb
 1059              		.thumb_func
 1061              	rt_timer_check:
 1062              	.LFB15:
 365:../src/os/rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_control);
 366:../src/os/rt-thread/src/timer.c **** 
 367:../src/os/rt-thread/src/timer.c **** /**
 368:../src/os/rt-thread/src/timer.c ****  * This function will check timer list, if a timeout event happens, the
 369:../src/os/rt-thread/src/timer.c ****  * corresponding timeout function will be invoked.
 370:../src/os/rt-thread/src/timer.c ****  *
 371:../src/os/rt-thread/src/timer.c ****  * @note this function shall be invoked in operating system timer interrupt.
 372:../src/os/rt-thread/src/timer.c ****  */
 373:../src/os/rt-thread/src/timer.c **** void rt_timer_check(void)
 374:../src/os/rt-thread/src/timer.c **** {
 1063              		.loc 2 374 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067 0508 90B5     		push	{r4, r7, lr}
 1068              	.LCFI42:
 1069              		.cfi_def_cfa_offset 12
 1070              		.cfi_offset 4, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 050a 83B0     		sub	sp, sp, #12
 1074              	.LCFI43:
 1075              		.cfi_def_cfa_offset 24
 1076 050c 00AF     		add	r7, sp, #0
 1077              	.LCFI44:
 1078              		.cfi_def_cfa_register 7
 375:../src/os/rt-thread/src/timer.c **** 	struct rt_timer *t;
 376:../src/os/rt-thread/src/timer.c **** 	rt_tick_t current_tick;
 377:../src/os/rt-thread/src/timer.c **** 	register rt_base_t level;
 378:../src/os/rt-thread/src/timer.c **** 
 379:../src/os/rt-thread/src/timer.c **** 	RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));
 380:../src/os/rt-thread/src/timer.c **** 
 381:../src/os/rt-thread/src/timer.c **** 	current_tick = rt_tick_get();
 1079              		.loc 2 381 0
 1080 050e FFF7FEFF 		bl	rt_tick_get
 1081 0512 7860     		str	r0, [r7, #4]
 382:../src/os/rt-thread/src/timer.c **** 
 383:../src/os/rt-thread/src/timer.c **** 	/* disable interrupt */
 384:../src/os/rt-thread/src/timer.c **** 	level = rt_hw_interrupt_disable();
 1082              		.loc 2 384 0
 1083 0514 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1084 0518 0446     		mov	r4, r0
 385:../src/os/rt-thread/src/timer.c **** 
 386:../src/os/rt-thread/src/timer.c **** 	while (!rt_list_isempty(&rt_timer_list))
 1085              		.loc 2 386 0
 1086 051a 40E0     		b	.L69
 1087              	.L75:
 387:../src/os/rt-thread/src/timer.c **** 	{
 388:../src/os/rt-thread/src/timer.c **** 		t = rt_list_entry(rt_timer_list.next, struct rt_timer, list);
 1088              		.loc 2 388 0
 1089 051c 274B     		ldr	r3, .L77
 1090 051e 1B68     		ldr	r3, [r3, #0]
 1091 0520 A3F11003 		sub	r3, r3, #16
 1092 0524 3B60     		str	r3, [r7, #0]
 389:../src/os/rt-thread/src/timer.c **** 
 390:../src/os/rt-thread/src/timer.c **** 		/*
 391:../src/os/rt-thread/src/timer.c **** 		 * It supposes that the new tick shall less than the half duration of
 392:../src/os/rt-thread/src/timer.c **** 		 * tick max.
 393:../src/os/rt-thread/src/timer.c **** 		 */
 394:../src/os/rt-thread/src/timer.c **** 		if ((current_tick - t->timeout_tick) < RT_TICK_MAX/2)
 1093              		.loc 2 394 0
 1094 0526 3B68     		ldr	r3, [r7, #0]
 1095 0528 5B6A     		ldr	r3, [r3, #36]
 1096 052a 7A68     		ldr	r2, [r7, #4]
 1097 052c D21A     		subs	r2, r2, r3
 1098 052e 244B     		ldr	r3, .L77+4
 1099 0530 9A42     		cmp	r2, r3
 1100 0532 3BD8     		bhi	.L76
 395:../src/os/rt-thread/src/timer.c **** 		{
 396:../src/os/rt-thread/src/timer.c **** 			RT_OBJECT_HOOK_CALL(rt_timer_timeout_hook, (t));
 1101              		.loc 2 396 0
 1102 0534 234B     		ldr	r3, .L77+8
 1103 0536 1B68     		ldr	r3, [r3, #0]
 1104 0538 002B     		cmp	r3, #0
 1105 053a 03D0     		beq	.L71
 1106              		.loc 2 396 0 is_stmt 0 discriminator 1
 1107 053c 214B     		ldr	r3, .L77+8
 1108 053e 1B68     		ldr	r3, [r3, #0]
 1109 0540 3868     		ldr	r0, [r7, #0]
 1110 0542 9847     		blx	r3
 1111              	.L71:
 397:../src/os/rt-thread/src/timer.c **** 
 398:../src/os/rt-thread/src/timer.c **** 			/* remove timer from timer list firstly */
 399:../src/os/rt-thread/src/timer.c **** 			rt_list_remove(&(t->list));
 1112              		.loc 2 399 0 is_stmt 1
 1113 0544 3B68     		ldr	r3, [r7, #0]
 1114 0546 03F11003 		add	r3, r3, #16
 1115 054a 1846     		mov	r0, r3
 1116 054c FFF780FD 		bl	rt_list_remove
 400:../src/os/rt-thread/src/timer.c **** 
 401:../src/os/rt-thread/src/timer.c **** 			/* call timeout function */
 402:../src/os/rt-thread/src/timer.c **** 			t->timeout_func(t->parameter);
 1117              		.loc 2 402 0
 1118 0550 3B68     		ldr	r3, [r7, #0]
 1119 0552 9B69     		ldr	r3, [r3, #24]
 1120 0554 3A68     		ldr	r2, [r7, #0]
 1121 0556 D269     		ldr	r2, [r2, #28]
 1122 0558 1046     		mov	r0, r2
 1123 055a 9847     		blx	r3
 403:../src/os/rt-thread/src/timer.c **** 
 404:../src/os/rt-thread/src/timer.c **** 			/* re-get tick */
 405:../src/os/rt-thread/src/timer.c **** 			current_tick = rt_tick_get();
 1124              		.loc 2 405 0
 1125 055c FFF7FEFF 		bl	rt_tick_get
 1126 0560 7860     		str	r0, [r7, #4]
 406:../src/os/rt-thread/src/timer.c **** 
 407:../src/os/rt-thread/src/timer.c **** 			RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
 408:../src/os/rt-thread/src/timer.c **** 
 409:../src/os/rt-thread/src/timer.c **** 			if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 1127              		.loc 2 409 0
 1128 0562 3B68     		ldr	r3, [r7, #0]
 1129 0564 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1130 0566 03F00203 		and	r3, r3, #2
 1131 056a 002B     		cmp	r3, #0
 1132 056c 10D0     		beq	.L72
 410:../src/os/rt-thread/src/timer.c **** 					(t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 1133              		.loc 2 410 0 discriminator 1
 1134 056e 3B68     		ldr	r3, [r7, #0]
 1135 0570 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1136 0572 03F00103 		and	r3, r3, #1
 409:../src/os/rt-thread/src/timer.c **** 			if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 1137              		.loc 2 409 0 discriminator 1
 1138 0576 002B     		cmp	r3, #0
 1139 0578 0AD0     		beq	.L72
 411:../src/os/rt-thread/src/timer.c **** 			{
 412:../src/os/rt-thread/src/timer.c **** 				/* start it */
 413:../src/os/rt-thread/src/timer.c **** 				t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 1140              		.loc 2 413 0
 1141 057a 3B68     		ldr	r3, [r7, #0]
 1142 057c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1143 057e 23F00103 		bic	r3, r3, #1
 1144 0582 DAB2     		uxtb	r2, r3
 1145 0584 3B68     		ldr	r3, [r7, #0]
 1146 0586 DA71     		strb	r2, [r3, #7]
 414:../src/os/rt-thread/src/timer.c **** 				rt_timer_start(t);
 1147              		.loc 2 414 0
 1148 0588 3868     		ldr	r0, [r7, #0]
 1149 058a FFF7FEFF 		bl	rt_timer_start
 1150 058e 06E0     		b	.L69
 1151              	.L72:
 415:../src/os/rt-thread/src/timer.c **** 			}
 416:../src/os/rt-thread/src/timer.c **** 			else
 417:../src/os/rt-thread/src/timer.c **** 			{
 418:../src/os/rt-thread/src/timer.c **** 				/* stop timer */
 419:../src/os/rt-thread/src/timer.c **** 				t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 1152              		.loc 2 419 0
 1153 0590 3B68     		ldr	r3, [r7, #0]
 1154 0592 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1155 0594 23F00103 		bic	r3, r3, #1
 1156 0598 DAB2     		uxtb	r2, r3
 1157 059a 3B68     		ldr	r3, [r7, #0]
 1158 059c DA71     		strb	r2, [r3, #7]
 1159              	.L69:
 386:../src/os/rt-thread/src/timer.c **** 	while (!rt_list_isempty(&rt_timer_list))
 1160              		.loc 2 386 0 discriminator 1
 1161 059e 0748     		ldr	r0, .L77
 1162 05a0 FFF770FD 		bl	rt_list_isempty
 1163 05a4 0346     		mov	r3, r0
 1164 05a6 002B     		cmp	r3, #0
 1165 05a8 B8D0     		beq	.L75
 1166 05aa 00E0     		b	.L74
 1167              	.L76:
 420:../src/os/rt-thread/src/timer.c **** 			}
 421:../src/os/rt-thread/src/timer.c **** 		}
 422:../src/os/rt-thread/src/timer.c **** 		else
 423:../src/os/rt-thread/src/timer.c **** 			break;
 1168              		.loc 2 423 0
 1169 05ac 00BF     		nop
 1170              	.L74:
 424:../src/os/rt-thread/src/timer.c **** 	}
 425:../src/os/rt-thread/src/timer.c **** 
 426:../src/os/rt-thread/src/timer.c **** 	/* enable interrupt */
 427:../src/os/rt-thread/src/timer.c **** 	rt_hw_interrupt_enable(level);
 1171              		.loc 2 427 0
 1172 05ae 2046     		mov	r0, r4
 1173 05b0 FFF7FEFF 		bl	rt_hw_interrupt_enable
 428:../src/os/rt-thread/src/timer.c **** 
 429:../src/os/rt-thread/src/timer.c **** 	RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
 430:../src/os/rt-thread/src/timer.c **** }
 1174              		.loc 2 430 0
 1175 05b4 07F10C07 		add	r7, r7, #12
 1176 05b8 BD46     		mov	sp, r7
 1177 05ba 90BD     		pop	{r4, r7, pc}
 1178              	.L78:
 1179              		.align	2
 1180              	.L77:
 1181 05bc 00000000 		.word	rt_timer_list
 1182 05c0 FEFFFF7F 		.word	2147483646
 1183 05c4 00000000 		.word	rt_timer_timeout_hook
 1184              		.cfi_endproc
 1185              	.LFE15:
 1187              		.align	2
 1188              		.global	rt_timer_next_timeout_tick
 1189              		.thumb
 1190              		.thumb_func
 1192              	rt_timer_next_timeout_tick:
 1193              	.LFB16:
 431:../src/os/rt-thread/src/timer.c **** 
 432:../src/os/rt-thread/src/timer.c **** /**
 433:../src/os/rt-thread/src/timer.c ****  * This function will return the next timeout tick in the system.
 434:../src/os/rt-thread/src/timer.c ****  *
 435:../src/os/rt-thread/src/timer.c ****  * @return the next timeout tick in the system
 436:../src/os/rt-thread/src/timer.c ****  */
 437:../src/os/rt-thread/src/timer.c **** rt_tick_t rt_timer_next_timeout_tick(void)
 438:../src/os/rt-thread/src/timer.c **** {
 1194              		.loc 2 438 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 05c8 80B5     		push	{r7, lr}
 1199              	.LCFI45:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 7, -8
 1202              		.cfi_offset 14, -4
 1203 05ca 00AF     		add	r7, sp, #0
 1204              	.LCFI46:
 1205              		.cfi_def_cfa_register 7
 439:../src/os/rt-thread/src/timer.c **** 	return rt_timer_list_next_timeout(&rt_timer_list);
 1206              		.loc 2 439 0
 1207 05cc 0248     		ldr	r0, .L81
 1208 05ce FFF7A1FD 		bl	rt_timer_list_next_timeout
 1209 05d2 0346     		mov	r3, r0
 440:../src/os/rt-thread/src/timer.c **** }
 1210              		.loc 2 440 0
 1211 05d4 1846     		mov	r0, r3
 1212 05d6 80BD     		pop	{r7, pc}
 1213              	.L82:
 1214              		.align	2
 1215              	.L81:
 1216 05d8 00000000 		.word	rt_timer_list
 1217              		.cfi_endproc
 1218              	.LFE16:
 1220              		.align	2
 1221              		.global	rt_system_timer_init
 1222              		.thumb
 1223              		.thumb_func
 1225              	rt_system_timer_init:
 1226              	.LFB17:
 441:../src/os/rt-thread/src/timer.c **** 
 442:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 443:../src/os/rt-thread/src/timer.c **** /**
 444:../src/os/rt-thread/src/timer.c ****  * This function will check timer list, if a timeout event happens, the
 445:../src/os/rt-thread/src/timer.c ****  * corresponding timeout function will be invoked.
 446:../src/os/rt-thread/src/timer.c ****  */
 447:../src/os/rt-thread/src/timer.c **** void rt_soft_timer_check(void)
 448:../src/os/rt-thread/src/timer.c **** {
 449:../src/os/rt-thread/src/timer.c **** 	rt_tick_t current_tick;
 450:../src/os/rt-thread/src/timer.c **** 	rt_list_t *n;
 451:../src/os/rt-thread/src/timer.c **** 	struct rt_timer *t;
 452:../src/os/rt-thread/src/timer.c **** 
 453:../src/os/rt-thread/src/timer.c **** 	RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));
 454:../src/os/rt-thread/src/timer.c **** 
 455:../src/os/rt-thread/src/timer.c **** 	current_tick = rt_tick_get();
 456:../src/os/rt-thread/src/timer.c **** 
 457:../src/os/rt-thread/src/timer.c **** 	for (n = rt_soft_timer_list.next; n != &(rt_soft_timer_list);)
 458:../src/os/rt-thread/src/timer.c **** 	{
 459:../src/os/rt-thread/src/timer.c **** 		t = rt_list_entry(n, struct rt_timer, list);
 460:../src/os/rt-thread/src/timer.c **** 
 461:../src/os/rt-thread/src/timer.c **** 		/*
 462:../src/os/rt-thread/src/timer.c **** 		 * It supposes that the new tick shall less than the half duration of
 463:../src/os/rt-thread/src/timer.c **** 		 * tick max.
 464:../src/os/rt-thread/src/timer.c **** 		 */
 465:../src/os/rt-thread/src/timer.c **** 		if ((current_tick - t->timeout_tick) < RT_TICK_MAX/2)
 466:../src/os/rt-thread/src/timer.c **** 		{
 467:../src/os/rt-thread/src/timer.c **** 			RT_OBJECT_HOOK_CALL(rt_timer_timeout_hook, (t));
 468:../src/os/rt-thread/src/timer.c **** 
 469:../src/os/rt-thread/src/timer.c **** 			/* move node to the next */
 470:../src/os/rt-thread/src/timer.c **** 			n = n->next;
 471:../src/os/rt-thread/src/timer.c **** 
 472:../src/os/rt-thread/src/timer.c **** 			/* remove timer from timer list firstly */
 473:../src/os/rt-thread/src/timer.c **** 			rt_list_remove(&(t->list));
 474:../src/os/rt-thread/src/timer.c **** 
 475:../src/os/rt-thread/src/timer.c **** 			/* call timeout function */
 476:../src/os/rt-thread/src/timer.c **** 			t->timeout_func(t->parameter);
 477:../src/os/rt-thread/src/timer.c **** 
 478:../src/os/rt-thread/src/timer.c **** 			/* re-get tick */
 479:../src/os/rt-thread/src/timer.c **** 			current_tick = rt_tick_get();
 480:../src/os/rt-thread/src/timer.c **** 
 481:../src/os/rt-thread/src/timer.c **** 			RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
 482:../src/os/rt-thread/src/timer.c **** 
 483:../src/os/rt-thread/src/timer.c **** 			if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 484:../src/os/rt-thread/src/timer.c **** 					(t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 485:../src/os/rt-thread/src/timer.c **** 			{
 486:../src/os/rt-thread/src/timer.c **** 				/* start it */
 487:../src/os/rt-thread/src/timer.c **** 				t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 488:../src/os/rt-thread/src/timer.c **** 				rt_timer_start(t);
 489:../src/os/rt-thread/src/timer.c **** 			}
 490:../src/os/rt-thread/src/timer.c **** 			else
 491:../src/os/rt-thread/src/timer.c **** 			{
 492:../src/os/rt-thread/src/timer.c **** 				/* stop timer */
 493:../src/os/rt-thread/src/timer.c **** 				t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 494:../src/os/rt-thread/src/timer.c **** 			}
 495:../src/os/rt-thread/src/timer.c **** 		}
 496:../src/os/rt-thread/src/timer.c **** 		else break; /* not check anymore */
 497:../src/os/rt-thread/src/timer.c **** 	}
 498:../src/os/rt-thread/src/timer.c **** 
 499:../src/os/rt-thread/src/timer.c **** 	RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
 500:../src/os/rt-thread/src/timer.c **** }
 501:../src/os/rt-thread/src/timer.c **** 
 502:../src/os/rt-thread/src/timer.c **** /* system timer thread entry */
 503:../src/os/rt-thread/src/timer.c **** static void rt_thread_timer_entry(void *parameter)
 504:../src/os/rt-thread/src/timer.c **** {
 505:../src/os/rt-thread/src/timer.c **** 	rt_tick_t next_timeout;
 506:../src/os/rt-thread/src/timer.c **** 	
 507:../src/os/rt-thread/src/timer.c **** 	while (1)
 508:../src/os/rt-thread/src/timer.c **** 	{
 509:../src/os/rt-thread/src/timer.c **** 		next_timeout = rt_timer_list_next_timeout(&rt_soft_timer_list);
 510:../src/os/rt-thread/src/timer.c **** 		if (next_timeout == RT_TICK_MAX)
 511:../src/os/rt-thread/src/timer.c **** 		{
 512:../src/os/rt-thread/src/timer.c **** 			rt_thread_suspend(rt_thread_self());
 513:../src/os/rt-thread/src/timer.c **** 			rt_schedule();
 514:../src/os/rt-thread/src/timer.c **** 		}
 515:../src/os/rt-thread/src/timer.c **** 		else
 516:../src/os/rt-thread/src/timer.c **** 		{
 517:../src/os/rt-thread/src/timer.c **** 			rt_thread_delay(next_timeout);
 518:../src/os/rt-thread/src/timer.c **** 		}
 519:../src/os/rt-thread/src/timer.c **** 
 520:../src/os/rt-thread/src/timer.c **** 		/* lock scheduler */
 521:../src/os/rt-thread/src/timer.c **** 		rt_enter_critical();
 522:../src/os/rt-thread/src/timer.c **** 		/* check software timer */
 523:../src/os/rt-thread/src/timer.c **** 		rt_soft_timer_check();
 524:../src/os/rt-thread/src/timer.c **** 		/* unlock scheduler */
 525:../src/os/rt-thread/src/timer.c **** 		rt_exit_critical();
 526:../src/os/rt-thread/src/timer.c **** 	}
 527:../src/os/rt-thread/src/timer.c **** }
 528:../src/os/rt-thread/src/timer.c **** #endif
 529:../src/os/rt-thread/src/timer.c **** 
 530:../src/os/rt-thread/src/timer.c **** /**
 531:../src/os/rt-thread/src/timer.c ****  * @ingroup SystemInit
 532:../src/os/rt-thread/src/timer.c ****  *
 533:../src/os/rt-thread/src/timer.c ****  * This function will initialize system timer
 534:../src/os/rt-thread/src/timer.c ****  *
 535:../src/os/rt-thread/src/timer.c ****  * @deprecated since 1.1.0, this function does not need to be invoked
 536:../src/os/rt-thread/src/timer.c ****  * in the system initialization.
 537:../src/os/rt-thread/src/timer.c ****  */
 538:../src/os/rt-thread/src/timer.c **** void rt_system_timer_init(void)
 539:../src/os/rt-thread/src/timer.c **** {
 1227              		.loc 2 539 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 1, uses_anonymous_args = 0
 1231              		@ link register save eliminated.
 1232 05dc 80B4     		push	{r7}
 1233              	.LCFI47:
 1234              		.cfi_def_cfa_offset 4
 1235              		.cfi_offset 7, -4
 1236 05de 00AF     		add	r7, sp, #0
 1237              	.LCFI48:
 1238              		.cfi_def_cfa_register 7
 540:../src/os/rt-thread/src/timer.c **** }
 1239              		.loc 2 540 0
 1240 05e0 BD46     		mov	sp, r7
 1241 05e2 80BC     		pop	{r7}
 1242 05e4 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE17:
 1246 05e6 00BF     		.align	2
 1247              		.global	rt_system_timer_thread_init
 1248              		.thumb
 1249              		.thumb_func
 1251              	rt_system_timer_thread_init:
 1252              	.LFB18:
 541:../src/os/rt-thread/src/timer.c **** 
 542:../src/os/rt-thread/src/timer.c **** /**
 543:../src/os/rt-thread/src/timer.c ****  * @ingroup SystemInit
 544:../src/os/rt-thread/src/timer.c ****  *
 545:../src/os/rt-thread/src/timer.c ****  * This function will initialize system timer thread
 546:../src/os/rt-thread/src/timer.c ****  */
 547:../src/os/rt-thread/src/timer.c **** void rt_system_timer_thread_init(void)
 548:../src/os/rt-thread/src/timer.c **** {
 1253              		.loc 2 548 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 1, uses_anonymous_args = 0
 1257              		@ link register save eliminated.
 1258 05e8 80B4     		push	{r7}
 1259              	.LCFI49:
 1260              		.cfi_def_cfa_offset 4
 1261              		.cfi_offset 7, -4
 1262 05ea 00AF     		add	r7, sp, #0
 1263              	.LCFI50:
 1264              		.cfi_def_cfa_register 7
 549:../src/os/rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 550:../src/os/rt-thread/src/timer.c **** 	rt_list_init(&rt_soft_timer_list);
 551:../src/os/rt-thread/src/timer.c **** 
 552:../src/os/rt-thread/src/timer.c **** 	/* start software timer thread */
 553:../src/os/rt-thread/src/timer.c **** 	rt_thread_init(&timer_thread,
 554:../src/os/rt-thread/src/timer.c **** 				   "timer",
 555:../src/os/rt-thread/src/timer.c **** 				   rt_thread_timer_entry, RT_NULL,
 556:../src/os/rt-thread/src/timer.c **** 				   &timer_thread_stack[0], sizeof(timer_thread_stack),
 557:../src/os/rt-thread/src/timer.c **** 				   RT_TIMER_THREAD_PRIO, 10);
 558:../src/os/rt-thread/src/timer.c **** 
 559:../src/os/rt-thread/src/timer.c **** 	/* startup */
 560:../src/os/rt-thread/src/timer.c **** 	rt_thread_startup(&timer_thread);
 561:../src/os/rt-thread/src/timer.c **** #endif
 562:../src/os/rt-thread/src/timer.c **** }
 1265              		.loc 2 562 0
 1266 05ec BD46     		mov	sp, r7
 1267 05ee 80BC     		pop	{r7}
 1268 05f0 7047     		bx	lr
 1269              		.cfi_endproc
 1270              	.LFE18:
 1272              		.section	.rodata
 1273 0055 000000   		.align	2
 1276              	__FUNCTION__.4935:
 1277 0058 72745F74 		.ascii	"rt_timer_control\000"
 1277      696D6572 
 1277      5F636F6E 
 1277      74726F6C 
 1277      00
 1278 0069 000000   		.align	2
 1281              	__FUNCTION__.4925:
 1282 006c 72745F74 		.ascii	"rt_timer_stop\000"
 1282      696D6572 
 1282      5F73746F 
 1282      7000
 1283 007a 0000     		.align	2
 1286              	__FUNCTION__.4909:
 1287 007c 72745F74 		.ascii	"rt_timer_start\000"
 1287      696D6572 
 1287      5F737461 
 1287      727400
 1288 008b 00       		.align	2
 1291              	__FUNCTION__.4897:
 1292 008c 72745F74 		.ascii	"rt_timer_delete\000"
 1292      696D6572 
 1292      5F64656C 
 1292      65746500 
 1293              		.align	2
 1296              	__FUNCTION__.4879:
 1297 009c 72745F74 		.ascii	"rt_timer_detach\000"
 1297      696D6572 
 1297      5F646574 
 1297      61636800 
 1298              		.align	2
 1301              	__FUNCTION__.4870:
 1302 00ac 72745F74 		.ascii	"rt_timer_init\000"
 1302      696D6572 
 1302      5F696E69 
 1302      7400
 1303 00ba 0000     		.text
 1304              	.Letext0:
 1305              		.file 3 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:18     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:22     .text:00000000 rt_list_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:61     .text:00000020 rt_list_insert_before
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:110    .text:00000050 rt_list_remove
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:160    .text:00000084 rt_list_isempty
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:197    .data:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:200    .data:00000000 rt_timer_list
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:204    .bss:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:205    .bss:00000000 rt_timer_timeout_hook
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:213    .text:000000a8 rt_timer_timeout_sethook
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:244    .text:000000c0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:248    .text:000000c4 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:252    .text:000000c4 _rt_timer_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:316    .text:00000114 rt_timer_list_next_timeout
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:362    .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:374    .text:00000148 rt_timer_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:436    .text:000001a0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1301   .rodata:000000ac __FUNCTION__.4870
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:442    .text:000001ac $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:447    .text:000001ac rt_timer_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:511    .text:00000204 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1296   .rodata:0000009c __FUNCTION__.4879
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:517    .text:00000210 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:522    .text:00000210 rt_timer_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:580    .text:00000254 rt_timer_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:644    .text:000002ac $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1291   .rodata:0000008c __FUNCTION__.4897
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:655    .text:000002b8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:660    .text:000002b8 rt_timer_start
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:831    .text:000003bc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1286   .rodata:0000007c __FUNCTION__.4909
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:841    .text:000003d8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:846    .text:000003d8 rt_timer_stop
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:937    .text:0000045c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1281   .rodata:0000006c __FUNCTION__.4925
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:944    .text:0000046c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:949    .text:0000046c rt_timer_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:999    .text:000004a8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1005   .text:000004b8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1050   .text:000004fc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1276   .rodata:00000058 __FUNCTION__.4935
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1056   .text:00000508 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1061   .text:00000508 rt_timer_check
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1181   .text:000005bc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1187   .text:000005c8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1192   .text:000005c8 rt_timer_next_timeout_tick
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1216   .text:000005d8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1220   .text:000005dc $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1225   .text:000005dc rt_system_timer_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccdu7YGw.s:1251   .text:000005e8 rt_system_timer_thread_init
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.5a4bd5c079694966fb1e9ee3a4751929
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_kprintf
rt_object_init
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_object_detach
rt_object_allocate
rt_object_delete
rt_tick_get
rt_object_take_hook
rt_object_put_hook
