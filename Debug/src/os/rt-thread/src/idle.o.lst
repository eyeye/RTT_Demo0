   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"idle.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	rt_list_remove:
  23              	.LFB3:
  24              		.file 1 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtservice.h"
   1:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*
   2:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * File      : rtservice.h
   3:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * This file is part of RT-Thread RTOS
   4:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
   6:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * The license and distribution terms for this file may be
   7:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * found in the file LICENSE in this distribution or at
   8:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * http://www.rt-thread.org/license/LICENSE
   9:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  10:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Change Logs:
  11:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Date           Author       Notes
  12:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-03-16     Bernard      the first version
  13:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  14:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  15:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  16:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  17:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  18:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifndef __RT_SERVICE_H__
  19:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define __RT_SERVICE_H__
  20:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  21:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifdef __cplusplus
  22:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** extern "C" {
  23:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #endif
  24:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  25:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  26:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @addtogroup KernelService
  27:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  28:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  29:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*@{*/
  30:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  31:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  32:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list object
  33:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  34:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  35:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  36:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  37:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list
  38:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  39:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to be initialized
  40:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  41:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  42:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  43:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = l->prev = l;
  44:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  45:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  46:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  47:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node after a list
  48:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  49:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  50:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  51:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  52:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  53:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  54:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next->prev = n;
  55:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l->next;
  56:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  57:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = n;
  58:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l;
  59:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  60:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  61:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  62:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node before a list
  63:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  64:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  65:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  66:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  67:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  68:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  69:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev->next = n;
  70:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l->prev;
  71:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  72:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev = n;
  73:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l;
  74:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  75:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  76:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  77:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief remove node from list.
  78:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n the node to remove from the list.
  79:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  80:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  81:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  25              		.loc 1 81 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  82:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next->prev = n->prev;
  41              		.loc 1 82 0
  42 0008 7B68     		ldr	r3, [r7, #4]
  43 000a 1B68     		ldr	r3, [r3, #0]
  44 000c 7A68     		ldr	r2, [r7, #4]
  45 000e 5268     		ldr	r2, [r2, #4]
  46 0010 5A60     		str	r2, [r3, #4]
  83:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev->next = n->next;
  47              		.loc 1 83 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 5B68     		ldr	r3, [r3, #4]
  50 0016 7A68     		ldr	r2, [r7, #4]
  51 0018 1268     		ldr	r2, [r2, #0]
  52 001a 1A60     		str	r2, [r3, #0]
  84:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  85:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = n->prev = n;
  53              		.loc 1 85 0
  54 001c 7B68     		ldr	r3, [r7, #4]
  55 001e 7A68     		ldr	r2, [r7, #4]
  56 0020 5A60     		str	r2, [r3, #4]
  57 0022 7B68     		ldr	r3, [r7, #4]
  58 0024 5A68     		ldr	r2, [r3, #4]
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 1A60     		str	r2, [r3, #0]
  86:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  61              		.loc 1 86 0
  62 002a 07F10C07 		add	r7, r7, #12
  63 002e BD46     		mov	sp, r7
  64 0030 80BC     		pop	{r7}
  65 0032 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE3:
  69              		.align	2
  70              		.thumb
  71              		.thumb_func
  73              	rt_list_isempty:
  74              	.LFB4:
  87:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  88:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  89:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief tests whether a list is empty
  90:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l the list to test.
  91:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  92:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  93:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  75              		.loc 1 93 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 0034 80B4     		push	{r7}
  81              	.LCFI3:
  82              		.cfi_def_cfa_offset 4
  83              		.cfi_offset 7, -4
  84 0036 83B0     		sub	sp, sp, #12
  85              	.LCFI4:
  86              		.cfi_def_cfa_offset 16
  87 0038 00AF     		add	r7, sp, #0
  88              	.LCFI5:
  89              		.cfi_def_cfa_register 7
  90 003a 7860     		str	r0, [r7, #4]
  94:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     return l->next == l;
  91              		.loc 1 94 0
  92 003c 7B68     		ldr	r3, [r7, #4]
  93 003e 1A68     		ldr	r2, [r3, #0]
  94 0040 7B68     		ldr	r3, [r7, #4]
  95 0042 9A42     		cmp	r2, r3
  96 0044 14BF     		ite	ne
  97 0046 0023     		movne	r3, #0
  98 0048 0123     		moveq	r3, #1
  99 004a DBB2     		uxtb	r3, r3
  95:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
 100              		.loc 1 95 0
 101 004c 1846     		mov	r0, r3
 102 004e 07F10C07 		add	r7, r7, #12
 103 0052 BD46     		mov	sp, r7
 104 0054 80BC     		pop	{r7}
 105 0056 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE4:
 109              		.bss
 110              		.align	2
 111              	idle:
 112 0000 00000000 		.space	120
 112      00000000 
 112      00000000 
 112      00000000 
 112      00000000 
 113              		.align	2
 114              	rt_thread_stack:
 115 0078 00000000 		.space	256
 115      00000000 
 115      00000000 
 115      00000000 
 115      00000000 
 116              		.align	2
 117              	rt_thread_idle_hook:
 118 0178 00000000 		.space	4
 119              		.text
 120              		.align	2
 121              		.global	rt_thread_idle_sethook
 122              		.thumb
 123              		.thumb_func
 125              	rt_thread_idle_sethook:
 126              	.LFB5:
 127              		.file 2 "../src/os/rt-thread/src/idle.c"
   1:../src/os/rt-thread/src/idle.c **** /*
   2:../src/os/rt-thread/src/idle.c ****  * File      : idle.c
   3:../src/os/rt-thread/src/idle.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/idle.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/idle.c ****  *
   6:../src/os/rt-thread/src/idle.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/idle.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/idle.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/idle.c ****  *
  10:../src/os/rt-thread/src/idle.c ****  * Change Logs:
  11:../src/os/rt-thread/src/idle.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/idle.c ****  * 2006-03-23     Bernard      the first version
  13:../src/os/rt-thread/src/idle.c ****  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
  14:../src/os/rt-thread/src/idle.c ****  */
  15:../src/os/rt-thread/src/idle.c **** 
  16:../src/os/rt-thread/src/idle.c **** #include <rthw.h>
  17:../src/os/rt-thread/src/idle.c **** #include <rtthread.h>
  18:../src/os/rt-thread/src/idle.c **** 
  19:../src/os/rt-thread/src/idle.c **** #ifndef IDLE_THREAD_STACK_SIZE
  20:../src/os/rt-thread/src/idle.c **** #if defined (RT_USING_HOOK) || defined(RT_USING_HEAP)
  21:../src/os/rt-thread/src/idle.c **** #define IDLE_THREAD_STACK_SIZE	256
  22:../src/os/rt-thread/src/idle.c **** #else
  23:../src/os/rt-thread/src/idle.c **** #define IDLE_THREAD_STACK_SIZE	128
  24:../src/os/rt-thread/src/idle.c **** #endif
  25:../src/os/rt-thread/src/idle.c **** #endif
  26:../src/os/rt-thread/src/idle.c **** 
  27:../src/os/rt-thread/src/idle.c **** static struct rt_thread idle;
  28:../src/os/rt-thread/src/idle.c **** ALIGN(RT_ALIGN_SIZE)
  29:../src/os/rt-thread/src/idle.c **** static rt_uint8_t rt_thread_stack[IDLE_THREAD_STACK_SIZE];
  30:../src/os/rt-thread/src/idle.c **** 
  31:../src/os/rt-thread/src/idle.c **** extern rt_list_t rt_thread_defunct;
  32:../src/os/rt-thread/src/idle.c **** 
  33:../src/os/rt-thread/src/idle.c **** #ifdef RT_USING_HOOK
  34:../src/os/rt-thread/src/idle.c **** /**
  35:../src/os/rt-thread/src/idle.c ****  * @addtogroup Hook
  36:../src/os/rt-thread/src/idle.c ****  */
  37:../src/os/rt-thread/src/idle.c **** 
  38:../src/os/rt-thread/src/idle.c **** /*@{*/
  39:../src/os/rt-thread/src/idle.c **** 
  40:../src/os/rt-thread/src/idle.c **** static void (*rt_thread_idle_hook)();
  41:../src/os/rt-thread/src/idle.c **** 
  42:../src/os/rt-thread/src/idle.c **** /**
  43:../src/os/rt-thread/src/idle.c ****  * This function will set a hook function to idle thread loop.
  44:../src/os/rt-thread/src/idle.c ****  *
  45:../src/os/rt-thread/src/idle.c ****  * @param hook the specified hook function
  46:../src/os/rt-thread/src/idle.c ****  *
  47:../src/os/rt-thread/src/idle.c ****  * @note the hook function must be simple and never be blocked or suspend.
  48:../src/os/rt-thread/src/idle.c ****  */
  49:../src/os/rt-thread/src/idle.c **** void rt_thread_idle_sethook(void (*hook)())
  50:../src/os/rt-thread/src/idle.c **** {
 128              		.loc 2 50 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 8
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0058 80B4     		push	{r7}
 134              	.LCFI6:
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 7, -4
 137 005a 83B0     		sub	sp, sp, #12
 138              	.LCFI7:
 139              		.cfi_def_cfa_offset 16
 140 005c 00AF     		add	r7, sp, #0
 141              	.LCFI8:
 142              		.cfi_def_cfa_register 7
 143 005e 7860     		str	r0, [r7, #4]
  51:../src/os/rt-thread/src/idle.c **** 	rt_thread_idle_hook = hook;
 144              		.loc 2 51 0
 145 0060 034B     		ldr	r3, .L5
 146 0062 7A68     		ldr	r2, [r7, #4]
 147 0064 1A60     		str	r2, [r3, #0]
  52:../src/os/rt-thread/src/idle.c **** }
 148              		.loc 2 52 0
 149 0066 07F10C07 		add	r7, r7, #12
 150 006a BD46     		mov	sp, r7
 151 006c 80BC     		pop	{r7}
 152 006e 7047     		bx	lr
 153              	.L6:
 154              		.align	2
 155              	.L5:
 156 0070 78010000 		.word	rt_thread_idle_hook
 157              		.cfi_endproc
 158              	.LFE5:
 160              		.section	.rodata
 161              		.align	2
 162              	.LC0:
 163 0000 46756E63 		.ascii	"Function[%s] shall not used in ISR\012\000"
 163      74696F6E 
 163      5B25735D 
 163      20736861 
 163      6C6C206E 
 164              		.align	2
 165              	.LC1:
 166 0024 28257329 		.ascii	"(%s) assert failed at %s:%d \012\000"
 166      20617373 
 166      65727420 
 166      6661696C 
 166      65642061 
 167 0042 0000     		.align	2
 168              	.LC2:
 169 0044 3000     		.ascii	"0\000"
 170              		.text
 171              		.align	2
 172              		.global	rt_thread_idle_excute
 173              		.thumb
 174              		.thumb_func
 176              	rt_thread_idle_excute:
 177              	.LFB6:
  53:../src/os/rt-thread/src/idle.c **** 
  54:../src/os/rt-thread/src/idle.c **** /*@}*/
  55:../src/os/rt-thread/src/idle.c **** #endif
  56:../src/os/rt-thread/src/idle.c **** 
  57:../src/os/rt-thread/src/idle.c **** /**
  58:../src/os/rt-thread/src/idle.c ****  * @ingroup Thread
  59:../src/os/rt-thread/src/idle.c ****  *
  60:../src/os/rt-thread/src/idle.c ****  * This function will perform system background job when system idle.
  61:../src/os/rt-thread/src/idle.c ****  */
  62:../src/os/rt-thread/src/idle.c **** void rt_thread_idle_excute(void)
  63:../src/os/rt-thread/src/idle.c **** {
 178              		.loc 2 63 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 16
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0074 80B5     		push	{r7, lr}
 183              	.LCFI9:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 7, -8
 186              		.cfi_offset 14, -4
 187 0076 84B0     		sub	sp, sp, #16
 188              	.LCFI10:
 189              		.cfi_def_cfa_offset 24
 190 0078 00AF     		add	r7, sp, #0
 191              	.LCFI11:
 192              		.cfi_def_cfa_register 7
  64:../src/os/rt-thread/src/idle.c **** 	/* check the defunct thread list */
  65:../src/os/rt-thread/src/idle.c **** 	if (!rt_list_isempty(&rt_thread_defunct))
 193              		.loc 2 65 0
 194 007a 2E48     		ldr	r0, .L14
 195 007c FFF7DAFF 		bl	rt_list_isempty
 196 0080 0346     		mov	r3, r0
 197 0082 002B     		cmp	r3, #0
 198 0084 51D1     		bne	.L7
 199              	.LBB2:
 200              	.LBB3:
  66:../src/os/rt-thread/src/idle.c **** 	{
  67:../src/os/rt-thread/src/idle.c **** 		rt_base_t lock;
  68:../src/os/rt-thread/src/idle.c **** 		rt_thread_t thread;
  69:../src/os/rt-thread/src/idle.c **** #ifdef RT_USING_MODULE
  70:../src/os/rt-thread/src/idle.c **** 		rt_module_t module = RT_NULL;
  71:../src/os/rt-thread/src/idle.c **** #endif
  72:../src/os/rt-thread/src/idle.c **** 		RT_DEBUG_NOT_IN_INTERRUPT;
 201              		.loc 2 72 0
 202 0086 FFF7FEFF 		bl	rt_hw_interrupt_disable
 203 008a F860     		str	r0, [r7, #12]
 204 008c FFF7FEFF 		bl	rt_interrupt_get_nest
 205 0090 0346     		mov	r3, r0
 206 0092 002B     		cmp	r3, #0
 207 0094 11D0     		beq	.L9
 208              		.loc 2 72 0 is_stmt 0 discriminator 1
 209 0096 2848     		ldr	r0, .L14+4
 210 0098 2849     		ldr	r1, .L14+8
 211 009a FFF7FEFF 		bl	rt_kprintf
 212              	.LBB4:
 213 009e 4FF00003 		mov	r3, #0
 214 00a2 FB70     		strb	r3, [r7, #3]
 215 00a4 2648     		ldr	r0, .L14+12
 216 00a6 2749     		ldr	r1, .L14+16
 217 00a8 244A     		ldr	r2, .L14+8
 218 00aa 4FF04803 		mov	r3, #72
 219 00ae FFF7FEFF 		bl	rt_kprintf
 220              	.L10:
 221              		.loc 2 72 0 discriminator 4
 222 00b2 FB78     		ldrb	r3, [r7, #3]
 223 00b4 DBB2     		uxtb	r3, r3
 224 00b6 002B     		cmp	r3, #0
 225 00b8 FBD0     		beq	.L10
 226              	.L9:
 227              	.LBE4:
 228              		.loc 2 72 0 discriminator 2
 229 00ba F868     		ldr	r0, [r7, #12]
 230 00bc FFF7FEFF 		bl	rt_hw_interrupt_enable
 231              	.LBE3:
  73:../src/os/rt-thread/src/idle.c **** 
  74:../src/os/rt-thread/src/idle.c **** 		/* disable interrupt */
  75:../src/os/rt-thread/src/idle.c **** 		lock = rt_hw_interrupt_disable();
 232              		.loc 2 75 0 is_stmt 1 discriminator 2
 233 00c0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 234 00c4 B860     		str	r0, [r7, #8]
  76:../src/os/rt-thread/src/idle.c **** 
  77:../src/os/rt-thread/src/idle.c **** 		/* re-check whether list is empty */
  78:../src/os/rt-thread/src/idle.c **** 		if (!rt_list_isempty(&rt_thread_defunct))
 235              		.loc 2 78 0 discriminator 2
 236 00c6 1B48     		ldr	r0, .L14
 237 00c8 FFF7B4FF 		bl	rt_list_isempty
 238 00cc 0346     		mov	r3, r0
 239 00ce 002B     		cmp	r3, #0
 240 00d0 1CD1     		bne	.L11
  79:../src/os/rt-thread/src/idle.c **** 		{
  80:../src/os/rt-thread/src/idle.c **** 			/* get defunct thread */
  81:../src/os/rt-thread/src/idle.c **** 			thread = rt_list_entry(rt_thread_defunct.next, struct rt_thread, tlist);
 241              		.loc 2 81 0
 242 00d2 184B     		ldr	r3, .L14
 243 00d4 1B68     		ldr	r3, [r3, #0]
 244 00d6 A3F11003 		sub	r3, r3, #16
 245 00da 7B60     		str	r3, [r7, #4]
  82:../src/os/rt-thread/src/idle.c **** #ifdef RT_USING_MODULE
  83:../src/os/rt-thread/src/idle.c **** 			/* get thread's parent module */
  84:../src/os/rt-thread/src/idle.c **** 			module = (rt_module_t)thread->module_id;
  85:../src/os/rt-thread/src/idle.c **** 
  86:../src/os/rt-thread/src/idle.c **** 			/* if the thread is module's main thread */
  87:../src/os/rt-thread/src/idle.c **** 			if (module != RT_NULL && module->module_thread == thread)
  88:../src/os/rt-thread/src/idle.c **** 			{
  89:../src/os/rt-thread/src/idle.c **** 				/* detach module's main thread */
  90:../src/os/rt-thread/src/idle.c **** 				module->module_thread = RT_NULL;
  91:../src/os/rt-thread/src/idle.c **** 			}
  92:../src/os/rt-thread/src/idle.c **** #endif
  93:../src/os/rt-thread/src/idle.c **** 			/* remove defunct thread */
  94:../src/os/rt-thread/src/idle.c **** 			rt_list_remove(&(thread->tlist));
 246              		.loc 2 94 0
 247 00dc 7B68     		ldr	r3, [r7, #4]
 248 00de 03F11003 		add	r3, r3, #16
 249 00e2 1846     		mov	r0, r3
 250 00e4 FFF78CFF 		bl	rt_list_remove
  95:../src/os/rt-thread/src/idle.c **** 			/* invoke thread cleanup */
  96:../src/os/rt-thread/src/idle.c **** 			if (thread->cleanup != RT_NULL)
 251              		.loc 2 96 0
 252 00e8 7B68     		ldr	r3, [r7, #4]
 253 00ea 1B6F     		ldr	r3, [r3, #112]
 254 00ec 002B     		cmp	r3, #0
 255 00ee 03D0     		beq	.L12
  97:../src/os/rt-thread/src/idle.c **** 				thread->cleanup(thread);
 256              		.loc 2 97 0
 257 00f0 7B68     		ldr	r3, [r7, #4]
 258 00f2 1B6F     		ldr	r3, [r3, #112]
 259 00f4 7868     		ldr	r0, [r7, #4]
 260 00f6 9847     		blx	r3
 261              	.L12:
  98:../src/os/rt-thread/src/idle.c **** 
  99:../src/os/rt-thread/src/idle.c **** 			/* if it's a system object, not delete it */
 100:../src/os/rt-thread/src/idle.c **** 			if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 262              		.loc 2 100 0
 263 00f8 7868     		ldr	r0, [r7, #4]
 264 00fa FFF7FEFF 		bl	rt_object_is_systemobject
 265 00fe 0346     		mov	r3, r0
 266 0100 012B     		cmp	r3, #1
 267 0102 07D1     		bne	.L13
 101:../src/os/rt-thread/src/idle.c **** 			{
 102:../src/os/rt-thread/src/idle.c **** 				/* enable interrupt */
 103:../src/os/rt-thread/src/idle.c **** 				rt_hw_interrupt_enable(lock);
 268              		.loc 2 103 0
 269 0104 B868     		ldr	r0, [r7, #8]
 270 0106 FFF7FEFF 		bl	rt_hw_interrupt_enable
 104:../src/os/rt-thread/src/idle.c **** 				return;
 271              		.loc 2 104 0
 272 010a 0EE0     		b	.L7
 273              	.L11:
 105:../src/os/rt-thread/src/idle.c **** 			}
 106:../src/os/rt-thread/src/idle.c **** 		}
 107:../src/os/rt-thread/src/idle.c **** 		else
 108:../src/os/rt-thread/src/idle.c **** 		{
 109:../src/os/rt-thread/src/idle.c **** 			/* enable interrupt */
 110:../src/os/rt-thread/src/idle.c **** 			rt_hw_interrupt_enable(lock);
 274              		.loc 2 110 0
 275 010c B868     		ldr	r0, [r7, #8]
 276 010e FFF7FEFF 		bl	rt_hw_interrupt_enable
 111:../src/os/rt-thread/src/idle.c **** 
 112:../src/os/rt-thread/src/idle.c **** 			/* may the defunct thread list is removed by others, just return */
 113:../src/os/rt-thread/src/idle.c **** 			return;
 277              		.loc 2 113 0
 278 0112 0AE0     		b	.L7
 279              	.L13:
 114:../src/os/rt-thread/src/idle.c **** 		}
 115:../src/os/rt-thread/src/idle.c **** 
 116:../src/os/rt-thread/src/idle.c **** 		/* enable interrupt */
 117:../src/os/rt-thread/src/idle.c **** 		rt_hw_interrupt_enable(lock);
 280              		.loc 2 117 0
 281 0114 B868     		ldr	r0, [r7, #8]
 282 0116 FFF7FEFF 		bl	rt_hw_interrupt_enable
 118:../src/os/rt-thread/src/idle.c **** 
 119:../src/os/rt-thread/src/idle.c **** #ifdef RT_USING_HEAP
 120:../src/os/rt-thread/src/idle.c **** #if defined(RT_USING_MODULE) && defined(RT_USING_SLAB)
 121:../src/os/rt-thread/src/idle.c **** 		/* the thread belongs to an application module */
 122:../src/os/rt-thread/src/idle.c **** 		if (thread->flags & RT_OBJECT_FLAG_MODULE)
 123:../src/os/rt-thread/src/idle.c **** 			rt_module_free((rt_module_t)thread->module_id, thread->stack_addr);
 124:../src/os/rt-thread/src/idle.c **** 		else
 125:../src/os/rt-thread/src/idle.c **** #endif
 126:../src/os/rt-thread/src/idle.c **** 		/* release thread's stack */
 127:../src/os/rt-thread/src/idle.c **** 		rt_free(thread->stack_addr);
 283              		.loc 2 127 0
 284 011a 7B68     		ldr	r3, [r7, #4]
 285 011c 5B6A     		ldr	r3, [r3, #36]
 286 011e 1846     		mov	r0, r3
 287 0120 FFF7FEFF 		bl	rt_free
 128:../src/os/rt-thread/src/idle.c **** 		/* delete thread object */
 129:../src/os/rt-thread/src/idle.c **** 		rt_object_delete((rt_object_t)thread);
 288              		.loc 2 129 0
 289 0124 7868     		ldr	r0, [r7, #4]
 290 0126 FFF7FEFF 		bl	rt_object_delete
 291              	.L7:
 292              	.LBE2:
 130:../src/os/rt-thread/src/idle.c **** #endif
 131:../src/os/rt-thread/src/idle.c **** 
 132:../src/os/rt-thread/src/idle.c **** #ifdef RT_USING_MODULE
 133:../src/os/rt-thread/src/idle.c **** 		if (module != RT_NULL)
 134:../src/os/rt-thread/src/idle.c **** 		{
 135:../src/os/rt-thread/src/idle.c **** 			extern rt_err_t rt_module_destroy(rt_module_t module);
 136:../src/os/rt-thread/src/idle.c **** 
 137:../src/os/rt-thread/src/idle.c **** 			/* if sub thread list and main thread are all empty */
 138:../src/os/rt-thread/src/idle.c **** 			if ((module->module_thread == RT_NULL) &&
 139:../src/os/rt-thread/src/idle.c **** 				rt_list_isempty(&module->module_object[RT_Object_Class_Thread].object_list) )
 140:../src/os/rt-thread/src/idle.c **** 			{
 141:../src/os/rt-thread/src/idle.c **** 				module->nref --;
 142:../src/os/rt-thread/src/idle.c **** 			}
 143:../src/os/rt-thread/src/idle.c **** 
 144:../src/os/rt-thread/src/idle.c **** 			/* destroy module */
 145:../src/os/rt-thread/src/idle.c **** 			if (module->nref == 0)
 146:../src/os/rt-thread/src/idle.c **** 				rt_module_destroy(module);
 147:../src/os/rt-thread/src/idle.c **** 		}
 148:../src/os/rt-thread/src/idle.c **** #endif
 149:../src/os/rt-thread/src/idle.c **** 	}
 150:../src/os/rt-thread/src/idle.c **** }
 293              		.loc 2 150 0
 294 012a 07F11007 		add	r7, r7, #16
 295 012e BD46     		mov	sp, r7
 296 0130 80BD     		pop	{r7, pc}
 297              	.L15:
 298 0132 00BF     		.align	2
 299              	.L14:
 300 0134 00000000 		.word	rt_thread_defunct
 301 0138 00000000 		.word	.LC0
 302 013c 50000000 		.word	__FUNCTION__.4850
 303 0140 24000000 		.word	.LC1
 304 0144 44000000 		.word	.LC2
 305              		.cfi_endproc
 306              	.LFE6:
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	rt_thread_idle_entry:
 313              	.LFB7:
 151:../src/os/rt-thread/src/idle.c **** 
 152:../src/os/rt-thread/src/idle.c **** static void rt_thread_idle_entry(void *parameter)
 153:../src/os/rt-thread/src/idle.c **** {
 314              		.loc 2 153 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0148 80B5     		push	{r7, lr}
 319              	.LCFI12:
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 014a 82B0     		sub	sp, sp, #8
 324              	.LCFI13:
 325              		.cfi_def_cfa_offset 16
 326 014c 00AF     		add	r7, sp, #0
 327              	.LCFI14:
 328              		.cfi_def_cfa_register 7
 329 014e 7860     		str	r0, [r7, #4]
 330              	.L18:
 154:../src/os/rt-thread/src/idle.c **** 	while (1)
 155:../src/os/rt-thread/src/idle.c **** 	{
 156:../src/os/rt-thread/src/idle.c **** 		#ifdef RT_USING_HOOK
 157:../src/os/rt-thread/src/idle.c **** 		if (rt_thread_idle_hook != RT_NULL)
 331              		.loc 2 157 0
 332 0150 044B     		ldr	r3, .L19
 333 0152 1B68     		ldr	r3, [r3, #0]
 334 0154 002B     		cmp	r3, #0
 335 0156 02D0     		beq	.L17
 158:../src/os/rt-thread/src/idle.c **** 			rt_thread_idle_hook();
 336              		.loc 2 158 0
 337 0158 024B     		ldr	r3, .L19
 338 015a 1B68     		ldr	r3, [r3, #0]
 339 015c 9847     		blx	r3
 340              	.L17:
 159:../src/os/rt-thread/src/idle.c **** 		#endif
 160:../src/os/rt-thread/src/idle.c **** 
 161:../src/os/rt-thread/src/idle.c **** 		rt_thread_idle_excute();
 341              		.loc 2 161 0
 342 015e FFF7FEFF 		bl	rt_thread_idle_excute
 162:../src/os/rt-thread/src/idle.c **** 	}
 343              		.loc 2 162 0
 344 0162 F5E7     		b	.L18
 345              	.L20:
 346              		.align	2
 347              	.L19:
 348 0164 78010000 		.word	rt_thread_idle_hook
 349              		.cfi_endproc
 350              	.LFE7:
 352              		.section	.rodata
 353 0046 0000     		.align	2
 354              	.LC3:
 355 0048 7469646C 		.ascii	"tidle\000"
 355      6500
 356              		.text
 357              		.align	2
 358              		.global	rt_thread_idle_init
 359              		.thumb
 360              		.thumb_func
 362              	rt_thread_idle_init:
 363              	.LFB8:
 163:../src/os/rt-thread/src/idle.c **** }
 164:../src/os/rt-thread/src/idle.c **** 
 165:../src/os/rt-thread/src/idle.c **** /**
 166:../src/os/rt-thread/src/idle.c ****  * @ingroup SymstemInit
 167:../src/os/rt-thread/src/idle.c ****  *
 168:../src/os/rt-thread/src/idle.c ****  * This function will initialize idle thread, then start it.
 169:../src/os/rt-thread/src/idle.c ****  *
 170:../src/os/rt-thread/src/idle.c ****  * @note this function must be invoked when system init.
 171:../src/os/rt-thread/src/idle.c ****  */
 172:../src/os/rt-thread/src/idle.c **** void rt_thread_idle_init(void)
 173:../src/os/rt-thread/src/idle.c **** {
 364              		.loc 2 173 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 0168 80B5     		push	{r7, lr}
 369              	.LCFI15:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 016a 84B0     		sub	sp, sp, #16
 374              	.LCFI16:
 375              		.cfi_def_cfa_offset 24
 376 016c 04AF     		add	r7, sp, #16
 377              	.LCFI17:
 378              		.cfi_def_cfa 7, 8
 174:../src/os/rt-thread/src/idle.c **** 	/* initialize thread */
 175:../src/os/rt-thread/src/idle.c **** 	rt_thread_init(&idle,
 379              		.loc 2 175 0
 380 016e 0B4B     		ldr	r3, .L22
 381 0170 0093     		str	r3, [sp, #0]
 382 0172 4FF48073 		mov	r3, #256
 383 0176 0193     		str	r3, [sp, #4]
 384 0178 4FF01F03 		mov	r3, #31
 385 017c 0293     		str	r3, [sp, #8]
 386 017e 4FF02003 		mov	r3, #32
 387 0182 0393     		str	r3, [sp, #12]
 388 0184 0648     		ldr	r0, .L22+4
 389 0186 0749     		ldr	r1, .L22+8
 390 0188 074A     		ldr	r2, .L22+12
 391 018a 4FF00003 		mov	r3, #0
 392 018e FFF7FEFF 		bl	rt_thread_init
 176:../src/os/rt-thread/src/idle.c **** 		"tidle",
 177:../src/os/rt-thread/src/idle.c **** 		rt_thread_idle_entry, RT_NULL,
 178:../src/os/rt-thread/src/idle.c **** 		&rt_thread_stack[0], sizeof(rt_thread_stack),
 179:../src/os/rt-thread/src/idle.c **** 		RT_THREAD_PRIORITY_MAX - 1, 32);
 180:../src/os/rt-thread/src/idle.c **** 
 181:../src/os/rt-thread/src/idle.c **** 	/* startup */
 182:../src/os/rt-thread/src/idle.c **** 	rt_thread_startup(&idle);
 393              		.loc 2 182 0
 394 0192 0348     		ldr	r0, .L22+4
 395 0194 FFF7FEFF 		bl	rt_thread_startup
 183:../src/os/rt-thread/src/idle.c **** }
 396              		.loc 2 183 0
 397 0198 BD46     		mov	sp, r7
 398 019a 80BD     		pop	{r7, pc}
 399              	.L23:
 400              		.align	2
 401              	.L22:
 402 019c 78000000 		.word	rt_thread_stack
 403 01a0 00000000 		.word	idle
 404 01a4 48000000 		.word	.LC3
 405 01a8 00000000 		.word	rt_thread_idle_entry
 406              		.cfi_endproc
 407              	.LFE8:
 409              		.section	.rodata
 410 004e 0000     		.align	2
 413              	__FUNCTION__.4850:
 414 0050 72745F74 		.ascii	"rt_thread_idle_excute\000"
 414      68726561 
 414      645F6964 
 414      6C655F65 
 414      78637574 
 415 0066 0000     		.text
 416              	.Letext0:
 417              		.file 3 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 idle.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:18     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:22     .text:00000000 rt_list_remove
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:73     .text:00000034 rt_list_isempty
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:110    .bss:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:111    .bss:00000000 idle
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:114    .bss:00000078 rt_thread_stack
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:117    .bss:00000178 rt_thread_idle_hook
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:125    .text:00000058 rt_thread_idle_sethook
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:156    .text:00000070 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:161    .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:171    .text:00000074 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:176    .text:00000074 rt_thread_idle_excute
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:300    .text:00000134 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:413    .rodata:00000050 __FUNCTION__.4850
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:308    .text:00000148 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:312    .text:00000148 rt_thread_idle_entry
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:348    .text:00000164 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:357    .text:00000168 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:362    .text:00000168 rt_thread_idle_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccleXpp8.s:402    .text:0000019c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.1271905b0c3eea0323671cb235cf482e
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_interrupt_get_nest
rt_kprintf
rt_hw_interrupt_enable
rt_object_is_systemobject
rt_free
rt_object_delete
rt_thread_defunct
rt_thread_init
rt_thread_startup
