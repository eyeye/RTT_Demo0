   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"clock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	rt_tick:
  21 0000 00000000 		.space	4
  22              		.text
  23              		.align	2
  24              		.global	rt_system_tick_init
  25              		.thumb
  26              		.thumb_func
  28              	rt_system_tick_init:
  29              	.LFB5:
  30              		.file 1 "../src/os/rt-thread/src/clock.c"
   1:../src/os/rt-thread/src/clock.c **** /*
   2:../src/os/rt-thread/src/clock.c ****  * File      : clock.c
   3:../src/os/rt-thread/src/clock.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/clock.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/clock.c ****  *
   6:../src/os/rt-thread/src/clock.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/clock.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/clock.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/clock.c ****  *
  10:../src/os/rt-thread/src/clock.c ****  * Change Logs:
  11:../src/os/rt-thread/src/clock.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/clock.c ****  * 2006-03-12     Bernard      first version
  13:../src/os/rt-thread/src/clock.c ****  * 2006-05-27     Bernard      add support for same priority thread schedule
  14:../src/os/rt-thread/src/clock.c ****  * 2006-08-10     Bernard      remove the last rt_schedule in rt_tick_increase
  15:../src/os/rt-thread/src/clock.c ****  * 2010-03-08     Bernard      remove rt_passed_second
  16:../src/os/rt-thread/src/clock.c ****  * 2010-05-20     Bernard      fix the tick exceeds the maximum limits
  17:../src/os/rt-thread/src/clock.c ****  * 2010-07-13     Bernard      fix rt_tick_from_millisecond issue found by kuronca
  18:../src/os/rt-thread/src/clock.c ****  * 2011-06-26     Bernard      add rt_tick_set function.
  19:../src/os/rt-thread/src/clock.c ****  */
  20:../src/os/rt-thread/src/clock.c **** 
  21:../src/os/rt-thread/src/clock.c **** #include <rthw.h>
  22:../src/os/rt-thread/src/clock.c **** #include <rtthread.h>
  23:../src/os/rt-thread/src/clock.c **** 
  24:../src/os/rt-thread/src/clock.c **** static rt_tick_t rt_tick = 0;
  25:../src/os/rt-thread/src/clock.c **** 
  26:../src/os/rt-thread/src/clock.c **** extern void rt_timer_check(void);
  27:../src/os/rt-thread/src/clock.c **** 
  28:../src/os/rt-thread/src/clock.c **** /**
  29:../src/os/rt-thread/src/clock.c ****  * This function will init system tick and set it to zero.
  30:../src/os/rt-thread/src/clock.c ****  * @ingroup SystemInit
  31:../src/os/rt-thread/src/clock.c ****  *
  32:../src/os/rt-thread/src/clock.c ****  * @deprecated since 1.1.0, this function does not need to be invoked
  33:../src/os/rt-thread/src/clock.c ****  * in the system initialization.
  34:../src/os/rt-thread/src/clock.c ****  */
  35:../src/os/rt-thread/src/clock.c **** void rt_system_tick_init(void)
  36:../src/os/rt-thread/src/clock.c **** {
  31              		.loc 1 36 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 7, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  37:../src/os/rt-thread/src/clock.c **** }
  43              		.loc 1 37 0
  44 0004 BD46     		mov	sp, r7
  45 0006 80BC     		pop	{r7}
  46 0008 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE5:
  50 000a 00BF     		.align	2
  51              		.global	rt_tick_get
  52              		.thumb
  53              		.thumb_func
  55              	rt_tick_get:
  56              	.LFB6:
  38:../src/os/rt-thread/src/clock.c **** 
  39:../src/os/rt-thread/src/clock.c **** /**
  40:../src/os/rt-thread/src/clock.c ****  * @addtogroup Clock
  41:../src/os/rt-thread/src/clock.c ****  */
  42:../src/os/rt-thread/src/clock.c **** 
  43:../src/os/rt-thread/src/clock.c **** /*@{*/
  44:../src/os/rt-thread/src/clock.c **** 
  45:../src/os/rt-thread/src/clock.c **** /**
  46:../src/os/rt-thread/src/clock.c ****  * This function will return current tick from operating system startup
  47:../src/os/rt-thread/src/clock.c ****  *
  48:../src/os/rt-thread/src/clock.c ****  * @return current tick
  49:../src/os/rt-thread/src/clock.c ****  */
  50:../src/os/rt-thread/src/clock.c **** rt_tick_t rt_tick_get(void)
  51:../src/os/rt-thread/src/clock.c **** {
  57              		.loc 1 51 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62 000c 80B4     		push	{r7}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 4
  65              		.cfi_offset 7, -4
  66 000e 00AF     		add	r7, sp, #0
  67              	.LCFI3:
  68              		.cfi_def_cfa_register 7
  52:../src/os/rt-thread/src/clock.c **** 	/* return the global tick */
  53:../src/os/rt-thread/src/clock.c **** 	return rt_tick;
  69              		.loc 1 53 0
  70 0010 024B     		ldr	r3, .L4
  71 0012 1B68     		ldr	r3, [r3, #0]
  54:../src/os/rt-thread/src/clock.c **** }
  72              		.loc 1 54 0
  73 0014 1846     		mov	r0, r3
  74 0016 BD46     		mov	sp, r7
  75 0018 80BC     		pop	{r7}
  76 001a 7047     		bx	lr
  77              	.L5:
  78              		.align	2
  79              	.L4:
  80 001c 00000000 		.word	rt_tick
  81              		.cfi_endproc
  82              	.LFE6:
  84              		.align	2
  85              		.global	rt_tick_set
  86              		.thumb
  87              		.thumb_func
  89              	rt_tick_set:
  90              	.LFB7:
  55:../src/os/rt-thread/src/clock.c **** RTM_EXPORT(rt_tick_get);
  56:../src/os/rt-thread/src/clock.c **** 
  57:../src/os/rt-thread/src/clock.c **** /**
  58:../src/os/rt-thread/src/clock.c ****  * This function will set current tick
  59:../src/os/rt-thread/src/clock.c ****  */
  60:../src/os/rt-thread/src/clock.c **** void rt_tick_set(rt_tick_t tick)
  61:../src/os/rt-thread/src/clock.c **** {
  91              		.loc 1 61 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 16
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95 0020 80B5     		push	{r7, lr}
  96              	.LCFI4:
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0022 84B0     		sub	sp, sp, #16
 101              	.LCFI5:
 102              		.cfi_def_cfa_offset 24
 103 0024 00AF     		add	r7, sp, #0
 104              	.LCFI6:
 105              		.cfi_def_cfa_register 7
 106 0026 7860     		str	r0, [r7, #4]
  62:../src/os/rt-thread/src/clock.c **** 	rt_base_t level;
  63:../src/os/rt-thread/src/clock.c **** 
  64:../src/os/rt-thread/src/clock.c **** 	level = rt_hw_interrupt_disable();
 107              		.loc 1 64 0
 108 0028 FFF7FEFF 		bl	rt_hw_interrupt_disable
 109 002c F860     		str	r0, [r7, #12]
  65:../src/os/rt-thread/src/clock.c **** 	rt_tick = tick;
 110              		.loc 1 65 0
 111 002e 054B     		ldr	r3, .L7
 112 0030 7A68     		ldr	r2, [r7, #4]
 113 0032 1A60     		str	r2, [r3, #0]
  66:../src/os/rt-thread/src/clock.c **** 	rt_hw_interrupt_enable(level);
 114              		.loc 1 66 0
 115 0034 F868     		ldr	r0, [r7, #12]
 116 0036 FFF7FEFF 		bl	rt_hw_interrupt_enable
  67:../src/os/rt-thread/src/clock.c **** }
 117              		.loc 1 67 0
 118 003a 07F11007 		add	r7, r7, #16
 119 003e BD46     		mov	sp, r7
 120 0040 80BD     		pop	{r7, pc}
 121              	.L8:
 122 0042 00BF     		.align	2
 123              	.L7:
 124 0044 00000000 		.word	rt_tick
 125              		.cfi_endproc
 126              	.LFE7:
 128              		.align	2
 129              		.global	rt_tick_increase
 130              		.thumb
 131              		.thumb_func
 133              	rt_tick_increase:
 134              	.LFB8:
  68:../src/os/rt-thread/src/clock.c **** 
  69:../src/os/rt-thread/src/clock.c **** /**
  70:../src/os/rt-thread/src/clock.c ****  * This function will notify kernel there is one tick passed. Normally,
  71:../src/os/rt-thread/src/clock.c ****  * this function is invoked by clock ISR.
  72:../src/os/rt-thread/src/clock.c ****  */
  73:../src/os/rt-thread/src/clock.c **** void rt_tick_increase(void)
  74:../src/os/rt-thread/src/clock.c **** {
 135              		.loc 1 74 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 8
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0048 80B5     		push	{r7, lr}
 140              	.LCFI7:
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 004a 82B0     		sub	sp, sp, #8
 145              	.LCFI8:
 146              		.cfi_def_cfa_offset 16
 147 004c 00AF     		add	r7, sp, #0
 148              	.LCFI9:
 149              		.cfi_def_cfa_register 7
  75:../src/os/rt-thread/src/clock.c **** 	struct rt_thread *thread;
  76:../src/os/rt-thread/src/clock.c **** 
  77:../src/os/rt-thread/src/clock.c **** 	/* increase the global tick */
  78:../src/os/rt-thread/src/clock.c **** 	++ rt_tick;
 150              		.loc 1 78 0
 151 004e 0F4B     		ldr	r3, .L11
 152 0050 1B68     		ldr	r3, [r3, #0]
 153 0052 03F10102 		add	r2, r3, #1
 154 0056 0D4B     		ldr	r3, .L11
 155 0058 1A60     		str	r2, [r3, #0]
  79:../src/os/rt-thread/src/clock.c **** 
  80:../src/os/rt-thread/src/clock.c **** 	/* check time slice */
  81:../src/os/rt-thread/src/clock.c **** 	thread = rt_thread_self();
 156              		.loc 1 81 0
 157 005a FFF7FEFF 		bl	rt_thread_self
 158 005e 7860     		str	r0, [r7, #4]
  82:../src/os/rt-thread/src/clock.c **** 
  83:../src/os/rt-thread/src/clock.c **** 	-- thread->remaining_tick;
 159              		.loc 1 83 0
 160 0060 7B68     		ldr	r3, [r7, #4]
 161 0062 5B6C     		ldr	r3, [r3, #68]
 162 0064 03F1FF32 		add	r2, r3, #-1
 163 0068 7B68     		ldr	r3, [r7, #4]
 164 006a 5A64     		str	r2, [r3, #68]
  84:../src/os/rt-thread/src/clock.c **** 	if (thread->remaining_tick == 0)
 165              		.loc 1 84 0
 166 006c 7B68     		ldr	r3, [r7, #4]
 167 006e 5B6C     		ldr	r3, [r3, #68]
 168 0070 002B     		cmp	r3, #0
 169 0072 05D1     		bne	.L10
  85:../src/os/rt-thread/src/clock.c **** 	{
  86:../src/os/rt-thread/src/clock.c **** 		/* change to initialized tick */
  87:../src/os/rt-thread/src/clock.c **** 		thread->remaining_tick = thread->init_tick;
 170              		.loc 1 87 0
 171 0074 7B68     		ldr	r3, [r7, #4]
 172 0076 1A6C     		ldr	r2, [r3, #64]
 173 0078 7B68     		ldr	r3, [r7, #4]
 174 007a 5A64     		str	r2, [r3, #68]
  88:../src/os/rt-thread/src/clock.c **** 
  89:../src/os/rt-thread/src/clock.c **** 		/* yield */
  90:../src/os/rt-thread/src/clock.c **** 		rt_thread_yield();
 175              		.loc 1 90 0
 176 007c FFF7FEFF 		bl	rt_thread_yield
 177              	.L10:
  91:../src/os/rt-thread/src/clock.c **** 	}
  92:../src/os/rt-thread/src/clock.c **** 
  93:../src/os/rt-thread/src/clock.c **** 	/* check timer */
  94:../src/os/rt-thread/src/clock.c **** 	rt_timer_check();
 178              		.loc 1 94 0
 179 0080 FFF7FEFF 		bl	rt_timer_check
  95:../src/os/rt-thread/src/clock.c **** }
 180              		.loc 1 95 0
 181 0084 07F10807 		add	r7, r7, #8
 182 0088 BD46     		mov	sp, r7
 183 008a 80BD     		pop	{r7, pc}
 184              	.L12:
 185              		.align	2
 186              	.L11:
 187 008c 00000000 		.word	rt_tick
 188              		.cfi_endproc
 189              	.LFE8:
 191              		.align	2
 192              		.global	rt_tick_from_millisecond
 193              		.thumb
 194              		.thumb_func
 196              	rt_tick_from_millisecond:
 197              	.LFB9:
  96:../src/os/rt-thread/src/clock.c **** 
  97:../src/os/rt-thread/src/clock.c **** /**
  98:../src/os/rt-thread/src/clock.c ****  * This function will calculate the tick from millisecond.
  99:../src/os/rt-thread/src/clock.c ****  *
 100:../src/os/rt-thread/src/clock.c ****  * @param ms the specified millisecond
 101:../src/os/rt-thread/src/clock.c ****  *
 102:../src/os/rt-thread/src/clock.c ****  * @return the calculated tick
 103:../src/os/rt-thread/src/clock.c ****  */
 104:../src/os/rt-thread/src/clock.c **** rt_tick_t rt_tick_from_millisecond(rt_uint32_t ms)
 105:../src/os/rt-thread/src/clock.c **** {
 198              		.loc 1 105 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203 0090 80B4     		push	{r7}
 204              	.LCFI10:
 205              		.cfi_def_cfa_offset 4
 206              		.cfi_offset 7, -4
 207 0092 83B0     		sub	sp, sp, #12
 208              	.LCFI11:
 209              		.cfi_def_cfa_offset 16
 210 0094 00AF     		add	r7, sp, #0
 211              	.LCFI12:
 212              		.cfi_def_cfa_register 7
 213 0096 7860     		str	r0, [r7, #4]
 106:../src/os/rt-thread/src/clock.c **** 	/* return the calculated tick */
 107:../src/os/rt-thread/src/clock.c **** 	return (RT_TICK_PER_SECOND * ms + 999) / 1000;
 214              		.loc 1 107 0
 215 0098 7B68     		ldr	r3, [r7, #4]
 216 009a 4FF06402 		mov	r2, #100
 217 009e 02FB03F3 		mul	r3, r2, r3
 218 00a2 03F2E732 		addw	r2, r3, #999
 219 00a6 054B     		ldr	r3, .L15
 220 00a8 A3FB0213 		umull	r1, r3, r3, r2
 221 00ac 4FEA9313 		lsr	r3, r3, #6
 108:../src/os/rt-thread/src/clock.c **** }
 222              		.loc 1 108 0
 223 00b0 1846     		mov	r0, r3
 224 00b2 07F10C07 		add	r7, r7, #12
 225 00b6 BD46     		mov	sp, r7
 226 00b8 80BC     		pop	{r7}
 227 00ba 7047     		bx	lr
 228              	.L16:
 229              		.align	2
 230              	.L15:
 231 00bc D34D6210 		.word	274877907
 232              		.cfi_endproc
 233              	.LFE9:
 235              	.Letext0:
 236              		.file 2 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:19     .bss:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:20     .bss:00000000 rt_tick
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:23     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:28     .text:00000000 rt_system_tick_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:55     .text:0000000c rt_tick_get
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:80     .text:0000001c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:84     .text:00000020 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:89     .text:00000020 rt_tick_set
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:124    .text:00000044 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:128    .text:00000048 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:133    .text:00000048 rt_tick_increase
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:187    .text:0000008c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:191    .text:00000090 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:196    .text:00000090 rt_tick_from_millisecond
C:\Users\YANGZH~1\AppData\Local\Temp\ccqmS27F.s:231    .text:000000bc $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.1271905b0c3eea0323671cb235cf482e
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_thread_self
rt_thread_yield
rt_timer_check
