   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"memheap.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC0:
  21 0000 28257329 		.ascii	"(%s) assert failed at %s:%d \012\000"
  21      20617373 
  21      65727420 
  21      6661696C 
  21      65642061 
  22 001e 0000     		.align	2
  23              	.LC1:
  24 0020 6D656D68 		.ascii	"memheap != RT_NULL\000"
  24      65617020 
  24      213D2052 
  24      545F4E55 
  24      4C4C00
  25              		.text
  26              		.align	2
  27              		.global	rt_memheap_init
  28              		.thumb
  29              		.thumb_func
  31              	rt_memheap_init:
  32              	.LFB5:
  33              		.file 1 "../src/os/rt-thread/src/memheap.c"
   1:../src/os/rt-thread/src/memheap.c **** /*
   2:../src/os/rt-thread/src/memheap.c ****  * File      : memheap.c
   3:../src/os/rt-thread/src/memheap.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/memheap.c ****  * COPYRIGHT (C) 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/memheap.c ****  *
   6:../src/os/rt-thread/src/memheap.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/memheap.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/memheap.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/memheap.c ****  *
  10:../src/os/rt-thread/src/memheap.c ****  * Change Logs:
  11:../src/os/rt-thread/src/memheap.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/memheap.c ****  * 2012-04-10     Bernard      first implementation
  13:../src/os/rt-thread/src/memheap.c ****  * 2012-10-16     Bernard      add the mutex lock for heap object.
  14:../src/os/rt-thread/src/memheap.c ****  */
  15:../src/os/rt-thread/src/memheap.c **** 
  16:../src/os/rt-thread/src/memheap.c **** #include <rtthread.h>
  17:../src/os/rt-thread/src/memheap.c **** 
  18:../src/os/rt-thread/src/memheap.c **** #ifdef RT_USING_MEMHEAP
  19:../src/os/rt-thread/src/memheap.c **** 
  20:../src/os/rt-thread/src/memheap.c **** /* dynamic pool magic and mask */
  21:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_MAGIC		0x1ea01ea0
  22:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_MASK		0xfffffffe
  23:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_USED		0x01
  24:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_FREED		0x00
  25:../src/os/rt-thread/src/memheap.c **** 
  26:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_IS_USED(i)	((i)->magic & RT_MEMHEAP_USED)
  27:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_MINIALLOC	12
  28:../src/os/rt-thread/src/memheap.c **** 
  29:../src/os/rt-thread/src/memheap.c **** #define RT_MEMHEAP_SIZE		RT_ALIGN(sizeof(struct rt_memheap_item), RT_ALIGN_SIZE)
  30:../src/os/rt-thread/src/memheap.c **** 
  31:../src/os/rt-thread/src/memheap.c **** /*
  32:../src/os/rt-thread/src/memheap.c ****  * The initialized memory pool will be:
  33:../src/os/rt-thread/src/memheap.c ****  * +-----------------------------------+--------------------------+
  34:../src/os/rt-thread/src/memheap.c ****  * | whole freed memory block          | Used Memory Block Tailer |
  35:../src/os/rt-thread/src/memheap.c ****  * +-----------------------------------+--------------------------+
  36:../src/os/rt-thread/src/memheap.c ****  *
  37:../src/os/rt-thread/src/memheap.c ****  * block_list --> whole freed memory block
  38:../src/os/rt-thread/src/memheap.c ****  *
  39:../src/os/rt-thread/src/memheap.c ****  * The length of Used Memory Block Tailer is 0, which is prevents block merging across list
  40:../src/os/rt-thread/src/memheap.c ****  */
  41:../src/os/rt-thread/src/memheap.c **** rt_err_t rt_memheap_init(struct rt_memheap *memheap, const char *name,
  42:../src/os/rt-thread/src/memheap.c **** 	void *start_addr,
  43:../src/os/rt-thread/src/memheap.c **** 	rt_uint32_t size)
  44:../src/os/rt-thread/src/memheap.c **** {
  34              		.loc 1 44 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 24
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 86B0     		sub	sp, sp, #24
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 32
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 F860     		str	r0, [r7, #12]
  50 0008 B960     		str	r1, [r7, #8]
  51 000a 7A60     		str	r2, [r7, #4]
  52 000c 3B60     		str	r3, [r7, #0]
  45:../src/os/rt-thread/src/memheap.c **** 	struct rt_memheap_item *item;
  46:../src/os/rt-thread/src/memheap.c **** 
  47:../src/os/rt-thread/src/memheap.c **** 	RT_ASSERT(memheap != RT_NULL);
  53              		.loc 1 47 0
  54 000e FB68     		ldr	r3, [r7, #12]
  55 0010 002B     		cmp	r3, #0
  56 0012 0DD1     		bne	.L2
  57              	.LBB2:
  58              		.loc 1 47 0 is_stmt 0 discriminator 1
  59 0014 4FF00003 		mov	r3, #0
  60 0018 FB74     		strb	r3, [r7, #19]
  61 001a 4C48     		ldr	r0, .L5
  62 001c 4C49     		ldr	r1, .L5+4
  63 001e 4D4A     		ldr	r2, .L5+8
  64 0020 4FF02F03 		mov	r3, #47
  65 0024 FFF7FEFF 		bl	rt_kprintf
  66              	.L3:
  67              		.loc 1 47 0 discriminator 2
  68 0028 FB7C     		ldrb	r3, [r7, #19]
  69 002a DBB2     		uxtb	r3, r3
  70 002c 002B     		cmp	r3, #0
  71 002e FBD0     		beq	.L3
  72              	.L2:
  73              	.LBE2:
  48:../src/os/rt-thread/src/memheap.c **** 
  49:../src/os/rt-thread/src/memheap.c **** 	/* initialize pool object */
  50:../src/os/rt-thread/src/memheap.c **** 	rt_object_init(&(memheap->parent), RT_Object_Class_MemHeap, name);
  74              		.loc 1 50 0 is_stmt 1
  75 0030 FB68     		ldr	r3, [r7, #12]
  76 0032 1846     		mov	r0, r3
  77 0034 4FF00601 		mov	r1, #6
  78 0038 BA68     		ldr	r2, [r7, #8]
  79 003a FFF7FEFF 		bl	rt_object_init
  51:../src/os/rt-thread/src/memheap.c **** 
  52:../src/os/rt-thread/src/memheap.c **** 	memheap->start_addr = start_addr;
  80              		.loc 1 52 0
  81 003e FB68     		ldr	r3, [r7, #12]
  82 0040 7A68     		ldr	r2, [r7, #4]
  83 0042 1A61     		str	r2, [r3, #16]
  53:../src/os/rt-thread/src/memheap.c **** 	memheap->pool_size = RT_ALIGN_DOWN(size, RT_ALIGN_SIZE);
  84              		.loc 1 53 0
  85 0044 3B68     		ldr	r3, [r7, #0]
  86 0046 23F00302 		bic	r2, r3, #3
  87 004a FB68     		ldr	r3, [r7, #12]
  88 004c 5A61     		str	r2, [r3, #20]
  54:../src/os/rt-thread/src/memheap.c ****     memheap->available_size = memheap->pool_size - (2 * RT_MEMHEAP_SIZE);
  89              		.loc 1 54 0
  90 004e FB68     		ldr	r3, [r7, #12]
  91 0050 5B69     		ldr	r3, [r3, #20]
  92 0052 A3F13002 		sub	r2, r3, #48
  93 0056 FB68     		ldr	r3, [r7, #12]
  94 0058 9A61     		str	r2, [r3, #24]
  55:../src/os/rt-thread/src/memheap.c **** 
  56:../src/os/rt-thread/src/memheap.c **** 	/* initialize the free list header */
  57:../src/os/rt-thread/src/memheap.c **** 	item = &(memheap->free_header);
  95              		.loc 1 57 0
  96 005a FB68     		ldr	r3, [r7, #12]
  97 005c 03F12403 		add	r3, r3, #36
  98 0060 7B61     		str	r3, [r7, #20]
  58:../src/os/rt-thread/src/memheap.c **** 	item->magic = RT_MEMHEAP_MAGIC;
  99              		.loc 1 58 0
 100 0062 7B69     		ldr	r3, [r7, #20]
 101 0064 3C4A     		ldr	r2, .L5+12
 102 0066 1A60     		str	r2, [r3, #0]
  59:../src/os/rt-thread/src/memheap.c **** 	item->pool_ptr = memheap;
 103              		.loc 1 59 0
 104 0068 7B69     		ldr	r3, [r7, #20]
 105 006a FA68     		ldr	r2, [r7, #12]
 106 006c 5A61     		str	r2, [r3, #20]
  60:../src/os/rt-thread/src/memheap.c **** 	item->next = RT_NULL;
 107              		.loc 1 60 0
 108 006e 7B69     		ldr	r3, [r7, #20]
 109 0070 4FF00002 		mov	r2, #0
 110 0074 5A60     		str	r2, [r3, #4]
  61:../src/os/rt-thread/src/memheap.c **** 	item->prev = RT_NULL;
 111              		.loc 1 61 0
 112 0076 7B69     		ldr	r3, [r7, #20]
 113 0078 4FF00002 		mov	r2, #0
 114 007c 9A60     		str	r2, [r3, #8]
  62:../src/os/rt-thread/src/memheap.c **** 	item->next_free = item;
 115              		.loc 1 62 0
 116 007e 7B69     		ldr	r3, [r7, #20]
 117 0080 7A69     		ldr	r2, [r7, #20]
 118 0082 DA60     		str	r2, [r3, #12]
  63:../src/os/rt-thread/src/memheap.c **** 	item->prev_free = item;
 119              		.loc 1 63 0
 120 0084 7B69     		ldr	r3, [r7, #20]
 121 0086 7A69     		ldr	r2, [r7, #20]
 122 0088 1A61     		str	r2, [r3, #16]
  64:../src/os/rt-thread/src/memheap.c **** 
  65:../src/os/rt-thread/src/memheap.c **** 	/* set the free list to free list header */
  66:../src/os/rt-thread/src/memheap.c **** 	memheap->free_list = item;
 123              		.loc 1 66 0
 124 008a FB68     		ldr	r3, [r7, #12]
 125 008c 7A69     		ldr	r2, [r7, #20]
 126 008e 1A62     		str	r2, [r3, #32]
  67:../src/os/rt-thread/src/memheap.c **** 
  68:../src/os/rt-thread/src/memheap.c **** 	/* initialize the first big memory block */
  69:../src/os/rt-thread/src/memheap.c **** 	item = (struct rt_memheap_item *)start_addr;
 127              		.loc 1 69 0
 128 0090 7B68     		ldr	r3, [r7, #4]
 129 0092 7B61     		str	r3, [r7, #20]
  70:../src/os/rt-thread/src/memheap.c **** 	item->magic = RT_MEMHEAP_MAGIC;
 130              		.loc 1 70 0
 131 0094 7B69     		ldr	r3, [r7, #20]
 132 0096 304A     		ldr	r2, .L5+12
 133 0098 1A60     		str	r2, [r3, #0]
  71:../src/os/rt-thread/src/memheap.c **** 	item->pool_ptr = memheap;
 134              		.loc 1 71 0
 135 009a 7B69     		ldr	r3, [r7, #20]
 136 009c FA68     		ldr	r2, [r7, #12]
 137 009e 5A61     		str	r2, [r3, #20]
  72:../src/os/rt-thread/src/memheap.c **** 	item->next = RT_NULL;
 138              		.loc 1 72 0
 139 00a0 7B69     		ldr	r3, [r7, #20]
 140 00a2 4FF00002 		mov	r2, #0
 141 00a6 5A60     		str	r2, [r3, #4]
  73:../src/os/rt-thread/src/memheap.c **** 	item->prev = RT_NULL;
 142              		.loc 1 73 0
 143 00a8 7B69     		ldr	r3, [r7, #20]
 144 00aa 4FF00002 		mov	r2, #0
 145 00ae 9A60     		str	r2, [r3, #8]
  74:../src/os/rt-thread/src/memheap.c **** 	item->next_free = item;
 146              		.loc 1 74 0
 147 00b0 7B69     		ldr	r3, [r7, #20]
 148 00b2 7A69     		ldr	r2, [r7, #20]
 149 00b4 DA60     		str	r2, [r3, #12]
  75:../src/os/rt-thread/src/memheap.c **** 	item->prev_free = item;
 150              		.loc 1 75 0
 151 00b6 7B69     		ldr	r3, [r7, #20]
 152 00b8 7A69     		ldr	r2, [r7, #20]
 153 00ba 1A61     		str	r2, [r3, #16]
  76:../src/os/rt-thread/src/memheap.c **** 
  77:../src/os/rt-thread/src/memheap.c **** 	item->next = (struct rt_memheap_item *)
  78:../src/os/rt-thread/src/memheap.c **** 		((rt_uint8_t *)item + memheap->available_size + RT_MEMHEAP_SIZE);
 154              		.loc 1 78 0
 155 00bc FB68     		ldr	r3, [r7, #12]
 156 00be 9B69     		ldr	r3, [r3, #24]
 157 00c0 03F11803 		add	r3, r3, #24
  77:../src/os/rt-thread/src/memheap.c **** 	item->next = (struct rt_memheap_item *)
 158              		.loc 1 77 0
 159 00c4 7A69     		ldr	r2, [r7, #20]
 160 00c6 D218     		adds	r2, r2, r3
 161 00c8 7B69     		ldr	r3, [r7, #20]
 162 00ca 5A60     		str	r2, [r3, #4]
  79:../src/os/rt-thread/src/memheap.c **** 	item->prev =  item->next;
 163              		.loc 1 79 0
 164 00cc 7B69     		ldr	r3, [r7, #20]
 165 00ce 5A68     		ldr	r2, [r3, #4]
 166 00d0 7B69     		ldr	r3, [r7, #20]
 167 00d2 9A60     		str	r2, [r3, #8]
  80:../src/os/rt-thread/src/memheap.c **** 
  81:../src/os/rt-thread/src/memheap.c **** 	/* block list header */
  82:../src/os/rt-thread/src/memheap.c **** 	memheap->block_list = item;
 168              		.loc 1 82 0
 169 00d4 FB68     		ldr	r3, [r7, #12]
 170 00d6 7A69     		ldr	r2, [r7, #20]
 171 00d8 DA61     		str	r2, [r3, #28]
  83:../src/os/rt-thread/src/memheap.c **** 
  84:../src/os/rt-thread/src/memheap.c **** 	/* place the big memory block to free list */
  85:../src/os/rt-thread/src/memheap.c **** 	item->next_free = memheap->free_list->next_free;
 172              		.loc 1 85 0
 173 00da FB68     		ldr	r3, [r7, #12]
 174 00dc 1B6A     		ldr	r3, [r3, #32]
 175 00de DA68     		ldr	r2, [r3, #12]
 176 00e0 7B69     		ldr	r3, [r7, #20]
 177 00e2 DA60     		str	r2, [r3, #12]
  86:../src/os/rt-thread/src/memheap.c **** 	item->prev_free = memheap->free_list;
 178              		.loc 1 86 0
 179 00e4 FB68     		ldr	r3, [r7, #12]
 180 00e6 1A6A     		ldr	r2, [r3, #32]
 181 00e8 7B69     		ldr	r3, [r7, #20]
 182 00ea 1A61     		str	r2, [r3, #16]
  87:../src/os/rt-thread/src/memheap.c **** 	memheap->free_list->next_free->prev_free = item;
 183              		.loc 1 87 0
 184 00ec FB68     		ldr	r3, [r7, #12]
 185 00ee 1B6A     		ldr	r3, [r3, #32]
 186 00f0 DB68     		ldr	r3, [r3, #12]
 187 00f2 7A69     		ldr	r2, [r7, #20]
 188 00f4 1A61     		str	r2, [r3, #16]
  88:../src/os/rt-thread/src/memheap.c **** 	memheap->free_list->next_free = item;
 189              		.loc 1 88 0
 190 00f6 FB68     		ldr	r3, [r7, #12]
 191 00f8 1B6A     		ldr	r3, [r3, #32]
 192 00fa 7A69     		ldr	r2, [r7, #20]
 193 00fc DA60     		str	r2, [r3, #12]
  89:../src/os/rt-thread/src/memheap.c **** 
  90:../src/os/rt-thread/src/memheap.c **** 	/* move to the end of memory pool to build a small tailer block, which prevents block merging */
  91:../src/os/rt-thread/src/memheap.c **** 	item =  item->next;
 194              		.loc 1 91 0
 195 00fe 7B69     		ldr	r3, [r7, #20]
 196 0100 5B68     		ldr	r3, [r3, #4]
 197 0102 7B61     		str	r3, [r7, #20]
  92:../src/os/rt-thread/src/memheap.c **** 	/* it's a used memory block */
  93:../src/os/rt-thread/src/memheap.c **** 	item->magic = RT_MEMHEAP_MAGIC | RT_MEMHEAP_USED;
 198              		.loc 1 93 0
 199 0104 7B69     		ldr	r3, [r7, #20]
 200 0106 154A     		ldr	r2, .L5+16
 201 0108 1A60     		str	r2, [r3, #0]
  94:../src/os/rt-thread/src/memheap.c **** 	item->pool_ptr = memheap;
 202              		.loc 1 94 0
 203 010a 7B69     		ldr	r3, [r7, #20]
 204 010c FA68     		ldr	r2, [r7, #12]
 205 010e 5A61     		str	r2, [r3, #20]
  95:../src/os/rt-thread/src/memheap.c **** 	item->next = (struct rt_memheap_item *)start_addr;
 206              		.loc 1 95 0
 207 0110 7B69     		ldr	r3, [r7, #20]
 208 0112 7A68     		ldr	r2, [r7, #4]
 209 0114 5A60     		str	r2, [r3, #4]
  96:../src/os/rt-thread/src/memheap.c **** 	item->prev = (struct rt_memheap_item *)start_addr;
 210              		.loc 1 96 0
 211 0116 7B69     		ldr	r3, [r7, #20]
 212 0118 7A68     		ldr	r2, [r7, #4]
 213 011a 9A60     		str	r2, [r3, #8]
  97:../src/os/rt-thread/src/memheap.c **** 	/* not in free list */
  98:../src/os/rt-thread/src/memheap.c **** 	item->next_free = item->prev_free = RT_NULL;
 214              		.loc 1 98 0
 215 011c 7B69     		ldr	r3, [r7, #20]
 216 011e 4FF00002 		mov	r2, #0
 217 0122 1A61     		str	r2, [r3, #16]
 218 0124 7B69     		ldr	r3, [r7, #20]
 219 0126 1A69     		ldr	r2, [r3, #16]
 220 0128 7B69     		ldr	r3, [r7, #20]
 221 012a DA60     		str	r2, [r3, #12]
  99:../src/os/rt-thread/src/memheap.c **** 
 100:../src/os/rt-thread/src/memheap.c **** 	/* initialize mutex lock */
 101:../src/os/rt-thread/src/memheap.c **** 	rt_mutex_init(&(memheap->lock), name, RT_IPC_FLAG_FIFO);
 222              		.loc 1 101 0
 223 012c FB68     		ldr	r3, [r7, #12]
 224 012e 03F13C03 		add	r3, r3, #60
 225 0132 1846     		mov	r0, r3
 226 0134 B968     		ldr	r1, [r7, #8]
 227 0136 4FF00002 		mov	r2, #0
 228 013a FFF7FEFF 		bl	rt_mutex_init
 102:../src/os/rt-thread/src/memheap.c **** 
 103:../src/os/rt-thread/src/memheap.c **** 	RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("memory heap: start addr 0x%08x, size %d, free list header 0x%08x"
 104:../src/os/rt-thread/src/memheap.c ****     		start_addr, size, &(memheap->free_header)));
 105:../src/os/rt-thread/src/memheap.c **** 
 106:../src/os/rt-thread/src/memheap.c **** 	return RT_EOK;
 229              		.loc 1 106 0
 230 013e 4FF00003 		mov	r3, #0
 107:../src/os/rt-thread/src/memheap.c **** }
 231              		.loc 1 107 0
 232 0142 1846     		mov	r0, r3
 233 0144 07F11807 		add	r7, r7, #24
 234 0148 BD46     		mov	sp, r7
 235 014a 80BD     		pop	{r7, pc}
 236              	.L6:
 237              		.align	2
 238              	.L5:
 239 014c 00000000 		.word	.LC0
 240 0150 20000000 		.word	.LC1
 241 0154 C0000000 		.word	__FUNCTION__.4792
 242 0158 A01EA01E 		.word	513810080
 243 015c A11EA01E 		.word	513810081
 244              		.cfi_endproc
 245              	.LFE5:
 247              		.section	.rodata
 248 0033 00       		.align	2
 249              	.LC2:
 250 0034 68656170 		.ascii	"heap\000"
 250      00
 251              		.text
 252              		.align	2
 253              		.global	rt_memheap_detach
 254              		.thumb
 255              		.thumb_func
 257              	rt_memheap_detach:
 258              	.LFB6:
 108:../src/os/rt-thread/src/memheap.c **** RTM_EXPORT(rt_memheap_init);
 109:../src/os/rt-thread/src/memheap.c **** 
 110:../src/os/rt-thread/src/memheap.c **** rt_err_t rt_memheap_detach(struct rt_memheap *heap)
 111:../src/os/rt-thread/src/memheap.c **** {
 259              		.loc 1 111 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 16
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0160 80B5     		push	{r7, lr}
 264              	.LCFI3:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0162 84B0     		sub	sp, sp, #16
 269              	.LCFI4:
 270              		.cfi_def_cfa_offset 24
 271 0164 00AF     		add	r7, sp, #0
 272              	.LCFI5:
 273              		.cfi_def_cfa_register 7
 274 0166 7860     		str	r0, [r7, #4]
 112:../src/os/rt-thread/src/memheap.c **** 	RT_ASSERT(heap);
 275              		.loc 1 112 0
 276 0168 7B68     		ldr	r3, [r7, #4]
 277 016a 002B     		cmp	r3, #0
 278 016c 0DD1     		bne	.L8
 279              	.LBB3:
 280              		.loc 1 112 0 is_stmt 0 discriminator 1
 281 016e 4FF00003 		mov	r3, #0
 282 0172 FB73     		strb	r3, [r7, #15]
 283 0174 0D48     		ldr	r0, .L11
 284 0176 0E49     		ldr	r1, .L11+4
 285 0178 0E4A     		ldr	r2, .L11+8
 286 017a 4FF07003 		mov	r3, #112
 287 017e FFF7FEFF 		bl	rt_kprintf
 288              	.L9:
 289              		.loc 1 112 0 discriminator 2
 290 0182 FB7B     		ldrb	r3, [r7, #15]
 291 0184 DBB2     		uxtb	r3, r3
 292 0186 002B     		cmp	r3, #0
 293 0188 FBD0     		beq	.L9
 294              	.L8:
 295              	.LBE3:
 113:../src/os/rt-thread/src/memheap.c **** 
 114:../src/os/rt-thread/src/memheap.c **** 	rt_object_detach(&(heap->lock.parent.parent));
 296              		.loc 1 114 0 is_stmt 1
 297 018a 7B68     		ldr	r3, [r7, #4]
 298 018c 03F13C03 		add	r3, r3, #60
 299 0190 1846     		mov	r0, r3
 300 0192 FFF7FEFF 		bl	rt_object_detach
 115:../src/os/rt-thread/src/memheap.c **** 	rt_object_detach(&(heap->parent));
 301              		.loc 1 115 0
 302 0196 7B68     		ldr	r3, [r7, #4]
 303 0198 1846     		mov	r0, r3
 304 019a FFF7FEFF 		bl	rt_object_detach
 116:../src/os/rt-thread/src/memheap.c **** 
 117:../src/os/rt-thread/src/memheap.c **** 	/* Return a successful completion. */
 118:../src/os/rt-thread/src/memheap.c **** 	return RT_EOK;
 305              		.loc 1 118 0
 306 019e 4FF00003 		mov	r3, #0
 119:../src/os/rt-thread/src/memheap.c **** }
 307              		.loc 1 119 0
 308 01a2 1846     		mov	r0, r3
 309 01a4 07F11007 		add	r7, r7, #16
 310 01a8 BD46     		mov	sp, r7
 311 01aa 80BD     		pop	{r7, pc}
 312              	.L12:
 313              		.align	2
 314              	.L11:
 315 01ac 00000000 		.word	.LC0
 316 01b0 34000000 		.word	.LC2
 317 01b4 AC000000 		.word	__FUNCTION__.4800
 318              		.cfi_endproc
 319              	.LFE6:
 321              		.section	.rodata
 322 0039 000000   		.align	2
 323              	.LC3:
 324 003c 68656170 		.ascii	"heap != RT_NULL\000"
 324      20213D20 
 324      52545F4E 
 324      554C4C00 
 325              		.text
 326              		.align	2
 327              		.global	rt_memheap_alloc
 328              		.thumb
 329              		.thumb_func
 331              	rt_memheap_alloc:
 332              	.LFB7:
 120:../src/os/rt-thread/src/memheap.c **** RTM_EXPORT(rt_memheap_detach);
 121:../src/os/rt-thread/src/memheap.c **** 
 122:../src/os/rt-thread/src/memheap.c **** void *rt_memheap_alloc(struct rt_memheap *heap, rt_uint32_t size)
 123:../src/os/rt-thread/src/memheap.c **** {
 333              		.loc 1 123 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 32
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 01b8 80B5     		push	{r7, lr}
 338              	.LCFI6:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 01ba 88B0     		sub	sp, sp, #32
 343              	.LCFI7:
 344              		.cfi_def_cfa_offset 40
 345 01bc 00AF     		add	r7, sp, #0
 346              	.LCFI8:
 347              		.cfi_def_cfa_register 7
 348 01be 7860     		str	r0, [r7, #4]
 349 01c0 3960     		str	r1, [r7, #0]
 124:../src/os/rt-thread/src/memheap.c **** 	rt_err_t result;
 125:../src/os/rt-thread/src/memheap.c **** 	rt_uint32_t free_size;
 126:../src/os/rt-thread/src/memheap.c **** 	struct rt_memheap_item *header_ptr;
 127:../src/os/rt-thread/src/memheap.c **** 
 128:../src/os/rt-thread/src/memheap.c **** 	RT_ASSERT(heap != RT_NULL);
 350              		.loc 1 128 0
 351 01c2 7B68     		ldr	r3, [r7, #4]
 352 01c4 002B     		cmp	r3, #0
 353 01c6 0DD1     		bne	.L14
 354              	.LBB4:
 355              		.loc 1 128 0 is_stmt 0 discriminator 1
 356 01c8 4FF00003 		mov	r3, #0
 357 01cc FB73     		strb	r3, [r7, #15]
 358 01ce 6A48     		ldr	r0, .L26
 359 01d0 6A49     		ldr	r1, .L26+4
 360 01d2 6B4A     		ldr	r2, .L26+8
 361 01d4 4FF08003 		mov	r3, #128
 362 01d8 FFF7FEFF 		bl	rt_kprintf
 363              	.L15:
 364              		.loc 1 128 0 discriminator 2
 365 01dc FB7B     		ldrb	r3, [r7, #15]
 366 01de DBB2     		uxtb	r3, r3
 367 01e0 002B     		cmp	r3, #0
 368 01e2 FBD0     		beq	.L15
 369              	.L14:
 370              	.LBE4:
 129:../src/os/rt-thread/src/memheap.c **** 
 130:../src/os/rt-thread/src/memheap.c **** 	/* align allocated size */
 131:../src/os/rt-thread/src/memheap.c **** 	size = RT_ALIGN(size, RT_ALIGN_SIZE);
 371              		.loc 1 131 0 is_stmt 1
 372 01e4 3B68     		ldr	r3, [r7, #0]
 373 01e6 03F10303 		add	r3, r3, #3
 374 01ea 23F00303 		bic	r3, r3, #3
 375 01ee 3B60     		str	r3, [r7, #0]
 132:../src/os/rt-thread/src/memheap.c **** 	if (size < RT_MEMHEAP_MINIALLOC)
 376              		.loc 1 132 0
 377 01f0 3B68     		ldr	r3, [r7, #0]
 378 01f2 0B2B     		cmp	r3, #11
 379 01f4 02D8     		bhi	.L16
 133:../src/os/rt-thread/src/memheap.c **** 		size = RT_MEMHEAP_MINIALLOC;
 380              		.loc 1 133 0
 381 01f6 4FF00C03 		mov	r3, #12
 382 01fa 3B60     		str	r3, [r7, #0]
 383              	.L16:
 134:../src/os/rt-thread/src/memheap.c **** 
 135:../src/os/rt-thread/src/memheap.c **** 	RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("allocate %d", size));
 136:../src/os/rt-thread/src/memheap.c **** 
 137:../src/os/rt-thread/src/memheap.c **** 	if (size < heap->available_size)
 384              		.loc 1 137 0
 385 01fc 7B68     		ldr	r3, [r7, #4]
 386 01fe 9A69     		ldr	r2, [r3, #24]
 387 0200 3B68     		ldr	r3, [r7, #0]
 388 0202 9A42     		cmp	r2, r3
 389 0204 40F2B180 		bls	.L17
 138:../src/os/rt-thread/src/memheap.c **** 	{
 139:../src/os/rt-thread/src/memheap.c **** 		/* search on free list */
 140:../src/os/rt-thread/src/memheap.c **** 		free_size = 0;
 390              		.loc 1 140 0
 391 0208 4FF00003 		mov	r3, #0
 392 020c FB61     		str	r3, [r7, #28]
 141:../src/os/rt-thread/src/memheap.c **** 
 142:../src/os/rt-thread/src/memheap.c **** 		/* lock memheap */
 143:../src/os/rt-thread/src/memheap.c **** 		result = rt_mutex_take(&(heap->lock), RT_WAITING_FOREVER);
 393              		.loc 1 143 0
 394 020e 7B68     		ldr	r3, [r7, #4]
 395 0210 03F13C03 		add	r3, r3, #60
 396 0214 1846     		mov	r0, r3
 397 0216 4FF0FF31 		mov	r1, #-1
 398 021a FFF7FEFF 		bl	rt_mutex_take
 399 021e 7861     		str	r0, [r7, #20]
 144:../src/os/rt-thread/src/memheap.c **** 		if (result != RT_EOK)
 400              		.loc 1 144 0
 401 0220 7B69     		ldr	r3, [r7, #20]
 402 0222 002B     		cmp	r3, #0
 403 0224 05D0     		beq	.L18
 145:../src/os/rt-thread/src/memheap.c **** 		{
 146:../src/os/rt-thread/src/memheap.c **** 			rt_set_errno(result);
 404              		.loc 1 146 0
 405 0226 7869     		ldr	r0, [r7, #20]
 406 0228 FFF7FEFF 		bl	rt_set_errno
 147:../src/os/rt-thread/src/memheap.c **** 			return RT_NULL;
 407              		.loc 1 147 0
 408 022c 4FF00003 		mov	r3, #0
 409 0230 9DE0     		b	.L19
 410              	.L18:
 148:../src/os/rt-thread/src/memheap.c **** 		}
 149:../src/os/rt-thread/src/memheap.c **** 
 150:../src/os/rt-thread/src/memheap.c **** 		/* get the first free memory block */
 151:../src/os/rt-thread/src/memheap.c **** 		header_ptr = heap->free_list->next_free;
 411              		.loc 1 151 0
 412 0232 7B68     		ldr	r3, [r7, #4]
 413 0234 1B6A     		ldr	r3, [r3, #32]
 414 0236 DB68     		ldr	r3, [r3, #12]
 415 0238 BB61     		str	r3, [r7, #24]
 152:../src/os/rt-thread/src/memheap.c **** 		while (header_ptr != heap->free_list && free_size < size)
 416              		.loc 1 152 0
 417 023a 0EE0     		b	.L20
 418              	.L22:
 153:../src/os/rt-thread/src/memheap.c **** 		{
 154:../src/os/rt-thread/src/memheap.c **** 			/* get current freed memory block size */
 155:../src/os/rt-thread/src/memheap.c **** 			free_size = (rt_uint32_t)(header_ptr->next) - (rt_uint32_t)header_ptr - RT_MEMHEAP_SIZE;
 419              		.loc 1 155 0
 420 023c BB69     		ldr	r3, [r7, #24]
 421 023e 5B68     		ldr	r3, [r3, #4]
 422 0240 1A46     		mov	r2, r3
 423 0242 BB69     		ldr	r3, [r7, #24]
 424 0244 D31A     		subs	r3, r2, r3
 425 0246 A3F11803 		sub	r3, r3, #24
 426 024a FB61     		str	r3, [r7, #28]
 156:../src/os/rt-thread/src/memheap.c **** 
 157:../src/os/rt-thread/src/memheap.c **** 			if (free_size < size)
 427              		.loc 1 157 0
 428 024c FA69     		ldr	r2, [r7, #28]
 429 024e 3B68     		ldr	r3, [r7, #0]
 430 0250 9A42     		cmp	r2, r3
 431 0252 02D2     		bcs	.L20
 158:../src/os/rt-thread/src/memheap.c **** 			{
 159:../src/os/rt-thread/src/memheap.c **** 				/* move to next free memory block */
 160:../src/os/rt-thread/src/memheap.c **** 				header_ptr = header_ptr->next_free;
 432              		.loc 1 160 0
 433 0254 BB69     		ldr	r3, [r7, #24]
 434 0256 DB68     		ldr	r3, [r3, #12]
 435 0258 BB61     		str	r3, [r7, #24]
 436              	.L20:
 152:../src/os/rt-thread/src/memheap.c **** 		while (header_ptr != heap->free_list && free_size < size)
 437              		.loc 1 152 0 discriminator 1
 438 025a 7B68     		ldr	r3, [r7, #4]
 439 025c 1A6A     		ldr	r2, [r3, #32]
 440 025e BB69     		ldr	r3, [r7, #24]
 441 0260 9A42     		cmp	r2, r3
 442 0262 03D0     		beq	.L21
 152:../src/os/rt-thread/src/memheap.c **** 		while (header_ptr != heap->free_list && free_size < size)
 443              		.loc 1 152 0 is_stmt 0 discriminator 2
 444 0264 FA69     		ldr	r2, [r7, #28]
 445 0266 3B68     		ldr	r3, [r7, #0]
 446 0268 9A42     		cmp	r2, r3
 447 026a E7D3     		bcc	.L22
 448              	.L21:
 161:../src/os/rt-thread/src/memheap.c **** 			}
 162:../src/os/rt-thread/src/memheap.c **** 		}
 163:../src/os/rt-thread/src/memheap.c **** 
 164:../src/os/rt-thread/src/memheap.c **** 		/* determine if the memory is available. */
 165:../src/os/rt-thread/src/memheap.c **** 		if (free_size >= size)
 449              		.loc 1 165 0 is_stmt 1
 450 026c FA69     		ldr	r2, [r7, #28]
 451 026e 3B68     		ldr	r3, [r7, #0]
 452 0270 9A42     		cmp	r2, r3
 453 0272 74D3     		bcc	.L23
 166:../src/os/rt-thread/src/memheap.c **** 		{
 167:../src/os/rt-thread/src/memheap.c **** 			/* a block that satisfies the request has been found. */
 168:../src/os/rt-thread/src/memheap.c **** 
 169:../src/os/rt-thread/src/memheap.c **** 			/* determine if the block needs to be split. */
 170:../src/os/rt-thread/src/memheap.c **** 			if (free_size >= (size + RT_MEMHEAP_SIZE + RT_MEMHEAP_MINIALLOC))
 454              		.loc 1 170 0
 455 0274 3B68     		ldr	r3, [r7, #0]
 456 0276 03F12402 		add	r2, r3, #36
 457 027a FB69     		ldr	r3, [r7, #28]
 458 027c 9A42     		cmp	r2, r3
 459 027e 46D8     		bhi	.L24
 460              	.LBB5:
 171:../src/os/rt-thread/src/memheap.c **** 			{
 172:../src/os/rt-thread/src/memheap.c **** 				struct rt_memheap_item *new_ptr;
 173:../src/os/rt-thread/src/memheap.c **** 
 174:../src/os/rt-thread/src/memheap.c **** 				/* split the block. */
 175:../src/os/rt-thread/src/memheap.c **** 				new_ptr =  (struct rt_memheap_item *)(((rt_uint8_t *)header_ptr) + size + RT_MEMHEAP_SIZE);
 461              		.loc 1 175 0
 462 0280 3B68     		ldr	r3, [r7, #0]
 463 0282 03F11803 		add	r3, r3, #24
 464 0286 BA69     		ldr	r2, [r7, #24]
 465 0288 D318     		adds	r3, r2, r3
 466 028a 3B61     		str	r3, [r7, #16]
 176:../src/os/rt-thread/src/memheap.c **** 
 177:../src/os/rt-thread/src/memheap.c **** 				RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("split: h[0x%08x] nm[0x%08x] pm[0x%08x] to n[0x%08x]", header_p
 178:../src/os/rt-thread/src/memheap.c **** 					header_ptr->next, header_ptr->prev,
 179:../src/os/rt-thread/src/memheap.c **** 					new_ptr));
 180:../src/os/rt-thread/src/memheap.c **** 
 181:../src/os/rt-thread/src/memheap.c **** 				/* mark the new block as a memory block and freed. */
 182:../src/os/rt-thread/src/memheap.c **** 				new_ptr->magic = RT_MEMHEAP_MAGIC;
 467              		.loc 1 182 0
 468 028c 3B69     		ldr	r3, [r7, #16]
 469 028e 3D4A     		ldr	r2, .L26+12
 470 0290 1A60     		str	r2, [r3, #0]
 183:../src/os/rt-thread/src/memheap.c **** 
 184:../src/os/rt-thread/src/memheap.c **** 				/* put the pool pointer into the new block. */
 185:../src/os/rt-thread/src/memheap.c **** 				new_ptr->pool_ptr = heap;
 471              		.loc 1 185 0
 472 0292 3B69     		ldr	r3, [r7, #16]
 473 0294 7A68     		ldr	r2, [r7, #4]
 474 0296 5A61     		str	r2, [r3, #20]
 186:../src/os/rt-thread/src/memheap.c **** 
 187:../src/os/rt-thread/src/memheap.c **** 				/* break down the block list */
 188:../src/os/rt-thread/src/memheap.c **** 				new_ptr->prev = header_ptr;
 475              		.loc 1 188 0
 476 0298 3B69     		ldr	r3, [r7, #16]
 477 029a BA69     		ldr	r2, [r7, #24]
 478 029c 9A60     		str	r2, [r3, #8]
 189:../src/os/rt-thread/src/memheap.c **** 				new_ptr->next = header_ptr->next;
 479              		.loc 1 189 0
 480 029e BB69     		ldr	r3, [r7, #24]
 481 02a0 5A68     		ldr	r2, [r3, #4]
 482 02a2 3B69     		ldr	r3, [r7, #16]
 483 02a4 5A60     		str	r2, [r3, #4]
 190:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next->prev = new_ptr;
 484              		.loc 1 190 0
 485 02a6 BB69     		ldr	r3, [r7, #24]
 486 02a8 5B68     		ldr	r3, [r3, #4]
 487 02aa 3A69     		ldr	r2, [r7, #16]
 488 02ac 9A60     		str	r2, [r3, #8]
 191:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next = new_ptr;
 489              		.loc 1 191 0
 490 02ae BB69     		ldr	r3, [r7, #24]
 491 02b0 3A69     		ldr	r2, [r7, #16]
 492 02b2 5A60     		str	r2, [r3, #4]
 192:../src/os/rt-thread/src/memheap.c **** 
 193:../src/os/rt-thread/src/memheap.c **** 				/* remove header ptr from free list */
 194:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next_free->prev_free = header_ptr->prev_free;
 493              		.loc 1 194 0
 494 02b4 BB69     		ldr	r3, [r7, #24]
 495 02b6 DB68     		ldr	r3, [r3, #12]
 496 02b8 BA69     		ldr	r2, [r7, #24]
 497 02ba 1269     		ldr	r2, [r2, #16]
 498 02bc 1A61     		str	r2, [r3, #16]
 195:../src/os/rt-thread/src/memheap.c **** 				header_ptr->prev_free->next_free = header_ptr->next_free;
 499              		.loc 1 195 0
 500 02be BB69     		ldr	r3, [r7, #24]
 501 02c0 1B69     		ldr	r3, [r3, #16]
 502 02c2 BA69     		ldr	r2, [r7, #24]
 503 02c4 D268     		ldr	r2, [r2, #12]
 504 02c6 DA60     		str	r2, [r3, #12]
 196:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next_free = RT_NULL;
 505              		.loc 1 196 0
 506 02c8 BB69     		ldr	r3, [r7, #24]
 507 02ca 4FF00002 		mov	r2, #0
 508 02ce DA60     		str	r2, [r3, #12]
 197:../src/os/rt-thread/src/memheap.c **** 				header_ptr->prev_free = RT_NULL;
 509              		.loc 1 197 0
 510 02d0 BB69     		ldr	r3, [r7, #24]
 511 02d2 4FF00002 		mov	r2, #0
 512 02d6 1A61     		str	r2, [r3, #16]
 198:../src/os/rt-thread/src/memheap.c **** 
 199:../src/os/rt-thread/src/memheap.c **** 				/* insert new_ptr to free list */
 200:../src/os/rt-thread/src/memheap.c **** 				new_ptr->next_free = heap->free_list->next_free;
 513              		.loc 1 200 0
 514 02d8 7B68     		ldr	r3, [r7, #4]
 515 02da 1B6A     		ldr	r3, [r3, #32]
 516 02dc DA68     		ldr	r2, [r3, #12]
 517 02de 3B69     		ldr	r3, [r7, #16]
 518 02e0 DA60     		str	r2, [r3, #12]
 201:../src/os/rt-thread/src/memheap.c **** 				new_ptr->prev_free = heap->free_list;
 519              		.loc 1 201 0
 520 02e2 7B68     		ldr	r3, [r7, #4]
 521 02e4 1A6A     		ldr	r2, [r3, #32]
 522 02e6 3B69     		ldr	r3, [r7, #16]
 523 02e8 1A61     		str	r2, [r3, #16]
 202:../src/os/rt-thread/src/memheap.c **** 				heap->free_list->next_free->prev_free = new_ptr;
 524              		.loc 1 202 0
 525 02ea 7B68     		ldr	r3, [r7, #4]
 526 02ec 1B6A     		ldr	r3, [r3, #32]
 527 02ee DB68     		ldr	r3, [r3, #12]
 528 02f0 3A69     		ldr	r2, [r7, #16]
 529 02f2 1A61     		str	r2, [r3, #16]
 203:../src/os/rt-thread/src/memheap.c **** 				heap->free_list->next_free = new_ptr;
 530              		.loc 1 203 0
 531 02f4 7B68     		ldr	r3, [r7, #4]
 532 02f6 1B6A     		ldr	r3, [r3, #32]
 533 02f8 3A69     		ldr	r2, [r7, #16]
 534 02fa DA60     		str	r2, [r3, #12]
 204:../src/os/rt-thread/src/memheap.c **** 				RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("new ptr: nf 0x%08x, pf 0x%08x",
 205:../src/os/rt-thread/src/memheap.c **** 						new_ptr->next_free, new_ptr->prev_free));
 206:../src/os/rt-thread/src/memheap.c **** 
 207:../src/os/rt-thread/src/memheap.c **** 				/* decrement the available byte count.  */
 208:../src/os/rt-thread/src/memheap.c **** 				heap->available_size = heap->available_size - size - RT_MEMHEAP_SIZE;
 535              		.loc 1 208 0
 536 02fc 7B68     		ldr	r3, [r7, #4]
 537 02fe 9A69     		ldr	r2, [r3, #24]
 538 0300 3B68     		ldr	r3, [r7, #0]
 539 0302 D31A     		subs	r3, r2, r3
 540 0304 A3F11802 		sub	r2, r3, #24
 541 0308 7B68     		ldr	r3, [r7, #4]
 542 030a 9A61     		str	r2, [r3, #24]
 543 030c 17E0     		b	.L25
 544              	.L24:
 545              	.LBE5:
 209:../src/os/rt-thread/src/memheap.c **** 			}
 210:../src/os/rt-thread/src/memheap.c **** 			else
 211:../src/os/rt-thread/src/memheap.c **** 			{
 212:../src/os/rt-thread/src/memheap.c **** 				/* decrement the entire free size from the available bytes count.  */
 213:../src/os/rt-thread/src/memheap.c **** 				heap->available_size = heap->available_size - free_size;
 546              		.loc 1 213 0
 547 030e 7B68     		ldr	r3, [r7, #4]
 548 0310 9A69     		ldr	r2, [r3, #24]
 549 0312 FB69     		ldr	r3, [r7, #28]
 550 0314 D21A     		subs	r2, r2, r3
 551 0316 7B68     		ldr	r3, [r7, #4]
 552 0318 9A61     		str	r2, [r3, #24]
 214:../src/os/rt-thread/src/memheap.c **** 
 215:../src/os/rt-thread/src/memheap.c **** 				/* remove header_ptr from free list */
 216:../src/os/rt-thread/src/memheap.c **** 				RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("one block: h[0x%08x], nf 0x%08x, pf 0x%08x", header_ptr,
 217:../src/os/rt-thread/src/memheap.c **** 					header_ptr->next_free, header_ptr->prev_free));
 218:../src/os/rt-thread/src/memheap.c **** 
 219:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next_free->prev_free = header_ptr->prev_free;
 553              		.loc 1 219 0
 554 031a BB69     		ldr	r3, [r7, #24]
 555 031c DB68     		ldr	r3, [r3, #12]
 556 031e BA69     		ldr	r2, [r7, #24]
 557 0320 1269     		ldr	r2, [r2, #16]
 558 0322 1A61     		str	r2, [r3, #16]
 220:../src/os/rt-thread/src/memheap.c **** 				header_ptr->prev_free->next_free = header_ptr->next_free;
 559              		.loc 1 220 0
 560 0324 BB69     		ldr	r3, [r7, #24]
 561 0326 1B69     		ldr	r3, [r3, #16]
 562 0328 BA69     		ldr	r2, [r7, #24]
 563 032a D268     		ldr	r2, [r2, #12]
 564 032c DA60     		str	r2, [r3, #12]
 221:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next_free = RT_NULL;
 565              		.loc 1 221 0
 566 032e BB69     		ldr	r3, [r7, #24]
 567 0330 4FF00002 		mov	r2, #0
 568 0334 DA60     		str	r2, [r3, #12]
 222:../src/os/rt-thread/src/memheap.c **** 				header_ptr->prev_free = RT_NULL;
 569              		.loc 1 222 0
 570 0336 BB69     		ldr	r3, [r7, #24]
 571 0338 4FF00002 		mov	r2, #0
 572 033c 1A61     		str	r2, [r3, #16]
 573              	.L25:
 223:../src/os/rt-thread/src/memheap.c **** 			}
 224:../src/os/rt-thread/src/memheap.c **** 
 225:../src/os/rt-thread/src/memheap.c **** 			/* release lock */
 226:../src/os/rt-thread/src/memheap.c **** 			rt_mutex_release(&(heap->lock));
 574              		.loc 1 226 0
 575 033e 7B68     		ldr	r3, [r7, #4]
 576 0340 03F13C03 		add	r3, r3, #60
 577 0344 1846     		mov	r0, r3
 578 0346 FFF7FEFF 		bl	rt_mutex_release
 227:../src/os/rt-thread/src/memheap.c **** 			
 228:../src/os/rt-thread/src/memheap.c **** 			/* Mark the allocated block as not available.  */
 229:../src/os/rt-thread/src/memheap.c **** 			header_ptr->magic |= RT_MEMHEAP_USED;
 579              		.loc 1 229 0
 580 034a BB69     		ldr	r3, [r7, #24]
 581 034c 1B68     		ldr	r3, [r3, #0]
 582 034e 43F00102 		orr	r2, r3, #1
 583 0352 BB69     		ldr	r3, [r7, #24]
 584 0354 1A60     		str	r2, [r3, #0]
 230:../src/os/rt-thread/src/memheap.c **** 
 231:../src/os/rt-thread/src/memheap.c **** 			/* Return a memory address to the caller.  */
 232:../src/os/rt-thread/src/memheap.c **** 			RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("am: m[0x%08x], h[0x%08x], size: %d",
 585              		.loc 1 232 0
 586 0356 BB69     		ldr	r3, [r7, #24]
 587 0358 03F11803 		add	r3, r3, #24
 588 035c 07E0     		b	.L19
 589              	.L23:
 233:../src/os/rt-thread/src/memheap.c **** 					(void *)((rt_uint8_t *)header_ptr + RT_MEMHEAP_SIZE), header_ptr, size);
 234:../src/os/rt-thread/src/memheap.c **** 
 235:../src/os/rt-thread/src/memheap.c **** 			return (void *)((rt_uint8_t *)header_ptr + RT_MEMHEAP_SIZE));
 236:../src/os/rt-thread/src/memheap.c **** 		}
 237:../src/os/rt-thread/src/memheap.c **** 
 238:../src/os/rt-thread/src/memheap.c **** 		/* release lock */
 239:../src/os/rt-thread/src/memheap.c **** 		rt_mutex_release(&(heap->lock));
 590              		.loc 1 239 0
 591 035e 7B68     		ldr	r3, [r7, #4]
 592 0360 03F13C03 		add	r3, r3, #60
 593 0364 1846     		mov	r0, r3
 594 0366 FFF7FEFF 		bl	rt_mutex_release
 595              	.L17:
 240:../src/os/rt-thread/src/memheap.c **** 	}
 241:../src/os/rt-thread/src/memheap.c **** 
 242:../src/os/rt-thread/src/memheap.c **** 	RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("allocate memory: failed\n"));
 243:../src/os/rt-thread/src/memheap.c **** 
 244:../src/os/rt-thread/src/memheap.c ****     /* Return the completion status.  */
 245:../src/os/rt-thread/src/memheap.c ****     return RT_NULL;
 596              		.loc 1 245 0
 597 036a 4FF00003 		mov	r3, #0
 598              	.L19:
 246:../src/os/rt-thread/src/memheap.c **** }
 599              		.loc 1 246 0
 600 036e 1846     		mov	r0, r3
 601 0370 07F12007 		add	r7, r7, #32
 602 0374 BD46     		mov	sp, r7
 603 0376 80BD     		pop	{r7, pc}
 604              	.L27:
 605              		.align	2
 606              	.L26:
 607 0378 00000000 		.word	.LC0
 608 037c 3C000000 		.word	.LC3
 609 0380 98000000 		.word	__FUNCTION__.4812
 610 0384 A01EA01E 		.word	513810080
 611              		.cfi_endproc
 612              	.LFE7:
 614              		.section	.rodata
 615              		.align	2
 616              	.LC4:
 617 004c 28686561 		.ascii	"(header_ptr->magic & RT_MEMHEAP_MASK) == RT_MEMHEAP"
 617      6465725F 
 617      7074722D 
 617      3E6D6167 
 617      69632026 
 618 007f 5F4D4147 		.ascii	"_MAGIC\000"
 618      494300
 619              		.text
 620              		.align	2
 621              		.global	rt_memheap_free
 622              		.thumb
 623              		.thumb_func
 625              	rt_memheap_free:
 626              	.LFB8:
 247:../src/os/rt-thread/src/memheap.c **** RTM_EXPORT(rt_memheap_alloc);
 248:../src/os/rt-thread/src/memheap.c **** 
 249:../src/os/rt-thread/src/memheap.c **** void rt_memheap_free(void *ptr)
 250:../src/os/rt-thread/src/memheap.c **** {
 627              		.loc 1 250 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 32
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0388 80B5     		push	{r7, lr}
 632              	.LCFI9:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
 635              		.cfi_offset 14, -4
 636 038a 88B0     		sub	sp, sp, #32
 637              	.LCFI10:
 638              		.cfi_def_cfa_offset 40
 639 038c 00AF     		add	r7, sp, #0
 640              	.LCFI11:
 641              		.cfi_def_cfa_register 7
 642 038e 7860     		str	r0, [r7, #4]
 251:../src/os/rt-thread/src/memheap.c **** 	rt_err_t result;
 252:../src/os/rt-thread/src/memheap.c **** 	struct rt_memheap *heap;
 253:../src/os/rt-thread/src/memheap.c **** 	struct rt_memheap_item *header_ptr, *new_ptr;
 254:../src/os/rt-thread/src/memheap.c **** 	rt_uint32_t insert_header;
 255:../src/os/rt-thread/src/memheap.c **** 
 256:../src/os/rt-thread/src/memheap.c **** 	/* set initial status as OK */
 257:../src/os/rt-thread/src/memheap.c **** 	insert_header = 1;
 643              		.loc 1 257 0
 644 0390 4FF00103 		mov	r3, #1
 645 0394 BB61     		str	r3, [r7, #24]
 258:../src/os/rt-thread/src/memheap.c **** 	new_ptr = RT_NULL;
 646              		.loc 1 258 0
 647 0396 4FF00003 		mov	r3, #0
 648 039a 7B61     		str	r3, [r7, #20]
 259:../src/os/rt-thread/src/memheap.c **** 	header_ptr = (struct rt_memheap_item *)((rt_uint8_t *)ptr - RT_MEMHEAP_SIZE);
 649              		.loc 1 259 0
 650 039c 7B68     		ldr	r3, [r7, #4]
 651 039e A3F11803 		sub	r3, r3, #24
 652 03a2 FB61     		str	r3, [r7, #28]
 260:../src/os/rt-thread/src/memheap.c **** 
 261:../src/os/rt-thread/src/memheap.c **** 	RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("free memory: m[0x%08x], h[0x%08x]", ptr, header_ptr));
 262:../src/os/rt-thread/src/memheap.c **** 
 263:../src/os/rt-thread/src/memheap.c **** 	/* check magic */
 264:../src/os/rt-thread/src/memheap.c **** 	RT_ASSERT((header_ptr->magic & RT_MEMHEAP_MASK) == RT_MEMHEAP_MAGIC);
 653              		.loc 1 264 0
 654 03a4 FB69     		ldr	r3, [r7, #28]
 655 03a6 1B68     		ldr	r3, [r3, #0]
 656 03a8 23F00102 		bic	r2, r3, #1
 657 03ac 494B     		ldr	r3, .L36
 658 03ae 9A42     		cmp	r2, r3
 659 03b0 0DD0     		beq	.L29
 660              	.LBB6:
 661              		.loc 1 264 0 is_stmt 0 discriminator 1
 662 03b2 4FF00003 		mov	r3, #0
 663 03b6 FB72     		strb	r3, [r7, #11]
 664 03b8 4748     		ldr	r0, .L36+4
 665 03ba 4849     		ldr	r1, .L36+8
 666 03bc 484A     		ldr	r2, .L36+12
 667 03be 4FF48473 		mov	r3, #264
 668 03c2 FFF7FEFF 		bl	rt_kprintf
 669              	.L30:
 670              		.loc 1 264 0 discriminator 2
 671 03c6 FB7A     		ldrb	r3, [r7, #11]
 672 03c8 DBB2     		uxtb	r3, r3
 673 03ca 002B     		cmp	r3, #0
 674 03cc FBD0     		beq	.L30
 675              	.L29:
 676              	.LBE6:
 265:../src/os/rt-thread/src/memheap.c **** 
 266:../src/os/rt-thread/src/memheap.c **** 	/* get pool ptr */
 267:../src/os/rt-thread/src/memheap.c **** 	heap = header_ptr->pool_ptr;
 677              		.loc 1 267 0 is_stmt 1
 678 03ce FB69     		ldr	r3, [r7, #28]
 679 03d0 5B69     		ldr	r3, [r3, #20]
 680 03d2 3B61     		str	r3, [r7, #16]
 268:../src/os/rt-thread/src/memheap.c **** 
 269:../src/os/rt-thread/src/memheap.c **** 	/* lock memheap */
 270:../src/os/rt-thread/src/memheap.c **** 	result = rt_mutex_take(&(heap->lock), RT_WAITING_FOREVER);
 681              		.loc 1 270 0
 682 03d4 3B69     		ldr	r3, [r7, #16]
 683 03d6 03F13C03 		add	r3, r3, #60
 684 03da 1846     		mov	r0, r3
 685 03dc 4FF0FF31 		mov	r1, #-1
 686 03e0 FFF7FEFF 		bl	rt_mutex_take
 687 03e4 F860     		str	r0, [r7, #12]
 271:../src/os/rt-thread/src/memheap.c **** 	if (result != RT_EOK)
 688              		.loc 1 271 0
 689 03e6 FB68     		ldr	r3, [r7, #12]
 690 03e8 002B     		cmp	r3, #0
 691 03ea 03D0     		beq	.L31
 272:../src/os/rt-thread/src/memheap.c **** 	{
 273:../src/os/rt-thread/src/memheap.c **** 		rt_set_errno(result);
 692              		.loc 1 273 0
 693 03ec F868     		ldr	r0, [r7, #12]
 694 03ee FFF7FEFF 		bl	rt_set_errno
 274:../src/os/rt-thread/src/memheap.c **** 		return ;
 695              		.loc 1 274 0
 696 03f2 6BE0     		b	.L28
 697              	.L31:
 275:../src/os/rt-thread/src/memheap.c **** 	}
 276:../src/os/rt-thread/src/memheap.c **** 
 277:../src/os/rt-thread/src/memheap.c **** 	/* Mark the memory as available. */
 278:../src/os/rt-thread/src/memheap.c **** 	header_ptr->magic &= ~RT_MEMHEAP_USED;
 698              		.loc 1 278 0
 699 03f4 FB69     		ldr	r3, [r7, #28]
 700 03f6 1B68     		ldr	r3, [r3, #0]
 701 03f8 23F00102 		bic	r2, r3, #1
 702 03fc FB69     		ldr	r3, [r7, #28]
 703 03fe 1A60     		str	r2, [r3, #0]
 279:../src/os/rt-thread/src/memheap.c **** 
 280:../src/os/rt-thread/src/memheap.c **** 	/* Adjust the available number of bytes. */
 281:../src/os/rt-thread/src/memheap.c **** 	heap->available_size =  heap->available_size +
 704              		.loc 1 281 0
 705 0400 3B69     		ldr	r3, [r7, #16]
 706 0402 9A69     		ldr	r2, [r3, #24]
 282:../src/os/rt-thread/src/memheap.c **** 			((rt_uint32_t)(header_ptr->next) -
 707              		.loc 1 282 0
 708 0404 FB69     		ldr	r3, [r7, #28]
 709 0406 5B68     		ldr	r3, [r3, #4]
 710 0408 1946     		mov	r1, r3
 283:../src/os/rt-thread/src/memheap.c **** 			(rt_uint32_t)header_ptr) - RT_MEMHEAP_SIZE;
 711              		.loc 1 283 0
 712 040a FB69     		ldr	r3, [r7, #28]
 282:../src/os/rt-thread/src/memheap.c **** 			((rt_uint32_t)(header_ptr->next) -
 713              		.loc 1 282 0
 714 040c CB1A     		subs	r3, r1, r3
 281:../src/os/rt-thread/src/memheap.c **** 	heap->available_size =  heap->available_size +
 715              		.loc 1 281 0
 716 040e D318     		adds	r3, r2, r3
 717              		.loc 1 283 0
 718 0410 A3F11802 		sub	r2, r3, #24
 281:../src/os/rt-thread/src/memheap.c **** 	heap->available_size =  heap->available_size +
 719              		.loc 1 281 0
 720 0414 3B69     		ldr	r3, [r7, #16]
 721 0416 9A61     		str	r2, [r3, #24]
 284:../src/os/rt-thread/src/memheap.c **** 
 285:../src/os/rt-thread/src/memheap.c **** 	/* Determine if the block can be merged with the previous neighbor. */
 286:../src/os/rt-thread/src/memheap.c **** 	if (!RT_MEMHEAP_IS_USED(header_ptr->prev))
 722              		.loc 1 286 0
 723 0418 FB69     		ldr	r3, [r7, #28]
 724 041a 9B68     		ldr	r3, [r3, #8]
 725 041c 1B68     		ldr	r3, [r3, #0]
 726 041e 03F00103 		and	r3, r3, #1
 727 0422 002B     		cmp	r3, #0
 728 0424 15D1     		bne	.L33
 287:../src/os/rt-thread/src/memheap.c **** 	{
 288:../src/os/rt-thread/src/memheap.c **** 		RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("merge: left node 0x%08x", header_ptr->prev));
 289:../src/os/rt-thread/src/memheap.c **** 
 290:../src/os/rt-thread/src/memheap.c **** 		/* adjust the available number of bytes. */
 291:../src/os/rt-thread/src/memheap.c **** 		heap->available_size = heap->available_size + RT_MEMHEAP_SIZE;
 729              		.loc 1 291 0
 730 0426 3B69     		ldr	r3, [r7, #16]
 731 0428 9B69     		ldr	r3, [r3, #24]
 732 042a 03F11802 		add	r2, r3, #24
 733 042e 3B69     		ldr	r3, [r7, #16]
 734 0430 9A61     		str	r2, [r3, #24]
 292:../src/os/rt-thread/src/memheap.c **** 
 293:../src/os/rt-thread/src/memheap.c **** 		/* yes, merge block with previous neighbor. */
 294:../src/os/rt-thread/src/memheap.c **** 		(header_ptr->prev)->next = header_ptr->next;
 735              		.loc 1 294 0
 736 0432 FB69     		ldr	r3, [r7, #28]
 737 0434 9B68     		ldr	r3, [r3, #8]
 738 0436 FA69     		ldr	r2, [r7, #28]
 739 0438 5268     		ldr	r2, [r2, #4]
 740 043a 5A60     		str	r2, [r3, #4]
 295:../src/os/rt-thread/src/memheap.c **** 		(header_ptr->next)->prev = header_ptr->prev;
 741              		.loc 1 295 0
 742 043c FB69     		ldr	r3, [r7, #28]
 743 043e 5B68     		ldr	r3, [r3, #4]
 744 0440 FA69     		ldr	r2, [r7, #28]
 745 0442 9268     		ldr	r2, [r2, #8]
 746 0444 9A60     		str	r2, [r3, #8]
 296:../src/os/rt-thread/src/memheap.c **** 
 297:../src/os/rt-thread/src/memheap.c **** 		/* move header pointer to previous. */
 298:../src/os/rt-thread/src/memheap.c **** 		header_ptr = header_ptr->prev;
 747              		.loc 1 298 0
 748 0446 FB69     		ldr	r3, [r7, #28]
 749 0448 9B68     		ldr	r3, [r3, #8]
 750 044a FB61     		str	r3, [r7, #28]
 299:../src/os/rt-thread/src/memheap.c **** 		/* don't insert header to free list */
 300:../src/os/rt-thread/src/memheap.c **** 		insert_header = 0;
 751              		.loc 1 300 0
 752 044c 4FF00003 		mov	r3, #0
 753 0450 BB61     		str	r3, [r7, #24]
 754              	.L33:
 301:../src/os/rt-thread/src/memheap.c **** 	}
 302:../src/os/rt-thread/src/memheap.c **** 
 303:../src/os/rt-thread/src/memheap.c **** 	/* determine if the block can be merged with the next neighbor. */
 304:../src/os/rt-thread/src/memheap.c **** 	if (!RT_MEMHEAP_IS_USED(header_ptr->next))
 755              		.loc 1 304 0
 756 0452 FB69     		ldr	r3, [r7, #28]
 757 0454 5B68     		ldr	r3, [r3, #4]
 758 0456 1B68     		ldr	r3, [r3, #0]
 759 0458 03F00103 		and	r3, r3, #1
 760 045c 002B     		cmp	r3, #0
 761 045e 1AD1     		bne	.L34
 305:../src/os/rt-thread/src/memheap.c **** 	{
 306:../src/os/rt-thread/src/memheap.c **** 		/* adjust the available number of bytes. */
 307:../src/os/rt-thread/src/memheap.c **** 		heap->available_size =  heap->available_size + RT_MEMHEAP_SIZE;
 762              		.loc 1 307 0
 763 0460 3B69     		ldr	r3, [r7, #16]
 764 0462 9B69     		ldr	r3, [r3, #24]
 765 0464 03F11802 		add	r2, r3, #24
 766 0468 3B69     		ldr	r3, [r7, #16]
 767 046a 9A61     		str	r2, [r3, #24]
 308:../src/os/rt-thread/src/memheap.c **** 
 309:../src/os/rt-thread/src/memheap.c **** 		/* merge block with next neighbor. */
 310:../src/os/rt-thread/src/memheap.c **** 		new_ptr =  header_ptr->next;
 768              		.loc 1 310 0
 769 046c FB69     		ldr	r3, [r7, #28]
 770 046e 5B68     		ldr	r3, [r3, #4]
 771 0470 7B61     		str	r3, [r7, #20]
 311:../src/os/rt-thread/src/memheap.c **** 
 312:../src/os/rt-thread/src/memheap.c **** 		RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("merge: right node 0x%08x, nf 0x%08x, pf 0x%08x",
 313:../src/os/rt-thread/src/memheap.c **** 				new_ptr, new_ptr->next_free, new_ptr->prev_free));
 314:../src/os/rt-thread/src/memheap.c **** 
 315:../src/os/rt-thread/src/memheap.c **** 		new_ptr->next->prev = header_ptr;
 772              		.loc 1 315 0
 773 0472 7B69     		ldr	r3, [r7, #20]
 774 0474 5B68     		ldr	r3, [r3, #4]
 775 0476 FA69     		ldr	r2, [r7, #28]
 776 0478 9A60     		str	r2, [r3, #8]
 316:../src/os/rt-thread/src/memheap.c **** 		header_ptr->next = new_ptr->next;
 777              		.loc 1 316 0
 778 047a 7B69     		ldr	r3, [r7, #20]
 779 047c 5A68     		ldr	r2, [r3, #4]
 780 047e FB69     		ldr	r3, [r7, #28]
 781 0480 5A60     		str	r2, [r3, #4]
 317:../src/os/rt-thread/src/memheap.c **** 
 318:../src/os/rt-thread/src/memheap.c **** 		/* remove new ptr from free list */
 319:../src/os/rt-thread/src/memheap.c **** 		new_ptr->next_free->prev_free = new_ptr->prev_free;
 782              		.loc 1 319 0
 783 0482 7B69     		ldr	r3, [r7, #20]
 784 0484 DB68     		ldr	r3, [r3, #12]
 785 0486 7A69     		ldr	r2, [r7, #20]
 786 0488 1269     		ldr	r2, [r2, #16]
 787 048a 1A61     		str	r2, [r3, #16]
 320:../src/os/rt-thread/src/memheap.c **** 		new_ptr->prev_free->next_free = new_ptr->next_free;
 788              		.loc 1 320 0
 789 048c 7B69     		ldr	r3, [r7, #20]
 790 048e 1B69     		ldr	r3, [r3, #16]
 791 0490 7A69     		ldr	r2, [r7, #20]
 792 0492 D268     		ldr	r2, [r2, #12]
 793 0494 DA60     		str	r2, [r3, #12]
 794              	.L34:
 321:../src/os/rt-thread/src/memheap.c **** 	}
 322:../src/os/rt-thread/src/memheap.c **** 
 323:../src/os/rt-thread/src/memheap.c **** 	if (insert_header)
 795              		.loc 1 323 0
 796 0496 BB69     		ldr	r3, [r7, #24]
 797 0498 002B     		cmp	r3, #0
 798 049a 11D0     		beq	.L35
 324:../src/os/rt-thread/src/memheap.c **** 	{
 325:../src/os/rt-thread/src/memheap.c **** 		/* no left merge, insert to free list */
 326:../src/os/rt-thread/src/memheap.c **** 		header_ptr->next_free = heap->free_list->next_free;
 799              		.loc 1 326 0
 800 049c 3B69     		ldr	r3, [r7, #16]
 801 049e 1B6A     		ldr	r3, [r3, #32]
 802 04a0 DA68     		ldr	r2, [r3, #12]
 803 04a2 FB69     		ldr	r3, [r7, #28]
 804 04a4 DA60     		str	r2, [r3, #12]
 327:../src/os/rt-thread/src/memheap.c **** 		header_ptr->prev_free = heap->free_list;
 805              		.loc 1 327 0
 806 04a6 3B69     		ldr	r3, [r7, #16]
 807 04a8 1A6A     		ldr	r2, [r3, #32]
 808 04aa FB69     		ldr	r3, [r7, #28]
 809 04ac 1A61     		str	r2, [r3, #16]
 328:../src/os/rt-thread/src/memheap.c **** 		heap->free_list->next_free->prev_free = header_ptr;
 810              		.loc 1 328 0
 811 04ae 3B69     		ldr	r3, [r7, #16]
 812 04b0 1B6A     		ldr	r3, [r3, #32]
 813 04b2 DB68     		ldr	r3, [r3, #12]
 814 04b4 FA69     		ldr	r2, [r7, #28]
 815 04b6 1A61     		str	r2, [r3, #16]
 329:../src/os/rt-thread/src/memheap.c **** 		heap->free_list->next_free = header_ptr;
 816              		.loc 1 329 0
 817 04b8 3B69     		ldr	r3, [r7, #16]
 818 04ba 1B6A     		ldr	r3, [r3, #32]
 819 04bc FA69     		ldr	r2, [r7, #28]
 820 04be DA60     		str	r2, [r3, #12]
 821              	.L35:
 330:../src/os/rt-thread/src/memheap.c **** 
 331:../src/os/rt-thread/src/memheap.c **** 		RT_DEBUG_LOG(RT_DEBUG_MEMHEAP, ("insert to free list: nf 0x%08x, pf 0x%08x",
 332:../src/os/rt-thread/src/memheap.c **** 				header_ptr->next_free, header_ptr->prev_free));
 333:../src/os/rt-thread/src/memheap.c **** 	}
 334:../src/os/rt-thread/src/memheap.c **** 
 335:../src/os/rt-thread/src/memheap.c **** 	/* release lock */
 336:../src/os/rt-thread/src/memheap.c **** 	rt_mutex_release(&(heap->lock));
 822              		.loc 1 336 0
 823 04c0 3B69     		ldr	r3, [r7, #16]
 824 04c2 03F13C03 		add	r3, r3, #60
 825 04c6 1846     		mov	r0, r3
 826 04c8 FFF7FEFF 		bl	rt_mutex_release
 827              	.L28:
 337:../src/os/rt-thread/src/memheap.c **** }
 828              		.loc 1 337 0
 829 04cc 07F12007 		add	r7, r7, #32
 830 04d0 BD46     		mov	sp, r7
 831 04d2 80BD     		pop	{r7, pc}
 832              	.L37:
 833              		.align	2
 834              	.L36:
 835 04d4 A01EA01E 		.word	513810080
 836 04d8 00000000 		.word	.LC0
 837 04dc 4C000000 		.word	.LC4
 838 04e0 88000000 		.word	__FUNCTION__.4829
 839              		.cfi_endproc
 840              	.LFE8:
 842              		.section	.rodata
 843 0086 0000     		.align	2
 846              	__FUNCTION__.4829:
 847 0088 72745F6D 		.ascii	"rt_memheap_free\000"
 847      656D6865 
 847      61705F66 
 847      72656500 
 848              		.align	2
 851              	__FUNCTION__.4812:
 852 0098 72745F6D 		.ascii	"rt_memheap_alloc\000"
 852      656D6865 
 852      61705F61 
 852      6C6C6F63 
 852      00
 853 00a9 000000   		.align	2
 856              	__FUNCTION__.4800:
 857 00ac 72745F6D 		.ascii	"rt_memheap_detach\000"
 857      656D6865 
 857      61705F64 
 857      65746163 
 857      6800
 858 00be 0000     		.align	2
 861              	__FUNCTION__.4792:
 862 00c0 72745F6D 		.ascii	"rt_memheap_init\000"
 862      656D6865 
 862      61705F69 
 862      6E697400 
 863              		.text
 864              	.Letext0:
 865              		.file 2 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 memheap.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:19     .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:26     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:31     .text:00000000 rt_memheap_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:239    .text:0000014c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:861    .rodata:000000c0 __FUNCTION__.4792
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:252    .text:00000160 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:257    .text:00000160 rt_memheap_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:315    .text:000001ac $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:856    .rodata:000000ac __FUNCTION__.4800
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:326    .text:000001b8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:331    .text:000001b8 rt_memheap_alloc
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:607    .text:00000378 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:851    .rodata:00000098 __FUNCTION__.4812
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:620    .text:00000388 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:625    .text:00000388 rt_memheap_free
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:835    .text:000004d4 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccbUrj4a.s:846    .rodata:00000088 __FUNCTION__.4829
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.5a4bd5c079694966fb1e9ee3a4751929
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_kprintf
rt_object_init
rt_mutex_init
rt_object_detach
rt_mutex_take
rt_set_errno
rt_mutex_release
