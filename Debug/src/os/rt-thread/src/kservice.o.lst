   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"kservice.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	_errno:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	_console_device:
  24 0004 00000000 		.space	4
  25              		.text
  26              		.align	2
  27              		.global	rt_get_errno
  28              		.thumb
  29              		.thumb_func
  31              	rt_get_errno:
  32              	.LFB5:
  33              		.file 1 "../src/os/rt-thread/src/kservice.c"
   1:../src/os/rt-thread/src/kservice.c **** /*
   2:../src/os/rt-thread/src/kservice.c ****  * File      : kservice.c
   3:../src/os/rt-thread/src/kservice.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/kservice.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/kservice.c ****  *
   6:../src/os/rt-thread/src/kservice.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/kservice.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/kservice.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/kservice.c ****  *
  10:../src/os/rt-thread/src/kservice.c ****  * Change Logs:
  11:../src/os/rt-thread/src/kservice.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/kservice.c ****  * 2006-03-16     Bernard      the first version
  13:../src/os/rt-thread/src/kservice.c ****  * 2006-05-25     Bernard      rewrite vsprintf
  14:../src/os/rt-thread/src/kservice.c ****  * 2006-08-10     Bernard      add rt_show_version
  15:../src/os/rt-thread/src/kservice.c ****  * 2010-03-17     Bernard      remove rt_strlcpy function
  16:../src/os/rt-thread/src/kservice.c ****  *                             fix gcc compiling issue.
  17:../src/os/rt-thread/src/kservice.c ****  * 2010-04-15     Bernard      remove weak definition on ICCM16C compiler
  18:../src/os/rt-thread/src/kservice.c ****  * 2012-07-18     Arda         add the alignment display for signed integer
  19:../src/os/rt-thread/src/kservice.c ****  * 2012-11-23     Bernard      fix IAR compiler error. 
  20:../src/os/rt-thread/src/kservice.c ****  */
  21:../src/os/rt-thread/src/kservice.c **** 
  22:../src/os/rt-thread/src/kservice.c **** #include <rtthread.h>
  23:../src/os/rt-thread/src/kservice.c **** #include <rthw.h>
  24:../src/os/rt-thread/src/kservice.c **** 
  25:../src/os/rt-thread/src/kservice.c **** /* use precision */
  26:../src/os/rt-thread/src/kservice.c **** #define RT_PRINTF_PRECISION
  27:../src/os/rt-thread/src/kservice.c **** 
  28:../src/os/rt-thread/src/kservice.c **** /**
  29:../src/os/rt-thread/src/kservice.c ****  * @addtogroup KernelService
  30:../src/os/rt-thread/src/kservice.c ****  */
  31:../src/os/rt-thread/src/kservice.c **** 
  32:../src/os/rt-thread/src/kservice.c **** /*@{*/
  33:../src/os/rt-thread/src/kservice.c **** 
  34:../src/os/rt-thread/src/kservice.c **** /* global errno in RT-Thread */
  35:../src/os/rt-thread/src/kservice.c **** static volatile int _errno;
  36:../src/os/rt-thread/src/kservice.c **** 
  37:../src/os/rt-thread/src/kservice.c **** #if defined(RT_USING_DEVICE) && defined(RT_USING_CONSOLE)
  38:../src/os/rt-thread/src/kservice.c **** static rt_device_t _console_device = RT_NULL;
  39:../src/os/rt-thread/src/kservice.c **** #endif
  40:../src/os/rt-thread/src/kservice.c **** 
  41:../src/os/rt-thread/src/kservice.c **** /*
  42:../src/os/rt-thread/src/kservice.c ****  * This function will get errno
  43:../src/os/rt-thread/src/kservice.c ****  *
  44:../src/os/rt-thread/src/kservice.c ****  * @return errno
  45:../src/os/rt-thread/src/kservice.c ****  */
  46:../src/os/rt-thread/src/kservice.c **** rt_err_t rt_get_errno(void)
  47:../src/os/rt-thread/src/kservice.c **** {
  34              		.loc 1 47 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 8
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 16
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  48:../src/os/rt-thread/src/kservice.c **** 	rt_thread_t tid;
  49:../src/os/rt-thread/src/kservice.c **** 
  50:../src/os/rt-thread/src/kservice.c **** 	if (rt_interrupt_get_nest() != 0)
  49              		.loc 1 50 0
  50 0006 FFF7FEFF 		bl	rt_interrupt_get_nest
  51 000a 0346     		mov	r3, r0
  52 000c 002B     		cmp	r3, #0
  53 000e 02D0     		beq	.L2
  51:../src/os/rt-thread/src/kservice.c **** 	{
  52:../src/os/rt-thread/src/kservice.c **** 		/* it's in interrupt context */
  53:../src/os/rt-thread/src/kservice.c **** 		return _errno;
  54              		.loc 1 53 0
  55 0010 094B     		ldr	r3, .L5
  56 0012 1B68     		ldr	r3, [r3, #0]
  57 0014 0AE0     		b	.L3
  58              	.L2:
  54:../src/os/rt-thread/src/kservice.c **** 	}
  55:../src/os/rt-thread/src/kservice.c **** 
  56:../src/os/rt-thread/src/kservice.c **** 	tid = rt_thread_self();
  59              		.loc 1 56 0
  60 0016 FFF7FEFF 		bl	rt_thread_self
  61 001a 7860     		str	r0, [r7, #4]
  57:../src/os/rt-thread/src/kservice.c **** 	if (tid == RT_NULL)
  62              		.loc 1 57 0
  63 001c 7B68     		ldr	r3, [r7, #4]
  64 001e 002B     		cmp	r3, #0
  65 0020 02D1     		bne	.L4
  58:../src/os/rt-thread/src/kservice.c **** 		return _errno;
  66              		.loc 1 58 0
  67 0022 054B     		ldr	r3, .L5
  68 0024 1B68     		ldr	r3, [r3, #0]
  69 0026 01E0     		b	.L3
  70              	.L4:
  59:../src/os/rt-thread/src/kservice.c **** 
  60:../src/os/rt-thread/src/kservice.c **** 	return tid->error;
  71              		.loc 1 60 0
  72 0028 7B68     		ldr	r3, [r7, #4]
  73 002a DB6A     		ldr	r3, [r3, #44]
  74              	.L3:
  61:../src/os/rt-thread/src/kservice.c **** }
  75              		.loc 1 61 0
  76 002c 1846     		mov	r0, r3
  77 002e 07F10807 		add	r7, r7, #8
  78 0032 BD46     		mov	sp, r7
  79 0034 80BD     		pop	{r7, pc}
  80              	.L6:
  81 0036 00BF     		.align	2
  82              	.L5:
  83 0038 00000000 		.word	_errno
  84              		.cfi_endproc
  85              	.LFE5:
  87              		.align	2
  88              		.global	rt_set_errno
  89              		.thumb
  90              		.thumb_func
  92              	rt_set_errno:
  93              	.LFB6:
  62:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_get_errno);
  63:../src/os/rt-thread/src/kservice.c **** 
  64:../src/os/rt-thread/src/kservice.c **** /*
  65:../src/os/rt-thread/src/kservice.c ****  * This function will set errno
  66:../src/os/rt-thread/src/kservice.c ****  *
  67:../src/os/rt-thread/src/kservice.c ****  * @param error the errno shall be set
  68:../src/os/rt-thread/src/kservice.c ****  */
  69:../src/os/rt-thread/src/kservice.c **** void rt_set_errno(rt_err_t error)
  70:../src/os/rt-thread/src/kservice.c **** {
  94              		.loc 1 70 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 16
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 003c 80B5     		push	{r7, lr}
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 003e 84B0     		sub	sp, sp, #16
 104              	.LCFI4:
 105              		.cfi_def_cfa_offset 24
 106 0040 00AF     		add	r7, sp, #0
 107              	.LCFI5:
 108              		.cfi_def_cfa_register 7
 109 0042 7860     		str	r0, [r7, #4]
  71:../src/os/rt-thread/src/kservice.c **** 	rt_thread_t tid;
  72:../src/os/rt-thread/src/kservice.c **** 
  73:../src/os/rt-thread/src/kservice.c **** 	if (rt_interrupt_get_nest() != 0)
 110              		.loc 1 73 0
 111 0044 FFF7FEFF 		bl	rt_interrupt_get_nest
 112 0048 0346     		mov	r3, r0
 113 004a 002B     		cmp	r3, #0
 114 004c 03D0     		beq	.L8
  74:../src/os/rt-thread/src/kservice.c **** 	{
  75:../src/os/rt-thread/src/kservice.c **** 		/* it's in interrupt context */
  76:../src/os/rt-thread/src/kservice.c **** 		_errno = error;
 115              		.loc 1 76 0
 116 004e 0A4B     		ldr	r3, .L11
 117 0050 7A68     		ldr	r2, [r7, #4]
 118 0052 1A60     		str	r2, [r3, #0]
  77:../src/os/rt-thread/src/kservice.c **** 
  78:../src/os/rt-thread/src/kservice.c **** 		return;
 119              		.loc 1 78 0
 120 0054 0CE0     		b	.L7
 121              	.L8:
  79:../src/os/rt-thread/src/kservice.c **** 	}
  80:../src/os/rt-thread/src/kservice.c **** 
  81:../src/os/rt-thread/src/kservice.c **** 	tid = rt_thread_self();
 122              		.loc 1 81 0
 123 0056 FFF7FEFF 		bl	rt_thread_self
 124 005a F860     		str	r0, [r7, #12]
  82:../src/os/rt-thread/src/kservice.c **** 	if (tid == RT_NULL)
 125              		.loc 1 82 0
 126 005c FB68     		ldr	r3, [r7, #12]
 127 005e 002B     		cmp	r3, #0
 128 0060 03D1     		bne	.L10
  83:../src/os/rt-thread/src/kservice.c **** 	{
  84:../src/os/rt-thread/src/kservice.c **** 		_errno = error;
 129              		.loc 1 84 0
 130 0062 054B     		ldr	r3, .L11
 131 0064 7A68     		ldr	r2, [r7, #4]
 132 0066 1A60     		str	r2, [r3, #0]
  85:../src/os/rt-thread/src/kservice.c **** 		
  86:../src/os/rt-thread/src/kservice.c **** 		return;
 133              		.loc 1 86 0
 134 0068 02E0     		b	.L7
 135              	.L10:
  87:../src/os/rt-thread/src/kservice.c **** 	}
  88:../src/os/rt-thread/src/kservice.c **** 
  89:../src/os/rt-thread/src/kservice.c **** 	tid->error = error;
 136              		.loc 1 89 0
 137 006a FB68     		ldr	r3, [r7, #12]
 138 006c 7A68     		ldr	r2, [r7, #4]
 139 006e DA62     		str	r2, [r3, #44]
 140              	.L7:
  90:../src/os/rt-thread/src/kservice.c **** }
 141              		.loc 1 90 0
 142 0070 07F11007 		add	r7, r7, #16
 143 0074 BD46     		mov	sp, r7
 144 0076 80BD     		pop	{r7, pc}
 145              	.L12:
 146              		.align	2
 147              	.L11:
 148 0078 00000000 		.word	_errno
 149              		.cfi_endproc
 150              	.LFE6:
 152              		.align	2
 153              		.global	_rt_errno
 154              		.thumb
 155              		.thumb_func
 157              	_rt_errno:
 158              	.LFB7:
  91:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_set_errno);
  92:../src/os/rt-thread/src/kservice.c **** 
  93:../src/os/rt-thread/src/kservice.c **** /**
  94:../src/os/rt-thread/src/kservice.c ****  * This function returns errno.
  95:../src/os/rt-thread/src/kservice.c ****  *
  96:../src/os/rt-thread/src/kservice.c ****  * @return the errno in the system
  97:../src/os/rt-thread/src/kservice.c ****  */
  98:../src/os/rt-thread/src/kservice.c **** int *_rt_errno(void)
  99:../src/os/rt-thread/src/kservice.c **** {
 159              		.loc 1 99 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 007c 80B5     		push	{r7, lr}
 164              	.LCFI6:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 007e 82B0     		sub	sp, sp, #8
 169              	.LCFI7:
 170              		.cfi_def_cfa_offset 16
 171 0080 00AF     		add	r7, sp, #0
 172              	.LCFI8:
 173              		.cfi_def_cfa_register 7
 100:../src/os/rt-thread/src/kservice.c **** 	rt_thread_t tid;
 101:../src/os/rt-thread/src/kservice.c **** 	
 102:../src/os/rt-thread/src/kservice.c **** 	if (rt_interrupt_get_nest() != 0)
 174              		.loc 1 102 0
 175 0082 FFF7FEFF 		bl	rt_interrupt_get_nest
 176 0086 0346     		mov	r3, r0
 177 0088 002B     		cmp	r3, #0
 178 008a 01D0     		beq	.L14
 103:../src/os/rt-thread/src/kservice.c **** 		return (int *)&_errno;
 179              		.loc 1 103 0
 180 008c 084B     		ldr	r3, .L17
 181 008e 0AE0     		b	.L15
 182              	.L14:
 104:../src/os/rt-thread/src/kservice.c **** 
 105:../src/os/rt-thread/src/kservice.c **** 	tid = rt_thread_self();
 183              		.loc 1 105 0
 184 0090 FFF7FEFF 		bl	rt_thread_self
 185 0094 7860     		str	r0, [r7, #4]
 106:../src/os/rt-thread/src/kservice.c **** 	if (tid != RT_NULL)
 186              		.loc 1 106 0
 187 0096 7B68     		ldr	r3, [r7, #4]
 188 0098 002B     		cmp	r3, #0
 189 009a 03D0     		beq	.L16
 107:../src/os/rt-thread/src/kservice.c **** 		return (int *)&(tid->error);
 190              		.loc 1 107 0
 191 009c 7B68     		ldr	r3, [r7, #4]
 192 009e 03F12C03 		add	r3, r3, #44
 193 00a2 00E0     		b	.L15
 194              	.L16:
 108:../src/os/rt-thread/src/kservice.c **** 
 109:../src/os/rt-thread/src/kservice.c **** 	return (int *)&_errno;
 195              		.loc 1 109 0
 196 00a4 024B     		ldr	r3, .L17
 197              	.L15:
 110:../src/os/rt-thread/src/kservice.c **** }
 198              		.loc 1 110 0
 199 00a6 1846     		mov	r0, r3
 200 00a8 07F10807 		add	r7, r7, #8
 201 00ac BD46     		mov	sp, r7
 202 00ae 80BD     		pop	{r7, pc}
 203              	.L18:
 204              		.align	2
 205              	.L17:
 206 00b0 00000000 		.word	_errno
 207              		.cfi_endproc
 208              	.LFE7:
 210              		.align	2
 211              		.global	rt_memset
 212              		.thumb
 213              		.thumb_func
 215              	rt_memset:
 216              	.LFB8:
 111:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(_rt_errno);
 112:../src/os/rt-thread/src/kservice.c **** 
 113:../src/os/rt-thread/src/kservice.c **** /**
 114:../src/os/rt-thread/src/kservice.c ****  * This function will set the content of memory to specified value
 115:../src/os/rt-thread/src/kservice.c ****  *
 116:../src/os/rt-thread/src/kservice.c ****  * @param s the address of source memory
 117:../src/os/rt-thread/src/kservice.c ****  * @param c the value shall be set in content
 118:../src/os/rt-thread/src/kservice.c ****  * @param count the copied length
 119:../src/os/rt-thread/src/kservice.c ****  *
 120:../src/os/rt-thread/src/kservice.c ****  * @return the address of source memory
 121:../src/os/rt-thread/src/kservice.c ****  */
 122:../src/os/rt-thread/src/kservice.c **** void *rt_memset(void *s, int c, rt_ubase_t count)
 123:../src/os/rt-thread/src/kservice.c **** {
 217              		.loc 1 123 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 32
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222 00b4 80B4     		push	{r7}
 223              	.LCFI9:
 224              		.cfi_def_cfa_offset 4
 225              		.cfi_offset 7, -4
 226 00b6 89B0     		sub	sp, sp, #36
 227              	.LCFI10:
 228              		.cfi_def_cfa_offset 40
 229 00b8 00AF     		add	r7, sp, #0
 230              	.LCFI11:
 231              		.cfi_def_cfa_register 7
 232 00ba F860     		str	r0, [r7, #12]
 233 00bc B960     		str	r1, [r7, #8]
 234 00be 7A60     		str	r2, [r7, #4]
 124:../src/os/rt-thread/src/kservice.c **** #ifdef RT_TINY_SIZE
 125:../src/os/rt-thread/src/kservice.c **** 	char *xs = (char *)s;
 126:../src/os/rt-thread/src/kservice.c **** 
 127:../src/os/rt-thread/src/kservice.c **** 	while (count--)
 128:../src/os/rt-thread/src/kservice.c **** 		*xs++ = c;
 129:../src/os/rt-thread/src/kservice.c **** 
 130:../src/os/rt-thread/src/kservice.c **** 	return s;
 131:../src/os/rt-thread/src/kservice.c **** #else
 132:../src/os/rt-thread/src/kservice.c **** #define LBLOCKSIZE      (sizeof(rt_int32_t))
 133:../src/os/rt-thread/src/kservice.c **** #define UNALIGNED(X)    ((rt_int32_t)X & (LBLOCKSIZE - 1))
 134:../src/os/rt-thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)
 135:../src/os/rt-thread/src/kservice.c **** 
 136:../src/os/rt-thread/src/kservice.c **** 	int i;
 137:../src/os/rt-thread/src/kservice.c **** 	char *m = (char *)s;
 235              		.loc 1 137 0
 236 00c0 FB68     		ldr	r3, [r7, #12]
 237 00c2 FB61     		str	r3, [r7, #28]
 138:../src/os/rt-thread/src/kservice.c **** 	rt_uint32_t buffer;
 139:../src/os/rt-thread/src/kservice.c **** 	rt_uint32_t *aligned_addr;
 140:../src/os/rt-thread/src/kservice.c **** 	rt_uint32_t d = c & 0xff;
 238              		.loc 1 140 0
 239 00c4 BB68     		ldr	r3, [r7, #8]
 240 00c6 DBB2     		uxtb	r3, r3
 241 00c8 7B61     		str	r3, [r7, #20]
 141:../src/os/rt-thread/src/kservice.c **** 
 142:../src/os/rt-thread/src/kservice.c **** 	if (!TOO_SMALL(count) && !UNALIGNED(s))
 242              		.loc 1 142 0
 243 00ca 7B68     		ldr	r3, [r7, #4]
 244 00cc 032B     		cmp	r3, #3
 245 00ce 51D9     		bls	.L28
 246              		.loc 1 142 0 is_stmt 0 discriminator 1
 247 00d0 FB68     		ldr	r3, [r7, #12]
 248 00d2 03F00303 		and	r3, r3, #3
 249 00d6 002B     		cmp	r3, #0
 250 00d8 4CD1     		bne	.L28
 143:../src/os/rt-thread/src/kservice.c **** 	{
 144:../src/os/rt-thread/src/kservice.c **** 		/* If we get this far, we know that n is large and m is word-aligned. */
 145:../src/os/rt-thread/src/kservice.c **** 		aligned_addr = (rt_uint32_t *)s;
 251              		.loc 1 145 0 is_stmt 1
 252 00da FB68     		ldr	r3, [r7, #12]
 253 00dc BB61     		str	r3, [r7, #24]
 146:../src/os/rt-thread/src/kservice.c **** 
 147:../src/os/rt-thread/src/kservice.c **** 		/* Store D into each char sized location in BUFFER so that
 148:../src/os/rt-thread/src/kservice.c **** 		 * we can set large blocks quickly.
 149:../src/os/rt-thread/src/kservice.c **** 		 */
 150:../src/os/rt-thread/src/kservice.c **** 		if (LBLOCKSIZE == 4)
 151:../src/os/rt-thread/src/kservice.c **** 		{
 152:../src/os/rt-thread/src/kservice.c **** 			buffer = (d << 8) | d;
 254              		.loc 1 152 0
 255 00de 7B69     		ldr	r3, [r7, #20]
 256 00e0 4FEA0322 		lsl	r2, r3, #8
 257 00e4 7B69     		ldr	r3, [r7, #20]
 258 00e6 1343     		orrs	r3, r3, r2
 259 00e8 3B61     		str	r3, [r7, #16]
 153:../src/os/rt-thread/src/kservice.c **** 			buffer |= (buffer << 16);
 260              		.loc 1 153 0
 261 00ea 3B69     		ldr	r3, [r7, #16]
 262 00ec 4FEA0343 		lsl	r3, r3, #16
 263 00f0 3A69     		ldr	r2, [r7, #16]
 264 00f2 1343     		orrs	r3, r3, r2
 265 00f4 3B61     		str	r3, [r7, #16]
 154:../src/os/rt-thread/src/kservice.c **** 		}
 155:../src/os/rt-thread/src/kservice.c **** 		else
 156:../src/os/rt-thread/src/kservice.c **** 		{
 157:../src/os/rt-thread/src/kservice.c **** 			buffer = 0;
 158:../src/os/rt-thread/src/kservice.c **** 			for (i = 0; i < LBLOCKSIZE; i++)
 159:../src/os/rt-thread/src/kservice.c **** 				buffer = (buffer << 8) | d;
 160:../src/os/rt-thread/src/kservice.c **** 		}
 161:../src/os/rt-thread/src/kservice.c **** 
 162:../src/os/rt-thread/src/kservice.c **** 		while (count >= LBLOCKSIZE*4)
 266              		.loc 1 162 0
 267 00f6 1FE0     		b	.L21
 268              	.L22:
 163:../src/os/rt-thread/src/kservice.c **** 		{
 164:../src/os/rt-thread/src/kservice.c **** 			*aligned_addr++ = buffer;
 269              		.loc 1 164 0
 270 00f8 BB69     		ldr	r3, [r7, #24]
 271 00fa 3A69     		ldr	r2, [r7, #16]
 272 00fc 1A60     		str	r2, [r3, #0]
 273 00fe BB69     		ldr	r3, [r7, #24]
 274 0100 03F10403 		add	r3, r3, #4
 275 0104 BB61     		str	r3, [r7, #24]
 165:../src/os/rt-thread/src/kservice.c **** 			*aligned_addr++ = buffer;
 276              		.loc 1 165 0
 277 0106 BB69     		ldr	r3, [r7, #24]
 278 0108 3A69     		ldr	r2, [r7, #16]
 279 010a 1A60     		str	r2, [r3, #0]
 280 010c BB69     		ldr	r3, [r7, #24]
 281 010e 03F10403 		add	r3, r3, #4
 282 0112 BB61     		str	r3, [r7, #24]
 166:../src/os/rt-thread/src/kservice.c **** 			*aligned_addr++ = buffer;
 283              		.loc 1 166 0
 284 0114 BB69     		ldr	r3, [r7, #24]
 285 0116 3A69     		ldr	r2, [r7, #16]
 286 0118 1A60     		str	r2, [r3, #0]
 287 011a BB69     		ldr	r3, [r7, #24]
 288 011c 03F10403 		add	r3, r3, #4
 289 0120 BB61     		str	r3, [r7, #24]
 167:../src/os/rt-thread/src/kservice.c **** 			*aligned_addr++ = buffer;
 290              		.loc 1 167 0
 291 0122 BB69     		ldr	r3, [r7, #24]
 292 0124 3A69     		ldr	r2, [r7, #16]
 293 0126 1A60     		str	r2, [r3, #0]
 294 0128 BB69     		ldr	r3, [r7, #24]
 295 012a 03F10403 		add	r3, r3, #4
 296 012e BB61     		str	r3, [r7, #24]
 168:../src/os/rt-thread/src/kservice.c **** 			count -= 4 * LBLOCKSIZE;
 297              		.loc 1 168 0
 298 0130 7B68     		ldr	r3, [r7, #4]
 299 0132 A3F11003 		sub	r3, r3, #16
 300 0136 7B60     		str	r3, [r7, #4]
 301              	.L21:
 162:../src/os/rt-thread/src/kservice.c **** 		while (count >= LBLOCKSIZE*4)
 302              		.loc 1 162 0 discriminator 1
 303 0138 7B68     		ldr	r3, [r7, #4]
 304 013a 0F2B     		cmp	r3, #15
 305 013c DCD8     		bhi	.L22
 169:../src/os/rt-thread/src/kservice.c **** 		}
 170:../src/os/rt-thread/src/kservice.c **** 
 171:../src/os/rt-thread/src/kservice.c **** 		while (count >= LBLOCKSIZE)
 306              		.loc 1 171 0
 307 013e 0AE0     		b	.L23
 308              	.L24:
 172:../src/os/rt-thread/src/kservice.c **** 		{
 173:../src/os/rt-thread/src/kservice.c **** 			*aligned_addr++ = buffer;
 309              		.loc 1 173 0
 310 0140 BB69     		ldr	r3, [r7, #24]
 311 0142 3A69     		ldr	r2, [r7, #16]
 312 0144 1A60     		str	r2, [r3, #0]
 313 0146 BB69     		ldr	r3, [r7, #24]
 314 0148 03F10403 		add	r3, r3, #4
 315 014c BB61     		str	r3, [r7, #24]
 174:../src/os/rt-thread/src/kservice.c **** 			count -= LBLOCKSIZE;
 316              		.loc 1 174 0
 317 014e 7B68     		ldr	r3, [r7, #4]
 318 0150 A3F10403 		sub	r3, r3, #4
 319 0154 7B60     		str	r3, [r7, #4]
 320              	.L23:
 171:../src/os/rt-thread/src/kservice.c **** 		while (count >= LBLOCKSIZE)
 321              		.loc 1 171 0 discriminator 1
 322 0156 7B68     		ldr	r3, [r7, #4]
 323 0158 032B     		cmp	r3, #3
 324 015a F1D8     		bhi	.L24
 175:../src/os/rt-thread/src/kservice.c **** 		}
 176:../src/os/rt-thread/src/kservice.c **** 
 177:../src/os/rt-thread/src/kservice.c **** 		/* Pick up the remainder with a bytewise loop. */
 178:../src/os/rt-thread/src/kservice.c **** 		m = (char *)aligned_addr;
 325              		.loc 1 178 0
 326 015c BB69     		ldr	r3, [r7, #24]
 327 015e FB61     		str	r3, [r7, #28]
 179:../src/os/rt-thread/src/kservice.c **** 	}
 180:../src/os/rt-thread/src/kservice.c **** 
 181:../src/os/rt-thread/src/kservice.c **** 	while (count--)
 328              		.loc 1 181 0
 329 0160 08E0     		b	.L28
 330              	.L26:
 182:../src/os/rt-thread/src/kservice.c **** 	{
 183:../src/os/rt-thread/src/kservice.c **** 		*m++ = (char)d;
 331              		.loc 1 183 0
 332 0162 7B69     		ldr	r3, [r7, #20]
 333 0164 DAB2     		uxtb	r2, r3
 334 0166 FB69     		ldr	r3, [r7, #28]
 335 0168 1A70     		strb	r2, [r3, #0]
 336 016a FB69     		ldr	r3, [r7, #28]
 337 016c 03F10103 		add	r3, r3, #1
 338 0170 FB61     		str	r3, [r7, #28]
 339 0172 00E0     		b	.L25
 340              	.L28:
 181:../src/os/rt-thread/src/kservice.c **** 	while (count--)
 341              		.loc 1 181 0
 342 0174 00BF     		nop
 343              	.L25:
 181:../src/os/rt-thread/src/kservice.c **** 	while (count--)
 344              		.loc 1 181 0 is_stmt 0 discriminator 1
 345 0176 7B68     		ldr	r3, [r7, #4]
 346 0178 002B     		cmp	r3, #0
 347 017a 0CBF     		ite	eq
 348 017c 0023     		moveq	r3, #0
 349 017e 0123     		movne	r3, #1
 350 0180 DBB2     		uxtb	r3, r3
 351 0182 7A68     		ldr	r2, [r7, #4]
 352 0184 02F1FF32 		add	r2, r2, #-1
 353 0188 7A60     		str	r2, [r7, #4]
 354 018a 002B     		cmp	r3, #0
 355 018c E9D1     		bne	.L26
 184:../src/os/rt-thread/src/kservice.c **** 	}
 185:../src/os/rt-thread/src/kservice.c **** 
 186:../src/os/rt-thread/src/kservice.c **** 	return s;
 356              		.loc 1 186 0 is_stmt 1
 357 018e FB68     		ldr	r3, [r7, #12]
 187:../src/os/rt-thread/src/kservice.c **** 
 188:../src/os/rt-thread/src/kservice.c **** #undef LBLOCKSIZE
 189:../src/os/rt-thread/src/kservice.c **** #undef UNALIGNED
 190:../src/os/rt-thread/src/kservice.c **** #undef TOO_SMALL
 191:../src/os/rt-thread/src/kservice.c **** #endif
 192:../src/os/rt-thread/src/kservice.c **** }
 358              		.loc 1 192 0
 359 0190 1846     		mov	r0, r3
 360 0192 07F12407 		add	r7, r7, #36
 361 0196 BD46     		mov	sp, r7
 362 0198 80BC     		pop	{r7}
 363 019a 7047     		bx	lr
 364              		.cfi_endproc
 365              	.LFE8:
 367              		.align	2
 368              		.global	rt_memcpy
 369              		.thumb
 370              		.thumb_func
 372              	rt_memcpy:
 373              	.LFB9:
 193:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_memset);
 194:../src/os/rt-thread/src/kservice.c **** 
 195:../src/os/rt-thread/src/kservice.c **** /**
 196:../src/os/rt-thread/src/kservice.c ****  * This function will copy memory content from source address to destination
 197:../src/os/rt-thread/src/kservice.c ****  * address.
 198:../src/os/rt-thread/src/kservice.c ****  *
 199:../src/os/rt-thread/src/kservice.c ****  * @param dst the address of destination memory
 200:../src/os/rt-thread/src/kservice.c ****  * @param src  the address of source memory
 201:../src/os/rt-thread/src/kservice.c ****  * @param count the copied length
 202:../src/os/rt-thread/src/kservice.c ****  *
 203:../src/os/rt-thread/src/kservice.c ****  * @return the address of destination memory
 204:../src/os/rt-thread/src/kservice.c ****  */
 205:../src/os/rt-thread/src/kservice.c **** void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
 206:../src/os/rt-thread/src/kservice.c **** {
 374              		.loc 1 206 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 40
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379 019c 80B4     		push	{r7}
 380              	.LCFI12:
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 7, -4
 383 019e 8BB0     		sub	sp, sp, #44
 384              	.LCFI13:
 385              		.cfi_def_cfa_offset 48
 386 01a0 00AF     		add	r7, sp, #0
 387              	.LCFI14:
 388              		.cfi_def_cfa_register 7
 389 01a2 F860     		str	r0, [r7, #12]
 390 01a4 B960     		str	r1, [r7, #8]
 391 01a6 7A60     		str	r2, [r7, #4]
 207:../src/os/rt-thread/src/kservice.c **** #ifdef RT_TINY_SIZE
 208:../src/os/rt-thread/src/kservice.c **** 	char *tmp = (char *)dst, *s = (char *)src;
 209:../src/os/rt-thread/src/kservice.c **** 
 210:../src/os/rt-thread/src/kservice.c **** 	while (count--)
 211:../src/os/rt-thread/src/kservice.c **** 		*tmp++ = *s++;
 212:../src/os/rt-thread/src/kservice.c **** 
 213:../src/os/rt-thread/src/kservice.c **** 	return dst;
 214:../src/os/rt-thread/src/kservice.c **** #else
 215:../src/os/rt-thread/src/kservice.c **** 
 216:../src/os/rt-thread/src/kservice.c **** #define UNALIGNED(X, Y) \
 217:../src/os/rt-thread/src/kservice.c **** 	(((rt_int32_t)X & (sizeof(rt_int32_t) - 1)) | ((rt_int32_t)Y & (sizeof(rt_int32_t) - 1)))
 218:../src/os/rt-thread/src/kservice.c **** #define BIGBLOCKSIZE    (sizeof(rt_int32_t) << 2)
 219:../src/os/rt-thread/src/kservice.c **** #define LITTLEBLOCKSIZE (sizeof(rt_int32_t))
 220:../src/os/rt-thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)
 221:../src/os/rt-thread/src/kservice.c **** 
 222:../src/os/rt-thread/src/kservice.c **** 	char *dst_ptr = (char *)dst;
 392              		.loc 1 222 0
 393 01a8 FB68     		ldr	r3, [r7, #12]
 394 01aa 7B62     		str	r3, [r7, #36]
 223:../src/os/rt-thread/src/kservice.c **** 	char *src_ptr = (char *)src;
 395              		.loc 1 223 0
 396 01ac BB68     		ldr	r3, [r7, #8]
 397 01ae 3B62     		str	r3, [r7, #32]
 224:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t *aligned_dst;
 225:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t *aligned_src;
 226:../src/os/rt-thread/src/kservice.c **** 	int len = count;
 398              		.loc 1 226 0
 399 01b0 7B68     		ldr	r3, [r7, #4]
 400 01b2 7B61     		str	r3, [r7, #20]
 227:../src/os/rt-thread/src/kservice.c **** 
 228:../src/os/rt-thread/src/kservice.c **** 	/* If the size is small, or either SRC or DST is unaligned,
 229:../src/os/rt-thread/src/kservice.c **** 	then punt into the byte copy loop.  This should be rare. */
 230:../src/os/rt-thread/src/kservice.c **** 	if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 401              		.loc 1 230 0
 402 01b4 7B69     		ldr	r3, [r7, #20]
 403 01b6 0F2B     		cmp	r3, #15
 404 01b8 68D9     		bls	.L38
 405              		.loc 1 230 0 is_stmt 0 discriminator 1
 406 01ba 3A6A     		ldr	r2, [r7, #32]
 407 01bc 7B6A     		ldr	r3, [r7, #36]
 408 01be 1343     		orrs	r3, r3, r2
 409 01c0 03F00303 		and	r3, r3, #3
 410 01c4 002B     		cmp	r3, #0
 411 01c6 61D1     		bne	.L38
 231:../src/os/rt-thread/src/kservice.c **** 	{
 232:../src/os/rt-thread/src/kservice.c **** 		aligned_dst = (rt_int32_t *)dst_ptr;
 412              		.loc 1 232 0 is_stmt 1
 413 01c8 7B6A     		ldr	r3, [r7, #36]
 414 01ca FB61     		str	r3, [r7, #28]
 233:../src/os/rt-thread/src/kservice.c **** 		aligned_src = (rt_int32_t *)src_ptr;
 415              		.loc 1 233 0
 416 01cc 3B6A     		ldr	r3, [r7, #32]
 417 01ce BB61     		str	r3, [r7, #24]
 234:../src/os/rt-thread/src/kservice.c **** 
 235:../src/os/rt-thread/src/kservice.c **** 		/* Copy 4X long words at a time if possible. */
 236:../src/os/rt-thread/src/kservice.c **** 		while (len >= BIGBLOCKSIZE)
 418              		.loc 1 236 0
 419 01d0 33E0     		b	.L31
 420              	.L32:
 237:../src/os/rt-thread/src/kservice.c **** 		{
 238:../src/os/rt-thread/src/kservice.c **** 			*aligned_dst++ = *aligned_src++;
 421              		.loc 1 238 0
 422 01d2 BB69     		ldr	r3, [r7, #24]
 423 01d4 1A68     		ldr	r2, [r3, #0]
 424 01d6 FB69     		ldr	r3, [r7, #28]
 425 01d8 1A60     		str	r2, [r3, #0]
 426 01da FB69     		ldr	r3, [r7, #28]
 427 01dc 03F10403 		add	r3, r3, #4
 428 01e0 FB61     		str	r3, [r7, #28]
 429 01e2 BB69     		ldr	r3, [r7, #24]
 430 01e4 03F10403 		add	r3, r3, #4
 431 01e8 BB61     		str	r3, [r7, #24]
 239:../src/os/rt-thread/src/kservice.c **** 			*aligned_dst++ = *aligned_src++;
 432              		.loc 1 239 0
 433 01ea BB69     		ldr	r3, [r7, #24]
 434 01ec 1A68     		ldr	r2, [r3, #0]
 435 01ee FB69     		ldr	r3, [r7, #28]
 436 01f0 1A60     		str	r2, [r3, #0]
 437 01f2 FB69     		ldr	r3, [r7, #28]
 438 01f4 03F10403 		add	r3, r3, #4
 439 01f8 FB61     		str	r3, [r7, #28]
 440 01fa BB69     		ldr	r3, [r7, #24]
 441 01fc 03F10403 		add	r3, r3, #4
 442 0200 BB61     		str	r3, [r7, #24]
 240:../src/os/rt-thread/src/kservice.c **** 			*aligned_dst++ = *aligned_src++;
 443              		.loc 1 240 0
 444 0202 BB69     		ldr	r3, [r7, #24]
 445 0204 1A68     		ldr	r2, [r3, #0]
 446 0206 FB69     		ldr	r3, [r7, #28]
 447 0208 1A60     		str	r2, [r3, #0]
 448 020a FB69     		ldr	r3, [r7, #28]
 449 020c 03F10403 		add	r3, r3, #4
 450 0210 FB61     		str	r3, [r7, #28]
 451 0212 BB69     		ldr	r3, [r7, #24]
 452 0214 03F10403 		add	r3, r3, #4
 453 0218 BB61     		str	r3, [r7, #24]
 241:../src/os/rt-thread/src/kservice.c **** 			*aligned_dst++ = *aligned_src++;
 454              		.loc 1 241 0
 455 021a BB69     		ldr	r3, [r7, #24]
 456 021c 1A68     		ldr	r2, [r3, #0]
 457 021e FB69     		ldr	r3, [r7, #28]
 458 0220 1A60     		str	r2, [r3, #0]
 459 0222 FB69     		ldr	r3, [r7, #28]
 460 0224 03F10403 		add	r3, r3, #4
 461 0228 FB61     		str	r3, [r7, #28]
 462 022a BB69     		ldr	r3, [r7, #24]
 463 022c 03F10403 		add	r3, r3, #4
 464 0230 BB61     		str	r3, [r7, #24]
 242:../src/os/rt-thread/src/kservice.c **** 			len -= BIGBLOCKSIZE;
 465              		.loc 1 242 0
 466 0232 7B69     		ldr	r3, [r7, #20]
 467 0234 A3F11003 		sub	r3, r3, #16
 468 0238 7B61     		str	r3, [r7, #20]
 469              	.L31:
 236:../src/os/rt-thread/src/kservice.c **** 		while (len >= BIGBLOCKSIZE)
 470              		.loc 1 236 0 discriminator 1
 471 023a 7B69     		ldr	r3, [r7, #20]
 472 023c 0F2B     		cmp	r3, #15
 473 023e C8D8     		bhi	.L32
 243:../src/os/rt-thread/src/kservice.c **** 		}
 244:../src/os/rt-thread/src/kservice.c **** 
 245:../src/os/rt-thread/src/kservice.c **** 		/* Copy one long word at a time if possible. */
 246:../src/os/rt-thread/src/kservice.c **** 		while (len >= LITTLEBLOCKSIZE)
 474              		.loc 1 246 0
 475 0240 0FE0     		b	.L33
 476              	.L34:
 247:../src/os/rt-thread/src/kservice.c **** 		{
 248:../src/os/rt-thread/src/kservice.c **** 			*aligned_dst++ = *aligned_src++;
 477              		.loc 1 248 0
 478 0242 BB69     		ldr	r3, [r7, #24]
 479 0244 1A68     		ldr	r2, [r3, #0]
 480 0246 FB69     		ldr	r3, [r7, #28]
 481 0248 1A60     		str	r2, [r3, #0]
 482 024a FB69     		ldr	r3, [r7, #28]
 483 024c 03F10403 		add	r3, r3, #4
 484 0250 FB61     		str	r3, [r7, #28]
 485 0252 BB69     		ldr	r3, [r7, #24]
 486 0254 03F10403 		add	r3, r3, #4
 487 0258 BB61     		str	r3, [r7, #24]
 249:../src/os/rt-thread/src/kservice.c **** 			len -= LITTLEBLOCKSIZE;
 488              		.loc 1 249 0
 489 025a 7B69     		ldr	r3, [r7, #20]
 490 025c A3F10403 		sub	r3, r3, #4
 491 0260 7B61     		str	r3, [r7, #20]
 492              	.L33:
 246:../src/os/rt-thread/src/kservice.c **** 		while (len >= LITTLEBLOCKSIZE)
 493              		.loc 1 246 0 discriminator 1
 494 0262 7B69     		ldr	r3, [r7, #20]
 495 0264 032B     		cmp	r3, #3
 496 0266 ECD8     		bhi	.L34
 250:../src/os/rt-thread/src/kservice.c **** 		}
 251:../src/os/rt-thread/src/kservice.c **** 
 252:../src/os/rt-thread/src/kservice.c **** 		/* Pick up any residual with a byte copier. */
 253:../src/os/rt-thread/src/kservice.c **** 		dst_ptr = (char *)aligned_dst;
 497              		.loc 1 253 0
 498 0268 FB69     		ldr	r3, [r7, #28]
 499 026a 7B62     		str	r3, [r7, #36]
 254:../src/os/rt-thread/src/kservice.c **** 		src_ptr = (char *)aligned_src;
 500              		.loc 1 254 0
 501 026c BB69     		ldr	r3, [r7, #24]
 502 026e 3B62     		str	r3, [r7, #32]
 255:../src/os/rt-thread/src/kservice.c **** 	}
 256:../src/os/rt-thread/src/kservice.c **** 
 257:../src/os/rt-thread/src/kservice.c **** 	while (len--)
 503              		.loc 1 257 0
 504 0270 0CE0     		b	.L38
 505              	.L36:
 258:../src/os/rt-thread/src/kservice.c **** 		*dst_ptr++ = *src_ptr++;
 506              		.loc 1 258 0
 507 0272 3B6A     		ldr	r3, [r7, #32]
 508 0274 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 509 0276 7B6A     		ldr	r3, [r7, #36]
 510 0278 1A70     		strb	r2, [r3, #0]
 511 027a 7B6A     		ldr	r3, [r7, #36]
 512 027c 03F10103 		add	r3, r3, #1
 513 0280 7B62     		str	r3, [r7, #36]
 514 0282 3B6A     		ldr	r3, [r7, #32]
 515 0284 03F10103 		add	r3, r3, #1
 516 0288 3B62     		str	r3, [r7, #32]
 517 028a 00E0     		b	.L35
 518              	.L38:
 257:../src/os/rt-thread/src/kservice.c **** 	while (len--)
 519              		.loc 1 257 0
 520 028c 00BF     		nop
 521              	.L35:
 257:../src/os/rt-thread/src/kservice.c **** 	while (len--)
 522              		.loc 1 257 0 is_stmt 0 discriminator 1
 523 028e 7B69     		ldr	r3, [r7, #20]
 524 0290 002B     		cmp	r3, #0
 525 0292 0CBF     		ite	eq
 526 0294 0023     		moveq	r3, #0
 527 0296 0123     		movne	r3, #1
 528 0298 DBB2     		uxtb	r3, r3
 529 029a 7A69     		ldr	r2, [r7, #20]
 530 029c 02F1FF32 		add	r2, r2, #-1
 531 02a0 7A61     		str	r2, [r7, #20]
 532 02a2 002B     		cmp	r3, #0
 533 02a4 E5D1     		bne	.L36
 259:../src/os/rt-thread/src/kservice.c **** 
 260:../src/os/rt-thread/src/kservice.c **** 	return dst;
 534              		.loc 1 260 0 is_stmt 1
 535 02a6 FB68     		ldr	r3, [r7, #12]
 261:../src/os/rt-thread/src/kservice.c **** #undef UNALIGNED
 262:../src/os/rt-thread/src/kservice.c **** #undef BIGBLOCKSIZE
 263:../src/os/rt-thread/src/kservice.c **** #undef LITTLEBLOCKSIZE
 264:../src/os/rt-thread/src/kservice.c **** #undef TOO_SMALL
 265:../src/os/rt-thread/src/kservice.c **** #endif
 266:../src/os/rt-thread/src/kservice.c **** }
 536              		.loc 1 266 0
 537 02a8 1846     		mov	r0, r3
 538 02aa 07F12C07 		add	r7, r7, #44
 539 02ae BD46     		mov	sp, r7
 540 02b0 80BC     		pop	{r7}
 541 02b2 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE9:
 545              		.align	2
 546              		.global	rt_memmove
 547              		.thumb
 548              		.thumb_func
 550              	rt_memmove:
 551              	.LFB10:
 267:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcpy);
 268:../src/os/rt-thread/src/kservice.c **** 
 269:../src/os/rt-thread/src/kservice.c **** /**
 270:../src/os/rt-thread/src/kservice.c ****  * This function will move memory content from source address to destination
 271:../src/os/rt-thread/src/kservice.c ****  * address.
 272:../src/os/rt-thread/src/kservice.c ****  *
 273:../src/os/rt-thread/src/kservice.c ****  * @param dest the address of destination memory
 274:../src/os/rt-thread/src/kservice.c ****  * @param src  the address of source memory
 275:../src/os/rt-thread/src/kservice.c ****  * @param n the copied length
 276:../src/os/rt-thread/src/kservice.c ****  *
 277:../src/os/rt-thread/src/kservice.c ****  * @return the address of destination memory
 278:../src/os/rt-thread/src/kservice.c ****  */
 279:../src/os/rt-thread/src/kservice.c **** void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
 280:../src/os/rt-thread/src/kservice.c **** {
 552              		.loc 1 280 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 24
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557 02b4 80B4     		push	{r7}
 558              	.LCFI15:
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 7, -4
 561 02b6 87B0     		sub	sp, sp, #28
 562              	.LCFI16:
 563              		.cfi_def_cfa_offset 32
 564 02b8 00AF     		add	r7, sp, #0
 565              	.LCFI17:
 566              		.cfi_def_cfa_register 7
 567 02ba F860     		str	r0, [r7, #12]
 568 02bc B960     		str	r1, [r7, #8]
 569 02be 7A60     		str	r2, [r7, #4]
 281:../src/os/rt-thread/src/kservice.c **** 	char *tmp = (char *)dest, *s = (char *)src;
 570              		.loc 1 281 0
 571 02c0 FB68     		ldr	r3, [r7, #12]
 572 02c2 7B61     		str	r3, [r7, #20]
 573 02c4 BB68     		ldr	r3, [r7, #8]
 574 02c6 3B61     		str	r3, [r7, #16]
 282:../src/os/rt-thread/src/kservice.c **** 
 283:../src/os/rt-thread/src/kservice.c **** 	if (s < tmp && tmp < s + n)
 575              		.loc 1 283 0
 576 02c8 3A69     		ldr	r2, [r7, #16]
 577 02ca 7B69     		ldr	r3, [r7, #20]
 578 02cc 9A42     		cmp	r2, r3
 579 02ce 34D2     		bcs	.L47
 580              		.loc 1 283 0 is_stmt 0 discriminator 1
 581 02d0 3A69     		ldr	r2, [r7, #16]
 582 02d2 7B68     		ldr	r3, [r7, #4]
 583 02d4 D218     		adds	r2, r2, r3
 584 02d6 7B69     		ldr	r3, [r7, #20]
 585 02d8 9A42     		cmp	r2, r3
 586 02da 2ED9     		bls	.L47
 284:../src/os/rt-thread/src/kservice.c **** 	{
 285:../src/os/rt-thread/src/kservice.c **** 		tmp += n;
 587              		.loc 1 285 0 is_stmt 1
 588 02dc 7A69     		ldr	r2, [r7, #20]
 589 02de 7B68     		ldr	r3, [r7, #4]
 590 02e0 D318     		adds	r3, r2, r3
 591 02e2 7B61     		str	r3, [r7, #20]
 286:../src/os/rt-thread/src/kservice.c **** 		s += n;
 592              		.loc 1 286 0
 593 02e4 3A69     		ldr	r2, [r7, #16]
 594 02e6 7B68     		ldr	r3, [r7, #4]
 595 02e8 D318     		adds	r3, r2, r3
 596 02ea 3B61     		str	r3, [r7, #16]
 287:../src/os/rt-thread/src/kservice.c **** 
 288:../src/os/rt-thread/src/kservice.c **** 		while (n--)
 597              		.loc 1 288 0
 598 02ec 0BE0     		b	.L41
 599              	.L42:
 289:../src/os/rt-thread/src/kservice.c **** 			*(--tmp) = *(--s);
 600              		.loc 1 289 0
 601 02ee 7B69     		ldr	r3, [r7, #20]
 602 02f0 03F1FF33 		add	r3, r3, #-1
 603 02f4 7B61     		str	r3, [r7, #20]
 604 02f6 3B69     		ldr	r3, [r7, #16]
 605 02f8 03F1FF33 		add	r3, r3, #-1
 606 02fc 3B61     		str	r3, [r7, #16]
 607 02fe 3B69     		ldr	r3, [r7, #16]
 608 0300 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 609 0302 7B69     		ldr	r3, [r7, #20]
 610 0304 1A70     		strb	r2, [r3, #0]
 611              	.L41:
 288:../src/os/rt-thread/src/kservice.c **** 		while (n--)
 612              		.loc 1 288 0 discriminator 1
 613 0306 7B68     		ldr	r3, [r7, #4]
 614 0308 002B     		cmp	r3, #0
 615 030a 0CBF     		ite	eq
 616 030c 0023     		moveq	r3, #0
 617 030e 0123     		movne	r3, #1
 618 0310 DBB2     		uxtb	r3, r3
 619 0312 7A68     		ldr	r2, [r7, #4]
 620 0314 02F1FF32 		add	r2, r2, #-1
 621 0318 7A60     		str	r2, [r7, #4]
 622 031a 002B     		cmp	r3, #0
 623 031c E7D1     		bne	.L42
 283:../src/os/rt-thread/src/kservice.c **** 	if (s < tmp && tmp < s + n)
 624              		.loc 1 283 0
 625 031e 19E0     		b	.L43
 626              	.L45:
 290:../src/os/rt-thread/src/kservice.c **** 	}
 291:../src/os/rt-thread/src/kservice.c **** 	else
 292:../src/os/rt-thread/src/kservice.c **** 	{
 293:../src/os/rt-thread/src/kservice.c **** 		while (n--)
 294:../src/os/rt-thread/src/kservice.c **** 			*tmp++ = *s++;
 627              		.loc 1 294 0
 628 0320 3B69     		ldr	r3, [r7, #16]
 629 0322 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 630 0324 7B69     		ldr	r3, [r7, #20]
 631 0326 1A70     		strb	r2, [r3, #0]
 632 0328 7B69     		ldr	r3, [r7, #20]
 633 032a 03F10103 		add	r3, r3, #1
 634 032e 7B61     		str	r3, [r7, #20]
 635 0330 3B69     		ldr	r3, [r7, #16]
 636 0332 03F10103 		add	r3, r3, #1
 637 0336 3B61     		str	r3, [r7, #16]
 638 0338 00E0     		b	.L44
 639              	.L47:
 293:../src/os/rt-thread/src/kservice.c **** 		while (n--)
 640              		.loc 1 293 0
 641 033a 00BF     		nop
 642              	.L44:
 293:../src/os/rt-thread/src/kservice.c **** 		while (n--)
 643              		.loc 1 293 0 is_stmt 0 discriminator 1
 644 033c 7B68     		ldr	r3, [r7, #4]
 645 033e 002B     		cmp	r3, #0
 646 0340 0CBF     		ite	eq
 647 0342 0023     		moveq	r3, #0
 648 0344 0123     		movne	r3, #1
 649 0346 DBB2     		uxtb	r3, r3
 650 0348 7A68     		ldr	r2, [r7, #4]
 651 034a 02F1FF32 		add	r2, r2, #-1
 652 034e 7A60     		str	r2, [r7, #4]
 653 0350 002B     		cmp	r3, #0
 654 0352 E5D1     		bne	.L45
 655              	.L43:
 295:../src/os/rt-thread/src/kservice.c **** 	}
 296:../src/os/rt-thread/src/kservice.c **** 
 297:../src/os/rt-thread/src/kservice.c **** 	return dest;
 656              		.loc 1 297 0 is_stmt 1
 657 0354 FB68     		ldr	r3, [r7, #12]
 298:../src/os/rt-thread/src/kservice.c **** }
 658              		.loc 1 298 0
 659 0356 1846     		mov	r0, r3
 660 0358 07F11C07 		add	r7, r7, #28
 661 035c BD46     		mov	sp, r7
 662 035e 80BC     		pop	{r7}
 663 0360 7047     		bx	lr
 664              		.cfi_endproc
 665              	.LFE10:
 667 0362 00BF     		.align	2
 668              		.global	rt_memcmp
 669              		.thumb
 670              		.thumb_func
 672              	rt_memcmp:
 673              	.LFB11:
 299:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_memmove);
 300:../src/os/rt-thread/src/kservice.c **** 
 301:../src/os/rt-thread/src/kservice.c **** /**
 302:../src/os/rt-thread/src/kservice.c ****  * This function will compare two areas of memory
 303:../src/os/rt-thread/src/kservice.c ****  *
 304:../src/os/rt-thread/src/kservice.c ****  * @param cs one area of memory
 305:../src/os/rt-thread/src/kservice.c ****  * @param ct znother area of memory
 306:../src/os/rt-thread/src/kservice.c ****  * @param count the size of the area
 307:../src/os/rt-thread/src/kservice.c ****  *
 308:../src/os/rt-thread/src/kservice.c ****  * @return the result
 309:../src/os/rt-thread/src/kservice.c ****  */
 310:../src/os/rt-thread/src/kservice.c **** rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
 311:../src/os/rt-thread/src/kservice.c **** {
 674              		.loc 1 311 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 32
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679 0364 80B4     		push	{r7}
 680              	.LCFI18:
 681              		.cfi_def_cfa_offset 4
 682              		.cfi_offset 7, -4
 683 0366 89B0     		sub	sp, sp, #36
 684              	.LCFI19:
 685              		.cfi_def_cfa_offset 40
 686 0368 00AF     		add	r7, sp, #0
 687              	.LCFI20:
 688              		.cfi_def_cfa_register 7
 689 036a F860     		str	r0, [r7, #12]
 690 036c B960     		str	r1, [r7, #8]
 691 036e 7A60     		str	r2, [r7, #4]
 312:../src/os/rt-thread/src/kservice.c **** 	const unsigned char *su1, *su2;
 313:../src/os/rt-thread/src/kservice.c **** 	int res = 0;
 692              		.loc 1 313 0
 693 0370 4FF00003 		mov	r3, #0
 694 0374 7B61     		str	r3, [r7, #20]
 314:../src/os/rt-thread/src/kservice.c **** 
 315:../src/os/rt-thread/src/kservice.c **** 	for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
 695              		.loc 1 315 0
 696 0376 FB68     		ldr	r3, [r7, #12]
 697 0378 FB61     		str	r3, [r7, #28]
 698 037a BB68     		ldr	r3, [r7, #8]
 699 037c BB61     		str	r3, [r7, #24]
 700 037e 15E0     		b	.L49
 701              	.L52:
 316:../src/os/rt-thread/src/kservice.c **** 		if ((res = *su1 - *su2) != 0)
 702              		.loc 1 316 0
 703 0380 FB69     		ldr	r3, [r7, #28]
 704 0382 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 705 0384 1A46     		mov	r2, r3
 706 0386 BB69     		ldr	r3, [r7, #24]
 707 0388 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 708 038a D31A     		subs	r3, r2, r3
 709 038c 7B61     		str	r3, [r7, #20]
 710 038e 7B69     		ldr	r3, [r7, #20]
 711 0390 002B     		cmp	r3, #0
 712 0392 0FD1     		bne	.L54
 713              	.L50:
 315:../src/os/rt-thread/src/kservice.c **** 	for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
 714              		.loc 1 315 0
 715 0394 FB69     		ldr	r3, [r7, #28]
 716 0396 03F10103 		add	r3, r3, #1
 717 039a FB61     		str	r3, [r7, #28]
 718 039c BB69     		ldr	r3, [r7, #24]
 719 039e 03F10103 		add	r3, r3, #1
 720 03a2 BB61     		str	r3, [r7, #24]
 721 03a4 7B68     		ldr	r3, [r7, #4]
 722 03a6 03F1FF33 		add	r3, r3, #-1
 723 03aa 7B60     		str	r3, [r7, #4]
 724              	.L49:
 315:../src/os/rt-thread/src/kservice.c **** 	for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
 725              		.loc 1 315 0 is_stmt 0 discriminator 1
 726 03ac 7B68     		ldr	r3, [r7, #4]
 727 03ae 002B     		cmp	r3, #0
 728 03b0 E6D1     		bne	.L52
 729 03b2 00E0     		b	.L51
 730              	.L54:
 317:../src/os/rt-thread/src/kservice.c **** 			break;
 731              		.loc 1 317 0 is_stmt 1
 732 03b4 00BF     		nop
 733              	.L51:
 318:../src/os/rt-thread/src/kservice.c **** 
 319:../src/os/rt-thread/src/kservice.c **** 	return res;
 734              		.loc 1 319 0
 735 03b6 7B69     		ldr	r3, [r7, #20]
 320:../src/os/rt-thread/src/kservice.c **** }
 736              		.loc 1 320 0
 737 03b8 1846     		mov	r0, r3
 738 03ba 07F12407 		add	r7, r7, #36
 739 03be BD46     		mov	sp, r7
 740 03c0 80BC     		pop	{r7}
 741 03c2 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE11:
 745              		.align	2
 746              		.global	rt_strstr
 747              		.thumb
 748              		.thumb_func
 750              	rt_strstr:
 751              	.LFB12:
 321:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcmp);
 322:../src/os/rt-thread/src/kservice.c **** 
 323:../src/os/rt-thread/src/kservice.c **** /**
 324:../src/os/rt-thread/src/kservice.c ****  * This function will return the first occurrence of a string.
 325:../src/os/rt-thread/src/kservice.c ****  *
 326:../src/os/rt-thread/src/kservice.c ****  * @param s1 the source string
 327:../src/os/rt-thread/src/kservice.c ****  * @param s2 the find string
 328:../src/os/rt-thread/src/kservice.c ****  *
 329:../src/os/rt-thread/src/kservice.c ****  * @return the first occurrence of a s2 in s1, or RT_NULL if no found.
 330:../src/os/rt-thread/src/kservice.c ****  */
 331:../src/os/rt-thread/src/kservice.c **** char *rt_strstr(const char *s1, const char *s2)
 332:../src/os/rt-thread/src/kservice.c **** {
 752              		.loc 1 332 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 16
 755              		@ frame_needed = 1, uses_anonymous_args = 0
 756 03c4 80B5     		push	{r7, lr}
 757              	.LCFI21:
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 7, -8
 760              		.cfi_offset 14, -4
 761 03c6 84B0     		sub	sp, sp, #16
 762              	.LCFI22:
 763              		.cfi_def_cfa_offset 24
 764 03c8 00AF     		add	r7, sp, #0
 765              	.LCFI23:
 766              		.cfi_def_cfa_register 7
 767 03ca 7860     		str	r0, [r7, #4]
 768 03cc 3960     		str	r1, [r7, #0]
 333:../src/os/rt-thread/src/kservice.c **** 	int l1, l2;
 334:../src/os/rt-thread/src/kservice.c **** 
 335:../src/os/rt-thread/src/kservice.c **** 	l2 = rt_strlen(s2);
 769              		.loc 1 335 0
 770 03ce 3868     		ldr	r0, [r7, #0]
 771 03d0 FFF7FEFF 		bl	rt_strlen
 772 03d4 0346     		mov	r3, r0
 773 03d6 BB60     		str	r3, [r7, #8]
 336:../src/os/rt-thread/src/kservice.c **** 	if (!l2)
 774              		.loc 1 336 0
 775 03d8 BB68     		ldr	r3, [r7, #8]
 776 03da 002B     		cmp	r3, #0
 777 03dc 01D1     		bne	.L56
 337:../src/os/rt-thread/src/kservice.c **** 		return (char *)s1;
 778              		.loc 1 337 0
 779 03de 7B68     		ldr	r3, [r7, #4]
 780 03e0 1EE0     		b	.L57
 781              	.L56:
 338:../src/os/rt-thread/src/kservice.c **** 	l1 = rt_strlen(s1);
 782              		.loc 1 338 0
 783 03e2 7868     		ldr	r0, [r7, #4]
 784 03e4 FFF7FEFF 		bl	rt_strlen
 785 03e8 0346     		mov	r3, r0
 786 03ea FB60     		str	r3, [r7, #12]
 339:../src/os/rt-thread/src/kservice.c **** 	while (l1 >= l2)
 787              		.loc 1 339 0
 788 03ec 12E0     		b	.L58
 789              	.L60:
 340:../src/os/rt-thread/src/kservice.c **** 	{
 341:../src/os/rt-thread/src/kservice.c **** 		l1 --;
 790              		.loc 1 341 0
 791 03ee FB68     		ldr	r3, [r7, #12]
 792 03f0 03F1FF33 		add	r3, r3, #-1
 793 03f4 FB60     		str	r3, [r7, #12]
 342:../src/os/rt-thread/src/kservice.c **** 		if (!rt_memcmp(s1, s2, l2))
 794              		.loc 1 342 0
 795 03f6 BB68     		ldr	r3, [r7, #8]
 796 03f8 7868     		ldr	r0, [r7, #4]
 797 03fa 3968     		ldr	r1, [r7, #0]
 798 03fc 1A46     		mov	r2, r3
 799 03fe FFF7FEFF 		bl	rt_memcmp
 800 0402 0346     		mov	r3, r0
 801 0404 002B     		cmp	r3, #0
 802 0406 01D1     		bne	.L59
 343:../src/os/rt-thread/src/kservice.c **** 			return (char *)s1;
 803              		.loc 1 343 0
 804 0408 7B68     		ldr	r3, [r7, #4]
 805 040a 09E0     		b	.L57
 806              	.L59:
 344:../src/os/rt-thread/src/kservice.c **** 		s1 ++;
 807              		.loc 1 344 0
 808 040c 7B68     		ldr	r3, [r7, #4]
 809 040e 03F10103 		add	r3, r3, #1
 810 0412 7B60     		str	r3, [r7, #4]
 811              	.L58:
 339:../src/os/rt-thread/src/kservice.c **** 	while (l1 >= l2)
 812              		.loc 1 339 0 discriminator 1
 813 0414 FA68     		ldr	r2, [r7, #12]
 814 0416 BB68     		ldr	r3, [r7, #8]
 815 0418 9A42     		cmp	r2, r3
 816 041a E8DA     		bge	.L60
 345:../src/os/rt-thread/src/kservice.c **** 	}
 346:../src/os/rt-thread/src/kservice.c **** 
 347:../src/os/rt-thread/src/kservice.c **** 	return RT_NULL;
 817              		.loc 1 347 0
 818 041c 4FF00003 		mov	r3, #0
 819              	.L57:
 348:../src/os/rt-thread/src/kservice.c **** }
 820              		.loc 1 348 0
 821 0420 1846     		mov	r0, r3
 822 0422 07F11007 		add	r7, r7, #16
 823 0426 BD46     		mov	sp, r7
 824 0428 80BD     		pop	{r7, pc}
 825              		.cfi_endproc
 826              	.LFE12:
 828 042a 00BF     		.align	2
 829              		.global	rt_strcasecmp
 830              		.thumb
 831              		.thumb_func
 833              	rt_strcasecmp:
 834              	.LFB13:
 349:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strstr);
 350:../src/os/rt-thread/src/kservice.c **** 
 351:../src/os/rt-thread/src/kservice.c **** /**
 352:../src/os/rt-thread/src/kservice.c ****  * This function will compare two strings while ignoring differences in case
 353:../src/os/rt-thread/src/kservice.c ****  *
 354:../src/os/rt-thread/src/kservice.c ****  * @param a the string to be compared
 355:../src/os/rt-thread/src/kservice.c ****  * @param b the string to be compared
 356:../src/os/rt-thread/src/kservice.c ****  *
 357:../src/os/rt-thread/src/kservice.c ****  * @return the result
 358:../src/os/rt-thread/src/kservice.c ****  */
 359:../src/os/rt-thread/src/kservice.c **** rt_uint32_t rt_strcasecmp(const char *a, const char *b)
 360:../src/os/rt-thread/src/kservice.c **** {
 835              		.loc 1 360 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 16
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840 042c 80B4     		push	{r7}
 841              	.LCFI24:
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 7, -4
 844 042e 85B0     		sub	sp, sp, #20
 845              	.LCFI25:
 846              		.cfi_def_cfa_offset 24
 847 0430 00AF     		add	r7, sp, #0
 848              	.LCFI26:
 849              		.cfi_def_cfa_register 7
 850 0432 7860     		str	r0, [r7, #4]
 851 0434 3960     		str	r1, [r7, #0]
 852              	.L65:
 361:../src/os/rt-thread/src/kservice.c **** 	int ca, cb;
 362:../src/os/rt-thread/src/kservice.c **** 
 363:../src/os/rt-thread/src/kservice.c **** 	do
 364:../src/os/rt-thread/src/kservice.c **** 	{
 365:../src/os/rt-thread/src/kservice.c **** 		ca = *a++ & 0xff;
 853              		.loc 1 365 0
 854 0436 7B68     		ldr	r3, [r7, #4]
 855 0438 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 856 043a FB60     		str	r3, [r7, #12]
 857 043c 7B68     		ldr	r3, [r7, #4]
 858 043e 03F10103 		add	r3, r3, #1
 859 0442 7B60     		str	r3, [r7, #4]
 366:../src/os/rt-thread/src/kservice.c **** 		cb = *b++ & 0xff;
 860              		.loc 1 366 0
 861 0444 3B68     		ldr	r3, [r7, #0]
 862 0446 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 863 0448 BB60     		str	r3, [r7, #8]
 864 044a 3B68     		ldr	r3, [r7, #0]
 865 044c 03F10103 		add	r3, r3, #1
 866 0450 3B60     		str	r3, [r7, #0]
 367:../src/os/rt-thread/src/kservice.c **** 		if (ca >= 'A' && ca <= 'Z')
 867              		.loc 1 367 0
 868 0452 FB68     		ldr	r3, [r7, #12]
 869 0454 402B     		cmp	r3, #64
 870 0456 06DD     		ble	.L62
 871              		.loc 1 367 0 is_stmt 0 discriminator 1
 872 0458 FB68     		ldr	r3, [r7, #12]
 873 045a 5A2B     		cmp	r3, #90
 874 045c 03DC     		bgt	.L62
 368:../src/os/rt-thread/src/kservice.c **** 			ca += 'a' - 'A';
 875              		.loc 1 368 0 is_stmt 1
 876 045e FB68     		ldr	r3, [r7, #12]
 877 0460 03F12003 		add	r3, r3, #32
 878 0464 FB60     		str	r3, [r7, #12]
 879              	.L62:
 369:../src/os/rt-thread/src/kservice.c **** 		if (cb >= 'A' && cb <= 'Z')
 880              		.loc 1 369 0
 881 0466 BB68     		ldr	r3, [r7, #8]
 882 0468 402B     		cmp	r3, #64
 883 046a 06DD     		ble	.L63
 884              		.loc 1 369 0 is_stmt 0 discriminator 1
 885 046c BB68     		ldr	r3, [r7, #8]
 886 046e 5A2B     		cmp	r3, #90
 887 0470 03DC     		bgt	.L63
 370:../src/os/rt-thread/src/kservice.c **** 			cb += 'a' - 'A';
 888              		.loc 1 370 0 is_stmt 1
 889 0472 BB68     		ldr	r3, [r7, #8]
 890 0474 03F12003 		add	r3, r3, #32
 891 0478 BB60     		str	r3, [r7, #8]
 892              	.L63:
 371:../src/os/rt-thread/src/kservice.c **** 	}
 372:../src/os/rt-thread/src/kservice.c **** 	while (ca == cb && ca != '\0');
 893              		.loc 1 372 0
 894 047a FA68     		ldr	r2, [r7, #12]
 895 047c BB68     		ldr	r3, [r7, #8]
 896 047e 9A42     		cmp	r2, r3
 897 0480 02D1     		bne	.L64
 898              		.loc 1 372 0 is_stmt 0 discriminator 1
 899 0482 FB68     		ldr	r3, [r7, #12]
 900 0484 002B     		cmp	r3, #0
 901 0486 D6D1     		bne	.L65
 902              	.L64:
 373:../src/os/rt-thread/src/kservice.c **** 
 374:../src/os/rt-thread/src/kservice.c **** 	return ca - cb;
 903              		.loc 1 374 0 is_stmt 1
 904 0488 FA68     		ldr	r2, [r7, #12]
 905 048a BB68     		ldr	r3, [r7, #8]
 906 048c D31A     		subs	r3, r2, r3
 375:../src/os/rt-thread/src/kservice.c **** }
 907              		.loc 1 375 0
 908 048e 1846     		mov	r0, r3
 909 0490 07F11407 		add	r7, r7, #20
 910 0494 BD46     		mov	sp, r7
 911 0496 80BC     		pop	{r7}
 912 0498 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE13:
 916 049a 00BF     		.align	2
 917              		.global	rt_strncpy
 918              		.thumb
 919              		.thumb_func
 921              	rt_strncpy:
 922              	.LFB14:
 376:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcasecmp);
 377:../src/os/rt-thread/src/kservice.c **** 
 378:../src/os/rt-thread/src/kservice.c **** /**
 379:../src/os/rt-thread/src/kservice.c ****  * This function will copy string no more than n bytes.
 380:../src/os/rt-thread/src/kservice.c ****  *
 381:../src/os/rt-thread/src/kservice.c ****  * @param dst the string to copy
 382:../src/os/rt-thread/src/kservice.c ****  * @param src the string to be copied
 383:../src/os/rt-thread/src/kservice.c ****  * @param n the maximum copied length
 384:../src/os/rt-thread/src/kservice.c ****  *
 385:../src/os/rt-thread/src/kservice.c ****  * @return the result
 386:../src/os/rt-thread/src/kservice.c ****  */
 387:../src/os/rt-thread/src/kservice.c **** char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
 388:../src/os/rt-thread/src/kservice.c **** {
 923              		.loc 1 388 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 24
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928 049c 80B4     		push	{r7}
 929              	.LCFI27:
 930              		.cfi_def_cfa_offset 4
 931              		.cfi_offset 7, -4
 932 049e 87B0     		sub	sp, sp, #28
 933              	.LCFI28:
 934              		.cfi_def_cfa_offset 32
 935 04a0 00AF     		add	r7, sp, #0
 936              	.LCFI29:
 937              		.cfi_def_cfa_register 7
 938 04a2 F860     		str	r0, [r7, #12]
 939 04a4 B960     		str	r1, [r7, #8]
 940 04a6 7A60     		str	r2, [r7, #4]
 389:../src/os/rt-thread/src/kservice.c **** 	if (n != 0)
 941              		.loc 1 389 0
 942 04a8 7B68     		ldr	r3, [r7, #4]
 943 04aa 002B     		cmp	r3, #0
 944 04ac 30D0     		beq	.L68
 945              	.LBB2:
 390:../src/os/rt-thread/src/kservice.c **** 	{
 391:../src/os/rt-thread/src/kservice.c **** 		char *d = dst;
 946              		.loc 1 391 0
 947 04ae FB68     		ldr	r3, [r7, #12]
 948 04b0 7B61     		str	r3, [r7, #20]
 392:../src/os/rt-thread/src/kservice.c **** 		const char *s = src;
 949              		.loc 1 392 0
 950 04b2 BB68     		ldr	r3, [r7, #8]
 951 04b4 3B61     		str	r3, [r7, #16]
 952              	.L72:
 393:../src/os/rt-thread/src/kservice.c **** 
 394:../src/os/rt-thread/src/kservice.c **** 		do
 395:../src/os/rt-thread/src/kservice.c **** 		{
 396:../src/os/rt-thread/src/kservice.c **** 			if ((*d++ = *s++) == 0)
 953              		.loc 1 396 0
 954 04b6 3B69     		ldr	r3, [r7, #16]
 955 04b8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 956 04ba 7B69     		ldr	r3, [r7, #20]
 957 04bc 1A70     		strb	r2, [r3, #0]
 958 04be 7B69     		ldr	r3, [r7, #20]
 959 04c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 960 04c2 002B     		cmp	r3, #0
 961 04c4 14BF     		ite	ne
 962 04c6 0023     		movne	r3, #0
 963 04c8 0123     		moveq	r3, #1
 964 04ca DBB2     		uxtb	r3, r3
 965 04cc 7A69     		ldr	r2, [r7, #20]
 966 04ce 02F10102 		add	r2, r2, #1
 967 04d2 7A61     		str	r2, [r7, #20]
 968 04d4 3A69     		ldr	r2, [r7, #16]
 969 04d6 02F10102 		add	r2, r2, #1
 970 04da 3A61     		str	r2, [r7, #16]
 971 04dc 002B     		cmp	r3, #0
 972 04de 10D0     		beq	.L69
 397:../src/os/rt-thread/src/kservice.c **** 			{
 398:../src/os/rt-thread/src/kservice.c **** 				/* NUL pad the remaining n-1 bytes */
 399:../src/os/rt-thread/src/kservice.c **** 				while (--n != 0)
 973              		.loc 1 399 0
 974 04e0 07E0     		b	.L70
 975              	.L71:
 400:../src/os/rt-thread/src/kservice.c **** 					*d++ = 0;
 976              		.loc 1 400 0
 977 04e2 7B69     		ldr	r3, [r7, #20]
 978 04e4 4FF00002 		mov	r2, #0
 979 04e8 1A70     		strb	r2, [r3, #0]
 980 04ea 7B69     		ldr	r3, [r7, #20]
 981 04ec 03F10103 		add	r3, r3, #1
 982 04f0 7B61     		str	r3, [r7, #20]
 983              	.L70:
 399:../src/os/rt-thread/src/kservice.c **** 				while (--n != 0)
 984              		.loc 1 399 0 discriminator 1
 985 04f2 7B68     		ldr	r3, [r7, #4]
 986 04f4 03F1FF33 		add	r3, r3, #-1
 987 04f8 7B60     		str	r3, [r7, #4]
 988 04fa 7B68     		ldr	r3, [r7, #4]
 989 04fc 002B     		cmp	r3, #0
 990 04fe F0D1     		bne	.L71
 401:../src/os/rt-thread/src/kservice.c **** 				break;
 991              		.loc 1 401 0
 992 0500 06E0     		b	.L68
 993              	.L69:
 402:../src/os/rt-thread/src/kservice.c **** 			}
 403:../src/os/rt-thread/src/kservice.c **** 		} while (--n != 0);
 994              		.loc 1 403 0
 995 0502 7B68     		ldr	r3, [r7, #4]
 996 0504 03F1FF33 		add	r3, r3, #-1
 997 0508 7B60     		str	r3, [r7, #4]
 998 050a 7B68     		ldr	r3, [r7, #4]
 999 050c 002B     		cmp	r3, #0
 1000 050e D2D1     		bne	.L72
 1001              	.L68:
 1002              	.LBE2:
 404:../src/os/rt-thread/src/kservice.c **** 	}
 405:../src/os/rt-thread/src/kservice.c **** 
 406:../src/os/rt-thread/src/kservice.c **** 	return (dst);
 1003              		.loc 1 406 0
 1004 0510 FB68     		ldr	r3, [r7, #12]
 407:../src/os/rt-thread/src/kservice.c **** }
 1005              		.loc 1 407 0
 1006 0512 1846     		mov	r0, r3
 1007 0514 07F11C07 		add	r7, r7, #28
 1008 0518 BD46     		mov	sp, r7
 1009 051a 80BC     		pop	{r7}
 1010 051c 7047     		bx	lr
 1011              		.cfi_endproc
 1012              	.LFE14:
 1014 051e 00BF     		.align	2
 1015              		.global	rt_strncmp
 1016              		.thumb
 1017              		.thumb_func
 1019              	rt_strncmp:
 1020              	.LFB15:
 408:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncpy);
 409:../src/os/rt-thread/src/kservice.c **** 
 410:../src/os/rt-thread/src/kservice.c **** /**
 411:../src/os/rt-thread/src/kservice.c ****  * This function will compare two strings with specified maximum length
 412:../src/os/rt-thread/src/kservice.c ****  *
 413:../src/os/rt-thread/src/kservice.c ****  * @param cs the string to be compared
 414:../src/os/rt-thread/src/kservice.c ****  * @param ct the string to be compared
 415:../src/os/rt-thread/src/kservice.c ****  * @param count the maximum compare length
 416:../src/os/rt-thread/src/kservice.c ****  *
 417:../src/os/rt-thread/src/kservice.c ****  * @return the result
 418:../src/os/rt-thread/src/kservice.c ****  */
 419:../src/os/rt-thread/src/kservice.c **** rt_ubase_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
 420:../src/os/rt-thread/src/kservice.c **** {
 1021              		.loc 1 420 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 16
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025              		@ link register save eliminated.
 1026 0520 90B4     		push	{r4, r7}
 1027              	.LCFI30:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 4, -8
 1030              		.cfi_offset 7, -4
 1031 0522 84B0     		sub	sp, sp, #16
 1032              	.LCFI31:
 1033              		.cfi_def_cfa_offset 24
 1034 0524 00AF     		add	r7, sp, #0
 1035              	.LCFI32:
 1036              		.cfi_def_cfa_register 7
 1037 0526 F860     		str	r0, [r7, #12]
 1038 0528 B960     		str	r1, [r7, #8]
 1039 052a 7A60     		str	r2, [r7, #4]
 421:../src/os/rt-thread/src/kservice.c **** 	register signed char __res = 0;
 1040              		.loc 1 421 0
 1041 052c 4FF00004 		mov	r4, #0
 422:../src/os/rt-thread/src/kservice.c **** 
 423:../src/os/rt-thread/src/kservice.c **** 	while (count)
 1042              		.loc 1 423 0
 1043 0530 23E0     		b	.L75
 1044              	.L77:
 424:../src/os/rt-thread/src/kservice.c **** 	{
 425:../src/os/rt-thread/src/kservice.c **** 		if ((__res = *cs - *ct++) != 0 || !*cs++)
 1045              		.loc 1 425 0
 1046 0532 FB68     		ldr	r3, [r7, #12]
 1047 0534 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1048 0536 BB68     		ldr	r3, [r7, #8]
 1049 0538 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1050 053a D31A     		subs	r3, r2, r3
 1051 053c DBB2     		uxtb	r3, r3
 1052 053e DCB2     		uxtb	r4, r3
 1053 0540 63B2     		sxtb	r3, r4
 1054 0542 002B     		cmp	r3, #0
 1055 0544 0CBF     		ite	eq
 1056 0546 0023     		moveq	r3, #0
 1057 0548 0123     		movne	r3, #1
 1058 054a DBB2     		uxtb	r3, r3
 1059 054c BA68     		ldr	r2, [r7, #8]
 1060 054e 02F10102 		add	r2, r2, #1
 1061 0552 BA60     		str	r2, [r7, #8]
 1062 0554 002B     		cmp	r3, #0
 1063 0556 13D1     		bne	.L76
 1064              		.loc 1 425 0 is_stmt 0 discriminator 1
 1065 0558 FB68     		ldr	r3, [r7, #12]
 1066 055a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1067 055c 002B     		cmp	r3, #0
 1068 055e 14BF     		ite	ne
 1069 0560 0023     		movne	r3, #0
 1070 0562 0123     		moveq	r3, #1
 1071 0564 DBB2     		uxtb	r3, r3
 1072 0566 FA68     		ldr	r2, [r7, #12]
 1073 0568 02F10102 		add	r2, r2, #1
 1074 056c FA60     		str	r2, [r7, #12]
 1075 056e 002B     		cmp	r3, #0
 1076 0570 06D1     		bne	.L76
 426:../src/os/rt-thread/src/kservice.c **** 			break;
 427:../src/os/rt-thread/src/kservice.c **** 		count --;
 1077              		.loc 1 427 0 is_stmt 1
 1078 0572 7B68     		ldr	r3, [r7, #4]
 1079 0574 03F1FF33 		add	r3, r3, #-1
 1080 0578 7B60     		str	r3, [r7, #4]
 1081              	.L75:
 423:../src/os/rt-thread/src/kservice.c **** 	while (count)
 1082              		.loc 1 423 0 discriminator 1
 1083 057a 7B68     		ldr	r3, [r7, #4]
 1084 057c 002B     		cmp	r3, #0
 1085 057e D8D1     		bne	.L77
 1086              	.L76:
 428:../src/os/rt-thread/src/kservice.c **** 	}
 429:../src/os/rt-thread/src/kservice.c **** 
 430:../src/os/rt-thread/src/kservice.c **** 	return __res;
 1087              		.loc 1 430 0
 1088 0580 63B2     		sxtb	r3, r4
 431:../src/os/rt-thread/src/kservice.c **** }
 1089              		.loc 1 431 0
 1090 0582 1846     		mov	r0, r3
 1091 0584 07F11007 		add	r7, r7, #16
 1092 0588 BD46     		mov	sp, r7
 1093 058a 90BC     		pop	{r4, r7}
 1094 058c 7047     		bx	lr
 1095              		.cfi_endproc
 1096              	.LFE15:
 1098 058e 00BF     		.align	2
 1099              		.global	rt_strcmp
 1100              		.thumb
 1101              		.thumb_func
 1103              	rt_strcmp:
 1104              	.LFB16:
 432:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncmp);
 433:../src/os/rt-thread/src/kservice.c **** 
 434:../src/os/rt-thread/src/kservice.c **** /**
 435:../src/os/rt-thread/src/kservice.c ****  * This function will compare two strings without specified length
 436:../src/os/rt-thread/src/kservice.c ****  *
 437:../src/os/rt-thread/src/kservice.c ****  * @param cs the string to be compared
 438:../src/os/rt-thread/src/kservice.c ****  * @param ct the string to be compared
 439:../src/os/rt-thread/src/kservice.c ****  *
 440:../src/os/rt-thread/src/kservice.c ****  * @return the result
 441:../src/os/rt-thread/src/kservice.c ****  */
 442:../src/os/rt-thread/src/kservice.c **** rt_ubase_t rt_strcmp(const char *cs, const char *ct)
 443:../src/os/rt-thread/src/kservice.c **** {
 1105              		.loc 1 443 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 8
 1108              		@ frame_needed = 1, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110 0590 80B4     		push	{r7}
 1111              	.LCFI33:
 1112              		.cfi_def_cfa_offset 4
 1113              		.cfi_offset 7, -4
 1114 0592 83B0     		sub	sp, sp, #12
 1115              	.LCFI34:
 1116              		.cfi_def_cfa_offset 16
 1117 0594 00AF     		add	r7, sp, #0
 1118              	.LCFI35:
 1119              		.cfi_def_cfa_register 7
 1120 0596 7860     		str	r0, [r7, #4]
 1121 0598 3960     		str	r1, [r7, #0]
 444:../src/os/rt-thread/src/kservice.c **** 	while (*cs && *cs == *ct)
 1122              		.loc 1 444 0
 1123 059a 07E0     		b	.L80
 1124              	.L82:
 445:../src/os/rt-thread/src/kservice.c **** 		cs++, ct++;
 1125              		.loc 1 445 0
 1126 059c 7B68     		ldr	r3, [r7, #4]
 1127 059e 03F10103 		add	r3, r3, #1
 1128 05a2 7B60     		str	r3, [r7, #4]
 1129 05a4 3B68     		ldr	r3, [r7, #0]
 1130 05a6 03F10103 		add	r3, r3, #1
 1131 05aa 3B60     		str	r3, [r7, #0]
 1132              	.L80:
 444:../src/os/rt-thread/src/kservice.c **** 	while (*cs && *cs == *ct)
 1133              		.loc 1 444 0 discriminator 1
 1134 05ac 7B68     		ldr	r3, [r7, #4]
 1135 05ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1136 05b0 002B     		cmp	r3, #0
 1137 05b2 05D0     		beq	.L81
 444:../src/os/rt-thread/src/kservice.c **** 	while (*cs && *cs == *ct)
 1138              		.loc 1 444 0 is_stmt 0 discriminator 2
 1139 05b4 7B68     		ldr	r3, [r7, #4]
 1140 05b6 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1141 05b8 3B68     		ldr	r3, [r7, #0]
 1142 05ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1143 05bc 9A42     		cmp	r2, r3
 1144 05be EDD0     		beq	.L82
 1145              	.L81:
 446:../src/os/rt-thread/src/kservice.c **** 
 447:../src/os/rt-thread/src/kservice.c **** 	return (*cs - *ct);
 1146              		.loc 1 447 0 is_stmt 1
 1147 05c0 7B68     		ldr	r3, [r7, #4]
 1148 05c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1149 05c4 1A46     		mov	r2, r3
 1150 05c6 3B68     		ldr	r3, [r7, #0]
 1151 05c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1152 05ca D31A     		subs	r3, r2, r3
 448:../src/os/rt-thread/src/kservice.c **** }
 1153              		.loc 1 448 0
 1154 05cc 1846     		mov	r0, r3
 1155 05ce 07F10C07 		add	r7, r7, #12
 1156 05d2 BD46     		mov	sp, r7
 1157 05d4 80BC     		pop	{r7}
 1158 05d6 7047     		bx	lr
 1159              		.cfi_endproc
 1160              	.LFE16:
 1162              		.align	2
 1163              		.global	rt_strlen
 1164              		.thumb
 1165              		.thumb_func
 1167              	rt_strlen:
 1168              	.LFB17:
 449:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcmp);
 450:../src/os/rt-thread/src/kservice.c **** 
 451:../src/os/rt-thread/src/kservice.c **** /**
 452:../src/os/rt-thread/src/kservice.c ****  * This function will return the length of a string, which terminate will
 453:../src/os/rt-thread/src/kservice.c ****  * null character.
 454:../src/os/rt-thread/src/kservice.c ****  *
 455:../src/os/rt-thread/src/kservice.c ****  * @param s the string
 456:../src/os/rt-thread/src/kservice.c ****  *
 457:../src/os/rt-thread/src/kservice.c ****  * @return the length of string
 458:../src/os/rt-thread/src/kservice.c ****  */
 459:../src/os/rt-thread/src/kservice.c **** rt_ubase_t rt_strlen(const char *s)
 460:../src/os/rt-thread/src/kservice.c **** {
 1169              		.loc 1 460 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 16
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173              		@ link register save eliminated.
 1174 05d8 80B4     		push	{r7}
 1175              	.LCFI36:
 1176              		.cfi_def_cfa_offset 4
 1177              		.cfi_offset 7, -4
 1178 05da 85B0     		sub	sp, sp, #20
 1179              	.LCFI37:
 1180              		.cfi_def_cfa_offset 24
 1181 05dc 00AF     		add	r7, sp, #0
 1182              	.LCFI38:
 1183              		.cfi_def_cfa_register 7
 1184 05de 7860     		str	r0, [r7, #4]
 461:../src/os/rt-thread/src/kservice.c **** 	const char *sc;
 462:../src/os/rt-thread/src/kservice.c **** 
 463:../src/os/rt-thread/src/kservice.c **** 	for (sc = s; *sc != '\0'; ++sc) /* nothing */
 1185              		.loc 1 463 0
 1186 05e0 7B68     		ldr	r3, [r7, #4]
 1187 05e2 FB60     		str	r3, [r7, #12]
 1188 05e4 03E0     		b	.L85
 1189              	.L86:
 1190              		.loc 1 463 0 is_stmt 0 discriminator 2
 1191 05e6 FB68     		ldr	r3, [r7, #12]
 1192 05e8 03F10103 		add	r3, r3, #1
 1193 05ec FB60     		str	r3, [r7, #12]
 1194              	.L85:
 1195              		.loc 1 463 0 discriminator 1
 1196 05ee FB68     		ldr	r3, [r7, #12]
 1197 05f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1198 05f2 002B     		cmp	r3, #0
 1199 05f4 F7D1     		bne	.L86
 464:../src/os/rt-thread/src/kservice.c **** 		;
 465:../src/os/rt-thread/src/kservice.c **** 
 466:../src/os/rt-thread/src/kservice.c **** 	return sc - s;
 1200              		.loc 1 466 0 is_stmt 1
 1201 05f6 FA68     		ldr	r2, [r7, #12]
 1202 05f8 7B68     		ldr	r3, [r7, #4]
 1203 05fa D31A     		subs	r3, r2, r3
 467:../src/os/rt-thread/src/kservice.c **** }
 1204              		.loc 1 467 0
 1205 05fc 1846     		mov	r0, r3
 1206 05fe 07F11407 		add	r7, r7, #20
 1207 0602 BD46     		mov	sp, r7
 1208 0604 80BC     		pop	{r7}
 1209 0606 7047     		bx	lr
 1210              		.cfi_endproc
 1211              	.LFE17:
 1213              		.align	2
 1214              		.global	rt_strdup
 1215              		.thumb
 1216              		.thumb_func
 1218              	rt_strdup:
 1219              	.LFB18:
 468:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strlen);
 469:../src/os/rt-thread/src/kservice.c **** 
 470:../src/os/rt-thread/src/kservice.c **** #ifdef RT_USING_HEAP
 471:../src/os/rt-thread/src/kservice.c **** /**
 472:../src/os/rt-thread/src/kservice.c ****  * This function will duplicate a string.
 473:../src/os/rt-thread/src/kservice.c ****  *
 474:../src/os/rt-thread/src/kservice.c ****  * @param s the string to be duplicated
 475:../src/os/rt-thread/src/kservice.c ****  *
 476:../src/os/rt-thread/src/kservice.c ****  * @return the duplicated string pointer
 477:../src/os/rt-thread/src/kservice.c ****  */
 478:../src/os/rt-thread/src/kservice.c **** char *rt_strdup(const char *s)
 479:../src/os/rt-thread/src/kservice.c **** {
 1220              		.loc 1 479 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 16
 1223              		@ frame_needed = 1, uses_anonymous_args = 0
 1224 0608 80B5     		push	{r7, lr}
 1225              	.LCFI39:
 1226              		.cfi_def_cfa_offset 8
 1227              		.cfi_offset 7, -8
 1228              		.cfi_offset 14, -4
 1229 060a 84B0     		sub	sp, sp, #16
 1230              	.LCFI40:
 1231              		.cfi_def_cfa_offset 24
 1232 060c 00AF     		add	r7, sp, #0
 1233              	.LCFI41:
 1234              		.cfi_def_cfa_register 7
 1235 060e 7860     		str	r0, [r7, #4]
 480:../src/os/rt-thread/src/kservice.c **** 	rt_size_t len = rt_strlen(s) + 1;
 1236              		.loc 1 480 0
 1237 0610 7868     		ldr	r0, [r7, #4]
 1238 0612 FFF7FEFF 		bl	rt_strlen
 1239 0616 0346     		mov	r3, r0
 1240 0618 03F10103 		add	r3, r3, #1
 1241 061c FB60     		str	r3, [r7, #12]
 481:../src/os/rt-thread/src/kservice.c **** 	char *tmp = (char *)rt_malloc(len);
 1242              		.loc 1 481 0
 1243 061e F868     		ldr	r0, [r7, #12]
 1244 0620 FFF7FEFF 		bl	rt_malloc
 1245 0624 B860     		str	r0, [r7, #8]
 482:../src/os/rt-thread/src/kservice.c **** 
 483:../src/os/rt-thread/src/kservice.c **** 	if (!tmp)
 1246              		.loc 1 483 0
 1247 0626 BB68     		ldr	r3, [r7, #8]
 1248 0628 002B     		cmp	r3, #0
 1249 062a 02D1     		bne	.L89
 484:../src/os/rt-thread/src/kservice.c **** 		return RT_NULL;
 1250              		.loc 1 484 0
 1251 062c 4FF00003 		mov	r3, #0
 1252 0630 05E0     		b	.L90
 1253              	.L89:
 485:../src/os/rt-thread/src/kservice.c **** 
 486:../src/os/rt-thread/src/kservice.c **** 	rt_memcpy(tmp, s, len);
 1254              		.loc 1 486 0
 1255 0632 B868     		ldr	r0, [r7, #8]
 1256 0634 7968     		ldr	r1, [r7, #4]
 1257 0636 FA68     		ldr	r2, [r7, #12]
 1258 0638 FFF7FEFF 		bl	rt_memcpy
 487:../src/os/rt-thread/src/kservice.c **** 
 488:../src/os/rt-thread/src/kservice.c **** 	return tmp;
 1259              		.loc 1 488 0
 1260 063c BB68     		ldr	r3, [r7, #8]
 1261              	.L90:
 489:../src/os/rt-thread/src/kservice.c **** }
 1262              		.loc 1 489 0
 1263 063e 1846     		mov	r0, r3
 1264 0640 07F11007 		add	r7, r7, #16
 1265 0644 BD46     		mov	sp, r7
 1266 0646 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE18:
 1270              		.section	.rodata
 1271              		.align	2
 1272              	.LC0:
 1273 0000 0A205C20 		.ascii	"\012 \\ | /\012\000"
 1273      7C202F0A 
 1273      00
 1274 0009 000000   		.align	2
 1275              	.LC1:
 1276 000c 2D205254 		.ascii	"- RT -     Thread Operating System\012\000"
 1276      202D2020 
 1276      20202054 
 1276      68726561 
 1276      64204F70 
 1277              		.align	2
 1278              	.LC2:
 1279 0030 202F207C 		.ascii	" / | \\     %d.%d.%d build %s\012\000"
 1279      205C2020 
 1279      20202025 
 1279      642E2564 
 1279      2E256420 
 1280 004e 0000     		.align	2
 1281              	.LC3:
 1282 0050 44656320 		.ascii	"Dec 15 2012\000"
 1282      31352032 
 1282      30313200 
 1283              		.align	2
 1284              	.LC4:
 1285 005c 20323030 		.ascii	" 2006 - 2012 Copyright by rt-thread team\012\000"
 1285      36202D20 
 1285      32303132 
 1285      20436F70 
 1285      79726967 
 1286              		.text
 1287              		.align	2
 1288              		.global	rt_show_version
 1289              		.thumb
 1290              		.thumb_func
 1292              	rt_show_version:
 1293              	.LFB19:
 490:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_strdup);
 491:../src/os/rt-thread/src/kservice.c **** #endif
 492:../src/os/rt-thread/src/kservice.c **** 
 493:../src/os/rt-thread/src/kservice.c **** /**
 494:../src/os/rt-thread/src/kservice.c ****  * This function will show the version of rt-thread rtos
 495:../src/os/rt-thread/src/kservice.c ****  */
 496:../src/os/rt-thread/src/kservice.c **** void rt_show_version(void)
 497:../src/os/rt-thread/src/kservice.c **** {
 1294              		.loc 1 497 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298 0648 80B5     		push	{r7, lr}
 1299              	.LCFI42:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303 064a 82B0     		sub	sp, sp, #8
 1304              	.LCFI43:
 1305              		.cfi_def_cfa_offset 16
 1306 064c 02AF     		add	r7, sp, #8
 1307              	.LCFI44:
 1308              		.cfi_def_cfa 7, 8
 498:../src/os/rt-thread/src/kservice.c **** 	rt_kprintf("\n \\ | /\n");
 1309              		.loc 1 498 0
 1310 064e 0B48     		ldr	r0, .L92
 1311 0650 FFF7FEFF 		bl	rt_kprintf
 499:../src/os/rt-thread/src/kservice.c **** 	rt_kprintf("- RT -     Thread Operating System\n");
 1312              		.loc 1 499 0
 1313 0654 0A48     		ldr	r0, .L92+4
 1314 0656 FFF7FEFF 		bl	rt_kprintf
 500:../src/os/rt-thread/src/kservice.c **** 	rt_kprintf(" / | \\     %d.%d.%d build %s\n", RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 1315              		.loc 1 500 0
 1316 065a 0A4B     		ldr	r3, .L92+8
 1317 065c 0093     		str	r3, [sp, #0]
 1318 065e 0A48     		ldr	r0, .L92+12
 1319 0660 4FF00101 		mov	r1, #1
 1320 0664 4FF00102 		mov	r2, #1
 1321 0668 4FF00003 		mov	r3, #0
 1322 066c FFF7FEFF 		bl	rt_kprintf
 501:../src/os/rt-thread/src/kservice.c **** 	rt_kprintf(" 2006 - 2012 Copyright by rt-thread team\n");
 1323              		.loc 1 501 0
 1324 0670 0648     		ldr	r0, .L92+16
 1325 0672 FFF7FEFF 		bl	rt_kprintf
 502:../src/os/rt-thread/src/kservice.c **** }
 1326              		.loc 1 502 0
 1327 0676 BD46     		mov	sp, r7
 1328 0678 80BD     		pop	{r7, pc}
 1329              	.L93:
 1330 067a 00BF     		.align	2
 1331              	.L92:
 1332 067c 00000000 		.word	.LC0
 1333 0680 0C000000 		.word	.LC1
 1334 0684 50000000 		.word	.LC3
 1335 0688 30000000 		.word	.LC2
 1336 068c 5C000000 		.word	.LC4
 1337              		.cfi_endproc
 1338              	.LFE19:
 1340              		.align	2
 1341              		.thumb
 1342              		.thumb_func
 1344              	divide:
 1345              	.LFB20:
 503:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_show_version);
 504:../src/os/rt-thread/src/kservice.c **** 
 505:../src/os/rt-thread/src/kservice.c **** /* private function */
 506:../src/os/rt-thread/src/kservice.c **** #define isdigit(c)  ((unsigned)((c) - '0') < 10)
 507:../src/os/rt-thread/src/kservice.c **** 
 508:../src/os/rt-thread/src/kservice.c **** rt_inline rt_int32_t divide(rt_int32_t *n, rt_int32_t base)
 509:../src/os/rt-thread/src/kservice.c **** {
 1346              		.loc 1 509 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 16
 1349              		@ frame_needed = 1, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351 0690 80B4     		push	{r7}
 1352              	.LCFI45:
 1353              		.cfi_def_cfa_offset 4
 1354              		.cfi_offset 7, -4
 1355 0692 85B0     		sub	sp, sp, #20
 1356              	.LCFI46:
 1357              		.cfi_def_cfa_offset 24
 1358 0694 00AF     		add	r7, sp, #0
 1359              	.LCFI47:
 1360              		.cfi_def_cfa_register 7
 1361 0696 7860     		str	r0, [r7, #4]
 1362 0698 3960     		str	r1, [r7, #0]
 510:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t res;
 511:../src/os/rt-thread/src/kservice.c **** 
 512:../src/os/rt-thread/src/kservice.c **** 	/* optimized for processor which does not support divide instructions. */
 513:../src/os/rt-thread/src/kservice.c **** 	if (base == 10)
 1363              		.loc 1 513 0
 1364 069a 3B68     		ldr	r3, [r7, #0]
 1365 069c 0A2B     		cmp	r3, #10
 1366 069e 1BD1     		bne	.L95
 514:../src/os/rt-thread/src/kservice.c **** 	{
 515:../src/os/rt-thread/src/kservice.c **** 		res = ((rt_uint32_t)*n) % 10U;
 1367              		.loc 1 515 0
 1368 06a0 7B68     		ldr	r3, [r7, #4]
 1369 06a2 1B68     		ldr	r3, [r3, #0]
 1370 06a4 1946     		mov	r1, r3
 1371 06a6 164B     		ldr	r3, .L98
 1372 06a8 A3FB0123 		umull	r2, r3, r3, r1
 1373 06ac 4FEAD302 		lsr	r2, r3, #3
 1374 06b0 1346     		mov	r3, r2
 1375 06b2 4FEA8303 		lsl	r3, r3, #2
 1376 06b6 9B18     		adds	r3, r3, r2
 1377 06b8 4FEA4303 		lsl	r3, r3, #1
 1378 06bc CA1A     		subs	r2, r1, r3
 1379 06be FA60     		str	r2, [r7, #12]
 516:../src/os/rt-thread/src/kservice.c **** 		*n = ((rt_uint32_t)*n) / 10U;
 1380              		.loc 1 516 0
 1381 06c0 7B68     		ldr	r3, [r7, #4]
 1382 06c2 1B68     		ldr	r3, [r3, #0]
 1383 06c4 1A46     		mov	r2, r3
 1384 06c6 0E4B     		ldr	r3, .L98
 1385 06c8 A3FB0213 		umull	r1, r3, r3, r2
 1386 06cc 4FEAD303 		lsr	r3, r3, #3
 1387 06d0 1A46     		mov	r2, r3
 1388 06d2 7B68     		ldr	r3, [r7, #4]
 1389 06d4 1A60     		str	r2, [r3, #0]
 1390 06d6 0BE0     		b	.L96
 1391              	.L95:
 517:../src/os/rt-thread/src/kservice.c **** 	}
 518:../src/os/rt-thread/src/kservice.c **** 	else
 519:../src/os/rt-thread/src/kservice.c **** 	{
 520:../src/os/rt-thread/src/kservice.c **** 		res = ((rt_uint32_t)*n) % 16U;
 1392              		.loc 1 520 0
 1393 06d8 7B68     		ldr	r3, [r7, #4]
 1394 06da 1B68     		ldr	r3, [r3, #0]
 1395 06dc 03F00F03 		and	r3, r3, #15
 1396 06e0 FB60     		str	r3, [r7, #12]
 521:../src/os/rt-thread/src/kservice.c **** 		*n = ((rt_uint32_t)*n) / 16U;
 1397              		.loc 1 521 0
 1398 06e2 7B68     		ldr	r3, [r7, #4]
 1399 06e4 1B68     		ldr	r3, [r3, #0]
 1400 06e6 4FEA1313 		lsr	r3, r3, #4
 1401 06ea 1A46     		mov	r2, r3
 1402 06ec 7B68     		ldr	r3, [r7, #4]
 1403 06ee 1A60     		str	r2, [r3, #0]
 1404              	.L96:
 522:../src/os/rt-thread/src/kservice.c **** 	}
 523:../src/os/rt-thread/src/kservice.c **** 
 524:../src/os/rt-thread/src/kservice.c **** 	return res;
 1405              		.loc 1 524 0
 1406 06f0 FB68     		ldr	r3, [r7, #12]
 525:../src/os/rt-thread/src/kservice.c **** }
 1407              		.loc 1 525 0
 1408 06f2 1846     		mov	r0, r3
 1409 06f4 07F11407 		add	r7, r7, #20
 1410 06f8 BD46     		mov	sp, r7
 1411 06fa 80BC     		pop	{r7}
 1412 06fc 7047     		bx	lr
 1413              	.L99:
 1414 06fe 00BF     		.align	2
 1415              	.L98:
 1416 0700 CDCCCCCC 		.word	-858993459
 1417              		.cfi_endproc
 1418              	.LFE20:
 1420              		.align	2
 1421              		.thumb
 1422              		.thumb_func
 1424              	skip_atoi:
 1425              	.LFB21:
 526:../src/os/rt-thread/src/kservice.c **** 
 527:../src/os/rt-thread/src/kservice.c **** rt_inline int skip_atoi(const char **s)
 528:../src/os/rt-thread/src/kservice.c **** {
 1426              		.loc 1 528 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 8
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430              		@ link register save eliminated.
 1431 0704 90B4     		push	{r4, r7}
 1432              	.LCFI48:
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 7, -4
 1436 0706 82B0     		sub	sp, sp, #8
 1437              	.LCFI49:
 1438              		.cfi_def_cfa_offset 16
 1439 0708 00AF     		add	r7, sp, #0
 1440              	.LCFI50:
 1441              		.cfi_def_cfa_register 7
 1442 070a 7860     		str	r0, [r7, #4]
 529:../src/os/rt-thread/src/kservice.c **** 	register int i=0;
 1443              		.loc 1 529 0
 1444 070c 4FF00004 		mov	r4, #0
 530:../src/os/rt-thread/src/kservice.c **** 	while (isdigit(**s))
 1445              		.loc 1 530 0
 1446 0710 10E0     		b	.L101
 1447              	.L102:
 531:../src/os/rt-thread/src/kservice.c **** 		i = i * 10 + *((*s)++) - '0';
 1448              		.loc 1 531 0
 1449 0712 2346     		mov	r3, r4
 1450 0714 4FEA8303 		lsl	r3, r3, #2
 1451 0718 1B19     		adds	r3, r3, r4
 1452 071a 4FEA4303 		lsl	r3, r3, #1
 1453 071e 1946     		mov	r1, r3
 1454 0720 7B68     		ldr	r3, [r7, #4]
 1455 0722 1B68     		ldr	r3, [r3, #0]
 1456 0724 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1457 0726 8A18     		adds	r2, r1, r2
 1458 0728 A2F13004 		sub	r4, r2, #48
 1459 072c 03F10102 		add	r2, r3, #1
 1460 0730 7B68     		ldr	r3, [r7, #4]
 1461 0732 1A60     		str	r2, [r3, #0]
 1462              	.L101:
 530:../src/os/rt-thread/src/kservice.c **** 	while (isdigit(**s))
 1463              		.loc 1 530 0 discriminator 1
 1464 0734 7B68     		ldr	r3, [r7, #4]
 1465 0736 1B68     		ldr	r3, [r3, #0]
 1466 0738 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1467 073a A3F13003 		sub	r3, r3, #48
 1468 073e 092B     		cmp	r3, #9
 1469 0740 E7D9     		bls	.L102
 532:../src/os/rt-thread/src/kservice.c **** 
 533:../src/os/rt-thread/src/kservice.c **** 	return i;
 1470              		.loc 1 533 0
 1471 0742 2346     		mov	r3, r4
 534:../src/os/rt-thread/src/kservice.c **** }
 1472              		.loc 1 534 0
 1473 0744 1846     		mov	r0, r3
 1474 0746 07F10807 		add	r7, r7, #8
 1475 074a BD46     		mov	sp, r7
 1476 074c 90BC     		pop	{r4, r7}
 1477 074e 7047     		bx	lr
 1478              		.cfi_endproc
 1479              	.LFE21:
 1481              		.align	2
 1482              		.thumb
 1483              		.thumb_func
 1485              	print_number:
 1486              	.LFB22:
 535:../src/os/rt-thread/src/kservice.c **** 
 536:../src/os/rt-thread/src/kservice.c **** #define ZEROPAD     (1 << 0)	/* pad with zero */
 537:../src/os/rt-thread/src/kservice.c **** #define SIGN        (1 << 1)	/* unsigned/signed long */
 538:../src/os/rt-thread/src/kservice.c **** #define PLUS        (1 << 2)	/* show plus */
 539:../src/os/rt-thread/src/kservice.c **** #define SPACE       (1 << 3)	/* space if plus */
 540:../src/os/rt-thread/src/kservice.c **** #define LEFT        (1 << 4)	/* left justified */
 541:../src/os/rt-thread/src/kservice.c **** #define SPECIAL     (1 << 5)	/* 0x */
 542:../src/os/rt-thread/src/kservice.c **** #define LARGE       (1 << 6)	/* use 'ABCDEF' instead of 'abcdef' */
 543:../src/os/rt-thread/src/kservice.c **** 
 544:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 545:../src/os/rt-thread/src/kservice.c **** static char *print_number(char *buf, char *end, long num, int base, int s, int precision, int type)
 546:../src/os/rt-thread/src/kservice.c **** #else
 547:../src/os/rt-thread/src/kservice.c **** static char *print_number(char *buf, char *end, long num, int base, int s, int type)
 548:../src/os/rt-thread/src/kservice.c **** #endif
 549:../src/os/rt-thread/src/kservice.c **** {
 1487              		.loc 1 549 0
 1488              		.cfi_startproc
 1489              		@ args = 12, pretend = 0, frame = 48
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491 0750 B0B5     		push	{r4, r5, r7, lr}
 1492              	.LCFI51:
 1493              		.cfi_def_cfa_offset 16
 1494              		.cfi_offset 4, -16
 1495              		.cfi_offset 5, -12
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
 1498 0752 8CB0     		sub	sp, sp, #48
 1499              	.LCFI52:
 1500              		.cfi_def_cfa_offset 64
 1501 0754 00AF     		add	r7, sp, #0
 1502              	.LCFI53:
 1503              		.cfi_def_cfa_register 7
 1504 0756 F860     		str	r0, [r7, #12]
 1505 0758 B960     		str	r1, [r7, #8]
 1506 075a 7A60     		str	r2, [r7, #4]
 1507 075c 3B60     		str	r3, [r7, #0]
 550:../src/os/rt-thread/src/kservice.c **** 	char c, sign;
 551:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 552:../src/os/rt-thread/src/kservice.c **** 	char tmp[32];
 553:../src/os/rt-thread/src/kservice.c **** #else
 554:../src/os/rt-thread/src/kservice.c **** 	char tmp[16];
 555:../src/os/rt-thread/src/kservice.c **** #endif
 556:../src/os/rt-thread/src/kservice.c **** 	const char *digits;
 557:../src/os/rt-thread/src/kservice.c **** 	static const char small_digits[] = "0123456789abcdef";
 558:../src/os/rt-thread/src/kservice.c **** 	static const char large_digits[] = "0123456789ABCDEF";
 559:../src/os/rt-thread/src/kservice.c **** 	register int i;
 560:../src/os/rt-thread/src/kservice.c **** 	register int size;
 561:../src/os/rt-thread/src/kservice.c **** 
 562:../src/os/rt-thread/src/kservice.c **** 	size = s;
 1508              		.loc 1 562 0
 1509 075e 3C6C     		ldr	r4, [r7, #64]
 563:../src/os/rt-thread/src/kservice.c **** 
 564:../src/os/rt-thread/src/kservice.c **** 	digits = (type & LARGE) ? large_digits : small_digits;
 1510              		.loc 1 564 0
 1511 0760 BB6C     		ldr	r3, [r7, #72]
 1512 0762 03F04003 		and	r3, r3, #64
 1513 0766 002B     		cmp	r3, #0
 1514 0768 01D0     		beq	.L105
 1515              		.loc 1 564 0 is_stmt 0 discriminator 1
 1516 076a 874B     		ldr	r3, .L142
 1517 076c 00E0     		b	.L106
 1518              	.L105:
 1519              		.loc 1 564 0 discriminator 2
 1520 076e 874B     		ldr	r3, .L142+4
 1521              	.L106:
 1522              		.loc 1 564 0 discriminator 3
 1523 0770 BB62     		str	r3, [r7, #40]
 565:../src/os/rt-thread/src/kservice.c **** 	if (type & LEFT)
 1524              		.loc 1 565 0 is_stmt 1 discriminator 3
 1525 0772 BB6C     		ldr	r3, [r7, #72]
 1526 0774 03F01003 		and	r3, r3, #16
 1527 0778 002B     		cmp	r3, #0
 1528 077a 03D0     		beq	.L107
 566:../src/os/rt-thread/src/kservice.c **** 		type &= ~ZEROPAD;
 1529              		.loc 1 566 0
 1530 077c BB6C     		ldr	r3, [r7, #72]
 1531 077e 23F00103 		bic	r3, r3, #1
 1532 0782 BB64     		str	r3, [r7, #72]
 1533              	.L107:
 567:../src/os/rt-thread/src/kservice.c **** 
 568:../src/os/rt-thread/src/kservice.c **** 	c = (type & ZEROPAD) ? '0' : ' ';
 1534              		.loc 1 568 0
 1535 0784 BB6C     		ldr	r3, [r7, #72]
 1536 0786 03F00103 		and	r3, r3, #1
 1537 078a 002B     		cmp	r3, #0
 1538 078c 02D0     		beq	.L108
 1539              		.loc 1 568 0 is_stmt 0 discriminator 1
 1540 078e 4FF03003 		mov	r3, #48
 1541 0792 01E0     		b	.L109
 1542              	.L108:
 1543              		.loc 1 568 0 discriminator 2
 1544 0794 4FF02003 		mov	r3, #32
 1545              	.L109:
 1546              		.loc 1 568 0 discriminator 3
 1547 0798 87F82730 		strb	r3, [r7, #39]
 569:../src/os/rt-thread/src/kservice.c **** 
 570:../src/os/rt-thread/src/kservice.c **** 	/* get sign */
 571:../src/os/rt-thread/src/kservice.c **** 	sign = 0;
 1548              		.loc 1 571 0 is_stmt 1 discriminator 3
 1549 079c 4FF00003 		mov	r3, #0
 1550 07a0 87F82F30 		strb	r3, [r7, #47]
 572:../src/os/rt-thread/src/kservice.c **** 	if (type & SIGN)
 1551              		.loc 1 572 0 discriminator 3
 1552 07a4 BB6C     		ldr	r3, [r7, #72]
 1553 07a6 03F00203 		and	r3, r3, #2
 1554 07aa 002B     		cmp	r3, #0
 1555 07ac 1ED0     		beq	.L110
 573:../src/os/rt-thread/src/kservice.c **** 	{
 574:../src/os/rt-thread/src/kservice.c **** 		if (num < 0)
 1556              		.loc 1 574 0
 1557 07ae 7B68     		ldr	r3, [r7, #4]
 1558 07b0 002B     		cmp	r3, #0
 1559 07b2 08DA     		bge	.L111
 575:../src/os/rt-thread/src/kservice.c **** 		{
 576:../src/os/rt-thread/src/kservice.c **** 			sign = '-';
 1560              		.loc 1 576 0
 1561 07b4 4FF02D03 		mov	r3, #45
 1562 07b8 87F82F30 		strb	r3, [r7, #47]
 577:../src/os/rt-thread/src/kservice.c **** 			num = -num;
 1563              		.loc 1 577 0
 1564 07bc 7B68     		ldr	r3, [r7, #4]
 1565 07be C3F10003 		rsb	r3, r3, #0
 1566 07c2 7B60     		str	r3, [r7, #4]
 1567 07c4 12E0     		b	.L110
 1568              	.L111:
 578:../src/os/rt-thread/src/kservice.c **** 		}
 579:../src/os/rt-thread/src/kservice.c **** 		else if (type & PLUS) sign = '+';
 1569              		.loc 1 579 0
 1570 07c6 BB6C     		ldr	r3, [r7, #72]
 1571 07c8 03F00403 		and	r3, r3, #4
 1572 07cc 002B     		cmp	r3, #0
 1573 07ce 04D0     		beq	.L112
 1574              		.loc 1 579 0 is_stmt 0 discriminator 1
 1575 07d0 4FF02B03 		mov	r3, #43
 1576 07d4 87F82F30 		strb	r3, [r7, #47]
 1577 07d8 08E0     		b	.L110
 1578              	.L112:
 580:../src/os/rt-thread/src/kservice.c **** 		else if (type & SPACE) sign = ' ';
 1579              		.loc 1 580 0 is_stmt 1
 1580 07da BB6C     		ldr	r3, [r7, #72]
 1581 07dc 03F00803 		and	r3, r3, #8
 1582 07e0 002B     		cmp	r3, #0
 1583 07e2 03D0     		beq	.L110
 1584              		.loc 1 580 0 is_stmt 0 discriminator 1
 1585 07e4 4FF02003 		mov	r3, #32
 1586 07e8 87F82F30 		strb	r3, [r7, #47]
 1587              	.L110:
 581:../src/os/rt-thread/src/kservice.c **** 	}
 582:../src/os/rt-thread/src/kservice.c **** 
 583:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 584:../src/os/rt-thread/src/kservice.c **** 	if (type & SPECIAL)
 585:../src/os/rt-thread/src/kservice.c **** 	{
 586:../src/os/rt-thread/src/kservice.c **** 		if (base == 16) size -= 2;
 587:../src/os/rt-thread/src/kservice.c **** 		else if (base == 8) size--;
 588:../src/os/rt-thread/src/kservice.c **** 	}
 589:../src/os/rt-thread/src/kservice.c **** #endif
 590:../src/os/rt-thread/src/kservice.c **** 
 591:../src/os/rt-thread/src/kservice.c **** 	i = 0;
 1588              		.loc 1 591 0 is_stmt 1
 1589 07ec 4FF00005 		mov	r5, #0
 592:../src/os/rt-thread/src/kservice.c **** 	if (num == 0)
 1590              		.loc 1 592 0
 1591 07f0 7B68     		ldr	r3, [r7, #4]
 1592 07f2 002B     		cmp	r3, #0
 1593 07f4 1BD1     		bne	.L139
 593:../src/os/rt-thread/src/kservice.c **** 		tmp[i++]='0';
 1594              		.loc 1 593 0
 1595 07f6 07F13001 		add	r1, r7, #48
 1596 07fa 4B19     		adds	r3, r1, r5
 1597 07fc 4FF03002 		mov	r2, #48
 1598 0800 03F81C2C 		strb	r2, [r3, #-28]
 1599 0804 05F10105 		add	r5, r5, #1
 1600 0808 15E0     		b	.L114
 1601              	.L116:
 594:../src/os/rt-thread/src/kservice.c **** 	else
 595:../src/os/rt-thread/src/kservice.c **** 	{
 596:../src/os/rt-thread/src/kservice.c **** 		while (num != 0)
 597:../src/os/rt-thread/src/kservice.c **** 			tmp[i++] = digits[divide(&num, base)];
 1602              		.loc 1 597 0
 1603 080a 07F10403 		add	r3, r7, #4
 1604 080e 1846     		mov	r0, r3
 1605 0810 3968     		ldr	r1, [r7, #0]
 1606 0812 FFF73DFF 		bl	divide
 1607 0816 0346     		mov	r3, r0
 1608 0818 BA6A     		ldr	r2, [r7, #40]
 1609 081a D318     		adds	r3, r2, r3
 1610 081c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1611 081e 07F13001 		add	r1, r7, #48
 1612 0822 4B19     		adds	r3, r1, r5
 1613 0824 03F81C2C 		strb	r2, [r3, #-28]
 1614 0828 05F10105 		add	r5, r5, #1
 1615 082c 00E0     		b	.L115
 1616              	.L139:
 596:../src/os/rt-thread/src/kservice.c **** 		while (num != 0)
 1617              		.loc 1 596 0
 1618 082e 00BF     		nop
 1619              	.L115:
 596:../src/os/rt-thread/src/kservice.c **** 		while (num != 0)
 1620              		.loc 1 596 0 is_stmt 0 discriminator 1
 1621 0830 7B68     		ldr	r3, [r7, #4]
 1622 0832 002B     		cmp	r3, #0
 1623 0834 E9D1     		bne	.L116
 1624              	.L114:
 598:../src/os/rt-thread/src/kservice.c **** 	}
 599:../src/os/rt-thread/src/kservice.c **** 
 600:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 601:../src/os/rt-thread/src/kservice.c **** 	if (i > precision)
 1625              		.loc 1 601 0 is_stmt 1
 1626 0836 7B6C     		ldr	r3, [r7, #68]
 1627 0838 9D42     		cmp	r5, r3
 1628 083a 00DD     		ble	.L117
 602:../src/os/rt-thread/src/kservice.c **** 		precision = i;
 1629              		.loc 1 602 0
 1630 083c 7D64     		str	r5, [r7, #68]
 1631              	.L117:
 603:../src/os/rt-thread/src/kservice.c **** 	size -= precision;
 1632              		.loc 1 603 0
 1633 083e 7B6C     		ldr	r3, [r7, #68]
 1634 0840 E41A     		subs	r4, r4, r3
 604:../src/os/rt-thread/src/kservice.c **** #else
 605:../src/os/rt-thread/src/kservice.c **** 	size -= i;
 606:../src/os/rt-thread/src/kservice.c **** #endif
 607:../src/os/rt-thread/src/kservice.c **** 
 608:../src/os/rt-thread/src/kservice.c **** 	if (!(type&(ZEROPAD | LEFT)))
 1635              		.loc 1 608 0
 1636 0842 BB6C     		ldr	r3, [r7, #72]
 1637 0844 03F01103 		and	r3, r3, #17
 1638 0848 002B     		cmp	r3, #0
 1639 084a 1FD1     		bne	.L118
 609:../src/os/rt-thread/src/kservice.c **** 	{
 610:../src/os/rt-thread/src/kservice.c **** 		if ((sign)&&(size>0))
 1640              		.loc 1 610 0
 1641 084c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1642 0850 002B     		cmp	r3, #0
 1643 0852 11D0     		beq	.L140
 1644              		.loc 1 610 0 is_stmt 0 discriminator 1
 1645 0854 002C     		cmp	r4, #0
 1646 0856 0FDD     		ble	.L140
 611:../src/os/rt-thread/src/kservice.c **** 			size--;
 1647              		.loc 1 611 0 is_stmt 1
 1648 0858 04F1FF34 		add	r4, r4, #-1
 612:../src/os/rt-thread/src/kservice.c **** 
 613:../src/os/rt-thread/src/kservice.c **** 		while (size-->0)
 1649              		.loc 1 613 0
 1650 085c 0CE0     		b	.L140
 1651              	.L122:
 614:../src/os/rt-thread/src/kservice.c **** 		{
 615:../src/os/rt-thread/src/kservice.c **** 			if (buf <= end)
 1652              		.loc 1 615 0
 1653 085e FA68     		ldr	r2, [r7, #12]
 1654 0860 BB68     		ldr	r3, [r7, #8]
 1655 0862 9A42     		cmp	r2, r3
 1656 0864 03D8     		bhi	.L121
 616:../src/os/rt-thread/src/kservice.c **** 				*buf = ' ';
 1657              		.loc 1 616 0
 1658 0866 FB68     		ldr	r3, [r7, #12]
 1659 0868 4FF02002 		mov	r2, #32
 1660 086c 1A70     		strb	r2, [r3, #0]
 1661              	.L121:
 617:../src/os/rt-thread/src/kservice.c **** 			++ buf;
 1662              		.loc 1 617 0
 1663 086e FB68     		ldr	r3, [r7, #12]
 1664 0870 03F10103 		add	r3, r3, #1
 1665 0874 FB60     		str	r3, [r7, #12]
 1666 0876 00E0     		b	.L120
 1667              	.L140:
 613:../src/os/rt-thread/src/kservice.c **** 		while (size-->0)
 1668              		.loc 1 613 0
 1669 0878 00BF     		nop
 1670              	.L120:
 613:../src/os/rt-thread/src/kservice.c **** 		while (size-->0)
 1671              		.loc 1 613 0 is_stmt 0 discriminator 1
 1672 087a 002C     		cmp	r4, #0
 1673 087c D4BF     		ite	le
 1674 087e 0023     		movle	r3, #0
 1675 0880 0123     		movgt	r3, #1
 1676 0882 DBB2     		uxtb	r3, r3
 1677 0884 04F1FF34 		add	r4, r4, #-1
 1678 0888 002B     		cmp	r3, #0
 1679 088a E8D1     		bne	.L122
 1680              	.L118:
 618:../src/os/rt-thread/src/kservice.c **** 		}
 619:../src/os/rt-thread/src/kservice.c **** 	}
 620:../src/os/rt-thread/src/kservice.c **** 
 621:../src/os/rt-thread/src/kservice.c **** 	if (sign)
 1681              		.loc 1 621 0 is_stmt 1
 1682 088c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1683 0890 002B     		cmp	r3, #0
 1684 0892 0DD0     		beq	.L123
 622:../src/os/rt-thread/src/kservice.c **** 	{
 623:../src/os/rt-thread/src/kservice.c **** 		if (buf <= end)
 1685              		.loc 1 623 0
 1686 0894 FA68     		ldr	r2, [r7, #12]
 1687 0896 BB68     		ldr	r3, [r7, #8]
 1688 0898 9A42     		cmp	r2, r3
 1689 089a 05D8     		bhi	.L124
 624:../src/os/rt-thread/src/kservice.c **** 		{
 625:../src/os/rt-thread/src/kservice.c **** 			*buf = sign;
 1690              		.loc 1 625 0
 1691 089c FB68     		ldr	r3, [r7, #12]
 1692 089e 97F82F20 		ldrb	r2, [r7, #47]
 1693 08a2 1A70     		strb	r2, [r3, #0]
 626:../src/os/rt-thread/src/kservice.c **** 			-- size;
 1694              		.loc 1 626 0
 1695 08a4 04F1FF34 		add	r4, r4, #-1
 1696              	.L124:
 627:../src/os/rt-thread/src/kservice.c **** 		}
 628:../src/os/rt-thread/src/kservice.c **** 		++ buf;
 1697              		.loc 1 628 0
 1698 08a8 FB68     		ldr	r3, [r7, #12]
 1699 08aa 03F10103 		add	r3, r3, #1
 1700 08ae FB60     		str	r3, [r7, #12]
 1701              	.L123:
 629:../src/os/rt-thread/src/kservice.c **** 	}
 630:../src/os/rt-thread/src/kservice.c **** 
 631:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 632:../src/os/rt-thread/src/kservice.c **** 	if (type & SPECIAL)
 633:../src/os/rt-thread/src/kservice.c **** 	{
 634:../src/os/rt-thread/src/kservice.c **** 		if (base==8)
 635:../src/os/rt-thread/src/kservice.c **** 		{
 636:../src/os/rt-thread/src/kservice.c **** 			if (buf <= end)
 637:../src/os/rt-thread/src/kservice.c **** 				*buf = '0';
 638:../src/os/rt-thread/src/kservice.c **** 			++ buf;
 639:../src/os/rt-thread/src/kservice.c **** 		}
 640:../src/os/rt-thread/src/kservice.c **** 		else if (base == 16)
 641:../src/os/rt-thread/src/kservice.c **** 		{
 642:../src/os/rt-thread/src/kservice.c **** 			if (buf <= end)
 643:../src/os/rt-thread/src/kservice.c **** 				*buf = '0';
 644:../src/os/rt-thread/src/kservice.c **** 			++ buf;
 645:../src/os/rt-thread/src/kservice.c **** 			if (buf <= end)
 646:../src/os/rt-thread/src/kservice.c **** 			{
 647:../src/os/rt-thread/src/kservice.c **** 				*buf = type & LARGE? 'X' : 'x';
 648:../src/os/rt-thread/src/kservice.c **** 			}
 649:../src/os/rt-thread/src/kservice.c **** 			++ buf;
 650:../src/os/rt-thread/src/kservice.c **** 		}
 651:../src/os/rt-thread/src/kservice.c **** 	}
 652:../src/os/rt-thread/src/kservice.c **** #endif
 653:../src/os/rt-thread/src/kservice.c **** 
 654:../src/os/rt-thread/src/kservice.c **** 	/* no align to the left */
 655:../src/os/rt-thread/src/kservice.c **** 	if (!(type & LEFT))
 1702              		.loc 1 655 0
 1703 08b0 BB6C     		ldr	r3, [r7, #72]
 1704 08b2 03F01003 		and	r3, r3, #16
 1705 08b6 002B     		cmp	r3, #0
 1706 08b8 23D1     		bne	.L141
 656:../src/os/rt-thread/src/kservice.c **** 	{
 657:../src/os/rt-thread/src/kservice.c **** 		while (size-- > 0)
 1707              		.loc 1 657 0
 1708 08ba 0BE0     		b	.L126
 1709              	.L128:
 658:../src/os/rt-thread/src/kservice.c **** 		{
 659:../src/os/rt-thread/src/kservice.c **** 			if (buf <= end)
 1710              		.loc 1 659 0
 1711 08bc FA68     		ldr	r2, [r7, #12]
 1712 08be BB68     		ldr	r3, [r7, #8]
 1713 08c0 9A42     		cmp	r2, r3
 1714 08c2 03D8     		bhi	.L127
 660:../src/os/rt-thread/src/kservice.c **** 				*buf = c;
 1715              		.loc 1 660 0
 1716 08c4 FB68     		ldr	r3, [r7, #12]
 1717 08c6 97F82720 		ldrb	r2, [r7, #39]
 1718 08ca 1A70     		strb	r2, [r3, #0]
 1719              	.L127:
 661:../src/os/rt-thread/src/kservice.c **** 			++ buf;
 1720              		.loc 1 661 0
 1721 08cc FB68     		ldr	r3, [r7, #12]
 1722 08ce 03F10103 		add	r3, r3, #1
 1723 08d2 FB60     		str	r3, [r7, #12]
 1724              	.L126:
 657:../src/os/rt-thread/src/kservice.c **** 		while (size-- > 0)
 1725              		.loc 1 657 0 discriminator 1
 1726 08d4 002C     		cmp	r4, #0
 1727 08d6 D4BF     		ite	le
 1728 08d8 0023     		movle	r3, #0
 1729 08da 0123     		movgt	r3, #1
 1730 08dc DBB2     		uxtb	r3, r3
 1731 08de 04F1FF34 		add	r4, r4, #-1
 1732 08e2 002B     		cmp	r3, #0
 1733 08e4 EAD1     		bne	.L128
 662:../src/os/rt-thread/src/kservice.c **** 		}
 663:../src/os/rt-thread/src/kservice.c **** 	}
 664:../src/os/rt-thread/src/kservice.c **** 
 665:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 666:../src/os/rt-thread/src/kservice.c **** 	while (i < precision--)
 1734              		.loc 1 666 0
 1735 08e6 0CE0     		b	.L141
 1736              	.L131:
 667:../src/os/rt-thread/src/kservice.c **** 	{
 668:../src/os/rt-thread/src/kservice.c **** 		if (buf <= end)
 1737              		.loc 1 668 0
 1738 08e8 FA68     		ldr	r2, [r7, #12]
 1739 08ea BB68     		ldr	r3, [r7, #8]
 1740 08ec 9A42     		cmp	r2, r3
 1741 08ee 03D8     		bhi	.L130
 669:../src/os/rt-thread/src/kservice.c **** 			*buf = '0';
 1742              		.loc 1 669 0
 1743 08f0 FB68     		ldr	r3, [r7, #12]
 1744 08f2 4FF03002 		mov	r2, #48
 1745 08f6 1A70     		strb	r2, [r3, #0]
 1746              	.L130:
 670:../src/os/rt-thread/src/kservice.c **** 		++ buf;
 1747              		.loc 1 670 0
 1748 08f8 FB68     		ldr	r3, [r7, #12]
 1749 08fa 03F10103 		add	r3, r3, #1
 1750 08fe FB60     		str	r3, [r7, #12]
 1751 0900 00E0     		b	.L129
 1752              	.L141:
 666:../src/os/rt-thread/src/kservice.c **** 	while (i < precision--)
 1753              		.loc 1 666 0
 1754 0902 00BF     		nop
 1755              	.L129:
 666:../src/os/rt-thread/src/kservice.c **** 	while (i < precision--)
 1756              		.loc 1 666 0 is_stmt 0 discriminator 1
 1757 0904 7B6C     		ldr	r3, [r7, #68]
 1758 0906 AB42     		cmp	r3, r5
 1759 0908 D4BF     		ite	le
 1760 090a 0023     		movle	r3, #0
 1761 090c 0123     		movgt	r3, #1
 1762 090e DBB2     		uxtb	r3, r3
 1763 0910 7A6C     		ldr	r2, [r7, #68]
 1764 0912 02F1FF32 		add	r2, r2, #-1
 1765 0916 7A64     		str	r2, [r7, #68]
 1766 0918 002B     		cmp	r3, #0
 1767 091a E5D1     		bne	.L131
 671:../src/os/rt-thread/src/kservice.c **** 	}
 672:../src/os/rt-thread/src/kservice.c **** #endif
 673:../src/os/rt-thread/src/kservice.c **** 
 674:../src/os/rt-thread/src/kservice.c **** 	/* put number in the temporary buffer */
 675:../src/os/rt-thread/src/kservice.c **** 	while (i-- > 0)
 1768              		.loc 1 675 0 is_stmt 1
 1769 091c 0EE0     		b	.L132
 1770              	.L134:
 676:../src/os/rt-thread/src/kservice.c **** 	{
 677:../src/os/rt-thread/src/kservice.c **** 		if (buf <= end)
 1771              		.loc 1 677 0
 1772 091e FA68     		ldr	r2, [r7, #12]
 1773 0920 BB68     		ldr	r3, [r7, #8]
 1774 0922 9A42     		cmp	r2, r3
 1775 0924 06D8     		bhi	.L133
 678:../src/os/rt-thread/src/kservice.c **** 			*buf = tmp[i];
 1776              		.loc 1 678 0
 1777 0926 07F13002 		add	r2, r7, #48
 1778 092a 5319     		adds	r3, r2, r5
 1779 092c 13F81C2C 		ldrb	r2, [r3, #-28]	@ zero_extendqisi2
 1780 0930 FB68     		ldr	r3, [r7, #12]
 1781 0932 1A70     		strb	r2, [r3, #0]
 1782              	.L133:
 679:../src/os/rt-thread/src/kservice.c **** 		++ buf;
 1783              		.loc 1 679 0
 1784 0934 FB68     		ldr	r3, [r7, #12]
 1785 0936 03F10103 		add	r3, r3, #1
 1786 093a FB60     		str	r3, [r7, #12]
 1787              	.L132:
 675:../src/os/rt-thread/src/kservice.c **** 	while (i-- > 0)
 1788              		.loc 1 675 0 discriminator 1
 1789 093c 002D     		cmp	r5, #0
 1790 093e D4BF     		ite	le
 1791 0940 0023     		movle	r3, #0
 1792 0942 0123     		movgt	r3, #1
 1793 0944 DBB2     		uxtb	r3, r3
 1794 0946 05F1FF35 		add	r5, r5, #-1
 1795 094a 002B     		cmp	r3, #0
 1796 094c E7D1     		bne	.L134
 680:../src/os/rt-thread/src/kservice.c **** 	}
 681:../src/os/rt-thread/src/kservice.c **** 
 682:../src/os/rt-thread/src/kservice.c **** 	while (size-- > 0)
 1797              		.loc 1 682 0
 1798 094e 0BE0     		b	.L135
 1799              	.L137:
 683:../src/os/rt-thread/src/kservice.c **** 	{
 684:../src/os/rt-thread/src/kservice.c **** 		if (buf <= end)
 1800              		.loc 1 684 0
 1801 0950 FA68     		ldr	r2, [r7, #12]
 1802 0952 BB68     		ldr	r3, [r7, #8]
 1803 0954 9A42     		cmp	r2, r3
 1804 0956 03D8     		bhi	.L136
 685:../src/os/rt-thread/src/kservice.c **** 			*buf = ' ';
 1805              		.loc 1 685 0
 1806 0958 FB68     		ldr	r3, [r7, #12]
 1807 095a 4FF02002 		mov	r2, #32
 1808 095e 1A70     		strb	r2, [r3, #0]
 1809              	.L136:
 686:../src/os/rt-thread/src/kservice.c **** 		++ buf;
 1810              		.loc 1 686 0
 1811 0960 FB68     		ldr	r3, [r7, #12]
 1812 0962 03F10103 		add	r3, r3, #1
 1813 0966 FB60     		str	r3, [r7, #12]
 1814              	.L135:
 682:../src/os/rt-thread/src/kservice.c **** 	while (size-- > 0)
 1815              		.loc 1 682 0 discriminator 1
 1816 0968 002C     		cmp	r4, #0
 1817 096a D4BF     		ite	le
 1818 096c 0023     		movle	r3, #0
 1819 096e 0123     		movgt	r3, #1
 1820 0970 DBB2     		uxtb	r3, r3
 1821 0972 04F1FF34 		add	r4, r4, #-1
 1822 0976 002B     		cmp	r3, #0
 1823 0978 EAD1     		bne	.L137
 687:../src/os/rt-thread/src/kservice.c **** 	}
 688:../src/os/rt-thread/src/kservice.c **** 
 689:../src/os/rt-thread/src/kservice.c **** 	return buf;
 1824              		.loc 1 689 0
 1825 097a FB68     		ldr	r3, [r7, #12]
 690:../src/os/rt-thread/src/kservice.c **** }
 1826              		.loc 1 690 0
 1827 097c 1846     		mov	r0, r3
 1828 097e 07F13007 		add	r7, r7, #48
 1829 0982 BD46     		mov	sp, r7
 1830 0984 B0BD     		pop	{r4, r5, r7, pc}
 1831              	.L143:
 1832 0986 00BF     		.align	2
 1833              	.L142:
 1834 0988 90000000 		.word	large_digits.5002
 1835 098c A4000000 		.word	small_digits.5001
 1836              		.cfi_endproc
 1837              	.LFE22:
 1839              		.section	.rodata
 1840 0086 0000     		.align	2
 1841              	.LC5:
 1842 0088 284E554C 		.ascii	"(NULL)\000"
 1842      4C2900
 1843              		.text
 1844              		.align	2
 1845              		.thumb
 1846              		.thumb_func
 1848              	vsnprintf:
 1849              	.LFB23:
 691:../src/os/rt-thread/src/kservice.c **** 
 692:../src/os/rt-thread/src/kservice.c **** static rt_int32_t vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
 693:../src/os/rt-thread/src/kservice.c **** {
 1850              		.loc 1 693 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 56
 1853              		@ frame_needed = 1, uses_anonymous_args = 0
 1854 0990 80B5     		push	{r7, lr}
 1855              	.LCFI54:
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 7, -8
 1858              		.cfi_offset 14, -4
 1859 0992 92B0     		sub	sp, sp, #72
 1860              	.LCFI55:
 1861              		.cfi_def_cfa_offset 80
 1862 0994 04AF     		add	r7, sp, #16
 1863              	.LCFI56:
 1864              		.cfi_def_cfa 7, 64
 1865 0996 F860     		str	r0, [r7, #12]
 1866 0998 B960     		str	r1, [r7, #8]
 1867 099a 7A60     		str	r2, [r7, #4]
 1868 099c 3B60     		str	r3, [r7, #0]
 694:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 695:../src/os/rt-thread/src/kservice.c **** 	unsigned long long num;
 696:../src/os/rt-thread/src/kservice.c **** #else
 697:../src/os/rt-thread/src/kservice.c **** 	rt_uint32_t num;
 698:../src/os/rt-thread/src/kservice.c **** #endif
 699:../src/os/rt-thread/src/kservice.c **** 	int i, len;
 700:../src/os/rt-thread/src/kservice.c **** 	char *str, *end, c;
 701:../src/os/rt-thread/src/kservice.c **** 	const char *s;
 702:../src/os/rt-thread/src/kservice.c **** 
 703:../src/os/rt-thread/src/kservice.c **** 	rt_uint8_t base;			/* the base of number */
 704:../src/os/rt-thread/src/kservice.c **** 	rt_uint8_t flags;			/* flags to print number */
 705:../src/os/rt-thread/src/kservice.c **** 	rt_uint8_t qualifier;		/* 'h', 'l', or 'L' for integer fields */
 706:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t field_width;		/* width of output field */
 707:../src/os/rt-thread/src/kservice.c **** 
 708:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 709:../src/os/rt-thread/src/kservice.c **** 	int precision;		/* min. # of digits for integers and max for a string */
 710:../src/os/rt-thread/src/kservice.c **** #endif
 711:../src/os/rt-thread/src/kservice.c **** 
 712:../src/os/rt-thread/src/kservice.c **** 	str = buf;
 1869              		.loc 1 712 0
 1870 099e FB68     		ldr	r3, [r7, #12]
 1871 09a0 BB62     		str	r3, [r7, #40]
 713:../src/os/rt-thread/src/kservice.c **** 	end = buf + size - 1;
 1872              		.loc 1 713 0
 1873 09a2 BB68     		ldr	r3, [r7, #8]
 1874 09a4 03F1FF33 		add	r3, r3, #-1
 1875 09a8 FA68     		ldr	r2, [r7, #12]
 1876 09aa D318     		adds	r3, r2, r3
 1877 09ac 7B62     		str	r3, [r7, #36]
 714:../src/os/rt-thread/src/kservice.c **** 
 715:../src/os/rt-thread/src/kservice.c **** 	/* Make sure end is always >= buf */
 716:../src/os/rt-thread/src/kservice.c **** 	if (end < buf)
 1878              		.loc 1 716 0
 1879 09ae 7A6A     		ldr	r2, [r7, #36]
 1880 09b0 FB68     		ldr	r3, [r7, #12]
 1881 09b2 9A42     		cmp	r2, r3
 1882 09b4 80F0B682 		bcs	.L210
 717:../src/os/rt-thread/src/kservice.c **** 	{
 718:../src/os/rt-thread/src/kservice.c **** 		end = ((char *)-1);
 1883              		.loc 1 718 0
 1884 09b8 4FF0FF33 		mov	r3, #-1
 1885 09bc 7B62     		str	r3, [r7, #36]
 719:../src/os/rt-thread/src/kservice.c **** 		size = end - buf;
 1886              		.loc 1 719 0
 1887 09be 7A6A     		ldr	r2, [r7, #36]
 1888 09c0 FB68     		ldr	r3, [r7, #12]
 1889 09c2 D31A     		subs	r3, r2, r3
 1890 09c4 BB60     		str	r3, [r7, #8]
 720:../src/os/rt-thread/src/kservice.c **** 	}
 721:../src/os/rt-thread/src/kservice.c **** 
 722:../src/os/rt-thread/src/kservice.c **** 	for (; *fmt ; ++fmt)
 1891              		.loc 1 722 0
 1892 09c6 ADE2     		b	.L210
 1893              	.L206:
 723:../src/os/rt-thread/src/kservice.c **** 	{
 724:../src/os/rt-thread/src/kservice.c **** 		if (*fmt != '%')
 1894              		.loc 1 724 0
 1895 09c8 7B68     		ldr	r3, [r7, #4]
 1896 09ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1897 09cc 252B     		cmp	r3, #37
 1898 09ce 0CD0     		beq	.L147
 725:../src/os/rt-thread/src/kservice.c **** 		{
 726:../src/os/rt-thread/src/kservice.c **** 			if (str <= end)
 1899              		.loc 1 726 0
 1900 09d0 BA6A     		ldr	r2, [r7, #40]
 1901 09d2 7B6A     		ldr	r3, [r7, #36]
 1902 09d4 9A42     		cmp	r2, r3
 1903 09d6 03D8     		bhi	.L148
 727:../src/os/rt-thread/src/kservice.c **** 				*str = *fmt;
 1904              		.loc 1 727 0
 1905 09d8 7B68     		ldr	r3, [r7, #4]
 1906 09da 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1907 09dc BB6A     		ldr	r3, [r7, #40]
 1908 09de 1A70     		strb	r2, [r3, #0]
 1909              	.L148:
 728:../src/os/rt-thread/src/kservice.c **** 			++ str;
 1910              		.loc 1 728 0
 1911 09e0 BB6A     		ldr	r3, [r7, #40]
 1912 09e2 03F10103 		add	r3, r3, #1
 1913 09e6 BB62     		str	r3, [r7, #40]
 729:../src/os/rt-thread/src/kservice.c **** 			continue;
 1914              		.loc 1 729 0
 1915 09e8 97E2     		b	.L149
 1916              	.L147:
 730:../src/os/rt-thread/src/kservice.c **** 		}
 731:../src/os/rt-thread/src/kservice.c **** 
 732:../src/os/rt-thread/src/kservice.c **** 		/* process flags */
 733:../src/os/rt-thread/src/kservice.c **** 		flags = 0;
 1917              		.loc 1 733 0
 1918 09ea 4FF00003 		mov	r3, #0
 1919 09ee BB77     		strb	r3, [r7, #30]
 1920              	.L157:
 734:../src/os/rt-thread/src/kservice.c **** 
 735:../src/os/rt-thread/src/kservice.c **** 		while (1)
 736:../src/os/rt-thread/src/kservice.c **** 		{
 737:../src/os/rt-thread/src/kservice.c **** 			/* skips the first '%' also */
 738:../src/os/rt-thread/src/kservice.c **** 			++ fmt;
 1921              		.loc 1 738 0
 1922 09f0 7B68     		ldr	r3, [r7, #4]
 1923 09f2 03F10103 		add	r3, r3, #1
 1924 09f6 7B60     		str	r3, [r7, #4]
 739:../src/os/rt-thread/src/kservice.c **** 			if (*fmt == '-') flags |= LEFT;
 1925              		.loc 1 739 0
 1926 09f8 7B68     		ldr	r3, [r7, #4]
 1927 09fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1928 09fc 2D2B     		cmp	r3, #45
 1929 09fe 04D1     		bne	.L150
 1930              		.loc 1 739 0 is_stmt 0 discriminator 1
 1931 0a00 BB7F     		ldrb	r3, [r7, #30]
 1932 0a02 43F01003 		orr	r3, r3, #16
 1933 0a06 BB77     		strb	r3, [r7, #30]
 740:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '+') flags |= PLUS;
 741:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == ' ') flags |= SPACE;
 742:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '#') flags |= SPECIAL;
 743:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '0') flags |= ZEROPAD;
 744:../src/os/rt-thread/src/kservice.c **** 			else break;
 745:../src/os/rt-thread/src/kservice.c **** 		}
 1934              		.loc 1 745 0 is_stmt 1 discriminator 1
 1935 0a08 F2E7     		b	.L157
 1936              	.L150:
 740:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '+') flags |= PLUS;
 1937              		.loc 1 740 0
 1938 0a0a 7B68     		ldr	r3, [r7, #4]
 1939 0a0c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1940 0a0e 2B2B     		cmp	r3, #43
 1941 0a10 04D1     		bne	.L152
 740:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '+') flags |= PLUS;
 1942              		.loc 1 740 0 is_stmt 0 discriminator 1
 1943 0a12 BB7F     		ldrb	r3, [r7, #30]
 1944 0a14 43F00403 		orr	r3, r3, #4
 1945 0a18 BB77     		strb	r3, [r7, #30]
 1946              		.loc 1 745 0 is_stmt 1 discriminator 1
 1947 0a1a E9E7     		b	.L157
 1948              	.L152:
 741:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == ' ') flags |= SPACE;
 1949              		.loc 1 741 0
 1950 0a1c 7B68     		ldr	r3, [r7, #4]
 1951 0a1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1952 0a20 202B     		cmp	r3, #32
 1953 0a22 04D1     		bne	.L153
 741:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == ' ') flags |= SPACE;
 1954              		.loc 1 741 0 is_stmt 0 discriminator 1
 1955 0a24 BB7F     		ldrb	r3, [r7, #30]
 1956 0a26 43F00803 		orr	r3, r3, #8
 1957 0a2a BB77     		strb	r3, [r7, #30]
 1958              		.loc 1 745 0 is_stmt 1 discriminator 1
 1959 0a2c E0E7     		b	.L157
 1960              	.L153:
 742:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '#') flags |= SPECIAL;
 1961              		.loc 1 742 0
 1962 0a2e 7B68     		ldr	r3, [r7, #4]
 1963 0a30 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1964 0a32 232B     		cmp	r3, #35
 1965 0a34 04D1     		bne	.L154
 742:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '#') flags |= SPECIAL;
 1966              		.loc 1 742 0 is_stmt 0 discriminator 1
 1967 0a36 BB7F     		ldrb	r3, [r7, #30]
 1968 0a38 43F02003 		orr	r3, r3, #32
 1969 0a3c BB77     		strb	r3, [r7, #30]
 1970              		.loc 1 745 0 is_stmt 1 discriminator 1
 1971 0a3e D7E7     		b	.L157
 1972              	.L154:
 743:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '0') flags |= ZEROPAD;
 1973              		.loc 1 743 0
 1974 0a40 7B68     		ldr	r3, [r7, #4]
 1975 0a42 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1976 0a44 302B     		cmp	r3, #48
 1977 0a46 04D1     		bne	.L211
 743:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '0') flags |= ZEROPAD;
 1978              		.loc 1 743 0 is_stmt 0 discriminator 1
 1979 0a48 BB7F     		ldrb	r3, [r7, #30]
 1980 0a4a 43F00103 		orr	r3, r3, #1
 1981 0a4e BB77     		strb	r3, [r7, #30]
 1982              		.loc 1 745 0 is_stmt 1 discriminator 1
 1983 0a50 CEE7     		b	.L157
 1984              	.L211:
 744:../src/os/rt-thread/src/kservice.c **** 			else break;
 1985              		.loc 1 744 0
 1986 0a52 00BF     		nop
 1987              	.L156:
 746:../src/os/rt-thread/src/kservice.c **** 
 747:../src/os/rt-thread/src/kservice.c **** 		/* get field width */
 748:../src/os/rt-thread/src/kservice.c **** 		field_width = -1;
 1988              		.loc 1 748 0
 1989 0a54 4FF0FF33 		mov	r3, #-1
 1990 0a58 BB61     		str	r3, [r7, #24]
 749:../src/os/rt-thread/src/kservice.c **** 		if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 1991              		.loc 1 749 0
 1992 0a5a 7B68     		ldr	r3, [r7, #4]
 1993 0a5c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1994 0a5e A3F13003 		sub	r3, r3, #48
 1995 0a62 092B     		cmp	r3, #9
 1996 0a64 06D8     		bhi	.L158
 1997              		.loc 1 749 0 is_stmt 0 discriminator 1
 1998 0a66 07F10403 		add	r3, r7, #4
 1999 0a6a 1846     		mov	r0, r3
 2000 0a6c FFF74AFE 		bl	skip_atoi
 2001 0a70 B861     		str	r0, [r7, #24]
 2002 0a72 18E0     		b	.L159
 2003              	.L158:
 750:../src/os/rt-thread/src/kservice.c **** 		else if (*fmt == '*')
 2004              		.loc 1 750 0 is_stmt 1
 2005 0a74 7B68     		ldr	r3, [r7, #4]
 2006 0a76 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2007 0a78 2A2B     		cmp	r3, #42
 2008 0a7a 14D1     		bne	.L159
 751:../src/os/rt-thread/src/kservice.c **** 		{
 752:../src/os/rt-thread/src/kservice.c **** 			++ fmt;
 2009              		.loc 1 752 0
 2010 0a7c 7B68     		ldr	r3, [r7, #4]
 2011 0a7e 03F10103 		add	r3, r3, #1
 2012 0a82 7B60     		str	r3, [r7, #4]
 753:../src/os/rt-thread/src/kservice.c **** 			/* it's the next argument */
 754:../src/os/rt-thread/src/kservice.c **** 			field_width = va_arg(args, int);
 2013              		.loc 1 754 0
 2014 0a84 3B68     		ldr	r3, [r7, #0]
 2015 0a86 03F10402 		add	r2, r3, #4
 2016 0a8a 3A60     		str	r2, [r7, #0]
 2017 0a8c 1B68     		ldr	r3, [r3, #0]
 2018 0a8e BB61     		str	r3, [r7, #24]
 755:../src/os/rt-thread/src/kservice.c **** 			if (field_width < 0)
 2019              		.loc 1 755 0
 2020 0a90 BB69     		ldr	r3, [r7, #24]
 2021 0a92 002B     		cmp	r3, #0
 2022 0a94 07DA     		bge	.L159
 756:../src/os/rt-thread/src/kservice.c **** 			{
 757:../src/os/rt-thread/src/kservice.c **** 				field_width = -field_width;
 2023              		.loc 1 757 0
 2024 0a96 BB69     		ldr	r3, [r7, #24]
 2025 0a98 C3F10003 		rsb	r3, r3, #0
 2026 0a9c BB61     		str	r3, [r7, #24]
 758:../src/os/rt-thread/src/kservice.c **** 				flags |= LEFT;
 2027              		.loc 1 758 0
 2028 0a9e BB7F     		ldrb	r3, [r7, #30]
 2029 0aa0 43F01003 		orr	r3, r3, #16
 2030 0aa4 BB77     		strb	r3, [r7, #30]
 2031              	.L159:
 759:../src/os/rt-thread/src/kservice.c **** 			}
 760:../src/os/rt-thread/src/kservice.c **** 		}
 761:../src/os/rt-thread/src/kservice.c **** 
 762:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 763:../src/os/rt-thread/src/kservice.c **** 		/* get the precision */
 764:../src/os/rt-thread/src/kservice.c **** 		precision = -1;
 2032              		.loc 1 764 0
 2033 0aa6 4FF0FF33 		mov	r3, #-1
 2034 0aaa 7B61     		str	r3, [r7, #20]
 765:../src/os/rt-thread/src/kservice.c **** 		if (*fmt == '.')
 2035              		.loc 1 765 0
 2036 0aac 7B68     		ldr	r3, [r7, #4]
 2037 0aae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2038 0ab0 2E2B     		cmp	r3, #46
 2039 0ab2 24D1     		bne	.L160
 766:../src/os/rt-thread/src/kservice.c **** 		{
 767:../src/os/rt-thread/src/kservice.c **** 			++ fmt;
 2040              		.loc 1 767 0
 2041 0ab4 7B68     		ldr	r3, [r7, #4]
 2042 0ab6 03F10103 		add	r3, r3, #1
 2043 0aba 7B60     		str	r3, [r7, #4]
 768:../src/os/rt-thread/src/kservice.c **** 			if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 2044              		.loc 1 768 0
 2045 0abc 7B68     		ldr	r3, [r7, #4]
 2046 0abe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2047 0ac0 A3F13003 		sub	r3, r3, #48
 2048 0ac4 092B     		cmp	r3, #9
 2049 0ac6 06D8     		bhi	.L161
 2050              		.loc 1 768 0 is_stmt 0 discriminator 1
 2051 0ac8 07F10403 		add	r3, r7, #4
 2052 0acc 1846     		mov	r0, r3
 2053 0ace FFF719FE 		bl	skip_atoi
 2054 0ad2 7861     		str	r0, [r7, #20]
 2055 0ad4 0DE0     		b	.L162
 2056              	.L161:
 769:../src/os/rt-thread/src/kservice.c **** 			else if (*fmt == '*')
 2057              		.loc 1 769 0 is_stmt 1
 2058 0ad6 7B68     		ldr	r3, [r7, #4]
 2059 0ad8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2060 0ada 2A2B     		cmp	r3, #42
 2061 0adc 09D1     		bne	.L162
 770:../src/os/rt-thread/src/kservice.c **** 			{
 771:../src/os/rt-thread/src/kservice.c **** 				++ fmt;
 2062              		.loc 1 771 0
 2063 0ade 7B68     		ldr	r3, [r7, #4]
 2064 0ae0 03F10103 		add	r3, r3, #1
 2065 0ae4 7B60     		str	r3, [r7, #4]
 772:../src/os/rt-thread/src/kservice.c **** 				/* it's the next argument */
 773:../src/os/rt-thread/src/kservice.c **** 				precision = va_arg(args, int);
 2066              		.loc 1 773 0
 2067 0ae6 3B68     		ldr	r3, [r7, #0]
 2068 0ae8 03F10402 		add	r2, r3, #4
 2069 0aec 3A60     		str	r2, [r7, #0]
 2070 0aee 1B68     		ldr	r3, [r3, #0]
 2071 0af0 7B61     		str	r3, [r7, #20]
 2072              	.L162:
 774:../src/os/rt-thread/src/kservice.c **** 			}
 775:../src/os/rt-thread/src/kservice.c **** 			if (precision < 0) precision = 0;
 2073              		.loc 1 775 0
 2074 0af2 7B69     		ldr	r3, [r7, #20]
 2075 0af4 002B     		cmp	r3, #0
 2076 0af6 02DA     		bge	.L160
 2077              		.loc 1 775 0 is_stmt 0 discriminator 1
 2078 0af8 4FF00003 		mov	r3, #0
 2079 0afc 7B61     		str	r3, [r7, #20]
 2080              	.L160:
 776:../src/os/rt-thread/src/kservice.c **** 		}
 777:../src/os/rt-thread/src/kservice.c **** #endif
 778:../src/os/rt-thread/src/kservice.c **** 		/* get the conversion qualifier */
 779:../src/os/rt-thread/src/kservice.c **** 		qualifier = 0;
 2081              		.loc 1 779 0 is_stmt 1
 2082 0afe 4FF00003 		mov	r3, #0
 2083 0b02 7B77     		strb	r3, [r7, #29]
 780:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 781:../src/os/rt-thread/src/kservice.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
 782:../src/os/rt-thread/src/kservice.c **** #else
 783:../src/os/rt-thread/src/kservice.c **** 		if (*fmt == 'h' || *fmt == 'l')
 2084              		.loc 1 783 0
 2085 0b04 7B68     		ldr	r3, [r7, #4]
 2086 0b06 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2087 0b08 682B     		cmp	r3, #104
 2088 0b0a 03D0     		beq	.L163
 2089              		.loc 1 783 0 is_stmt 0 discriminator 1
 2090 0b0c 7B68     		ldr	r3, [r7, #4]
 2091 0b0e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2092 0b10 6C2B     		cmp	r3, #108
 2093 0b12 06D1     		bne	.L164
 2094              	.L163:
 784:../src/os/rt-thread/src/kservice.c **** #endif
 785:../src/os/rt-thread/src/kservice.c **** 		{
 786:../src/os/rt-thread/src/kservice.c **** 			qualifier = *fmt;
 2095              		.loc 1 786 0 is_stmt 1
 2096 0b14 7B68     		ldr	r3, [r7, #4]
 2097 0b16 1B78     		ldrb	r3, [r3, #0]
 2098 0b18 7B77     		strb	r3, [r7, #29]
 787:../src/os/rt-thread/src/kservice.c **** 			++ fmt;
 2099              		.loc 1 787 0
 2100 0b1a 7B68     		ldr	r3, [r7, #4]
 2101 0b1c 03F10103 		add	r3, r3, #1
 2102 0b20 7B60     		str	r3, [r7, #4]
 2103              	.L164:
 788:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 789:../src/os/rt-thread/src/kservice.c **** 			if (qualifier == 'l' && *fmt == 'l')
 790:../src/os/rt-thread/src/kservice.c **** 			{
 791:../src/os/rt-thread/src/kservice.c **** 				qualifier = 'L';
 792:../src/os/rt-thread/src/kservice.c **** 				++ fmt;
 793:../src/os/rt-thread/src/kservice.c **** 			}
 794:../src/os/rt-thread/src/kservice.c **** #endif
 795:../src/os/rt-thread/src/kservice.c **** 		}
 796:../src/os/rt-thread/src/kservice.c **** 
 797:../src/os/rt-thread/src/kservice.c **** 		/* the default base */
 798:../src/os/rt-thread/src/kservice.c **** 		base = 10;
 2104              		.loc 1 798 0
 2105 0b22 4FF00A03 		mov	r3, #10
 2106 0b26 FB77     		strb	r3, [r7, #31]
 799:../src/os/rt-thread/src/kservice.c **** 
 800:../src/os/rt-thread/src/kservice.c **** 		switch (*fmt)
 2107              		.loc 1 800 0
 2108 0b28 7B68     		ldr	r3, [r7, #4]
 2109 0b2a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2110 0b2c A3F12503 		sub	r3, r3, #37
 2111 0b30 532B     		cmp	r3, #83
 2112 0b32 00F29681 		bhi	.L165
 2113 0b36 01A2     		adr	r2, .L175
 2114 0b38 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2115              		.align	2
 2116              	.L175:
 2117 0b3c 270E0000 		.word	.L166+1
 2118 0b40 630E0000 		.word	.L165+1
 2119 0b44 630E0000 		.word	.L165+1
 2120 0b48 630E0000 		.word	.L165+1
 2121 0b4c 630E0000 		.word	.L165+1
 2122 0b50 630E0000 		.word	.L165+1
 2123 0b54 630E0000 		.word	.L165+1
 2124 0b58 630E0000 		.word	.L165+1
 2125 0b5c 630E0000 		.word	.L165+1
 2126 0b60 630E0000 		.word	.L165+1
 2127 0b64 630E0000 		.word	.L165+1
 2128 0b68 630E0000 		.word	.L165+1
 2129 0b6c 630E0000 		.word	.L165+1
 2130 0b70 630E0000 		.word	.L165+1
 2131 0b74 630E0000 		.word	.L165+1
 2132 0b78 630E0000 		.word	.L165+1
 2133 0b7c 630E0000 		.word	.L165+1
 2134 0b80 630E0000 		.word	.L165+1
 2135 0b84 630E0000 		.word	.L165+1
 2136 0b88 630E0000 		.word	.L165+1
 2137 0b8c 630E0000 		.word	.L165+1
 2138 0b90 630E0000 		.word	.L165+1
 2139 0b94 630E0000 		.word	.L165+1
 2140 0b98 630E0000 		.word	.L165+1
 2141 0b9c 630E0000 		.word	.L165+1
 2142 0ba0 630E0000 		.word	.L165+1
 2143 0ba4 630E0000 		.word	.L165+1
 2144 0ba8 630E0000 		.word	.L165+1
 2145 0bac 630E0000 		.word	.L165+1
 2146 0bb0 630E0000 		.word	.L165+1
 2147 0bb4 630E0000 		.word	.L165+1
 2148 0bb8 630E0000 		.word	.L165+1
 2149 0bbc 630E0000 		.word	.L165+1
 2150 0bc0 630E0000 		.word	.L165+1
 2151 0bc4 630E0000 		.word	.L165+1
 2152 0bc8 630E0000 		.word	.L165+1
 2153 0bcc 630E0000 		.word	.L165+1
 2154 0bd0 630E0000 		.word	.L165+1
 2155 0bd4 630E0000 		.word	.L165+1
 2156 0bd8 630E0000 		.word	.L165+1
 2157 0bdc 630E0000 		.word	.L165+1
 2158 0be0 630E0000 		.word	.L165+1
 2159 0be4 630E0000 		.word	.L165+1
 2160 0be8 630E0000 		.word	.L165+1
 2161 0bec 630E0000 		.word	.L165+1
 2162 0bf0 630E0000 		.word	.L165+1
 2163 0bf4 630E0000 		.word	.L165+1
 2164 0bf8 630E0000 		.word	.L165+1
 2165 0bfc 630E0000 		.word	.L165+1
 2166 0c00 630E0000 		.word	.L165+1
 2167 0c04 630E0000 		.word	.L165+1
 2168 0c08 490E0000 		.word	.L167+1
 2169 0c0c 630E0000 		.word	.L165+1
 2170 0c10 630E0000 		.word	.L165+1
 2171 0c14 630E0000 		.word	.L165+1
 2172 0c18 630E0000 		.word	.L165+1
 2173 0c1c 630E0000 		.word	.L165+1
 2174 0c20 630E0000 		.word	.L165+1
 2175 0c24 630E0000 		.word	.L165+1
 2176 0c28 630E0000 		.word	.L165+1
 2177 0c2c 630E0000 		.word	.L165+1
 2178 0c30 630E0000 		.word	.L165+1
 2179 0c34 8D0C0000 		.word	.L168+1
 2180 0c38 590E0000 		.word	.L169+1
 2181 0c3c 630E0000 		.word	.L165+1
 2182 0c40 630E0000 		.word	.L165+1
 2183 0c44 630E0000 		.word	.L165+1
 2184 0c48 630E0000 		.word	.L165+1
 2185 0c4c 590E0000 		.word	.L169+1
 2186 0c50 630E0000 		.word	.L165+1
 2187 0c54 630E0000 		.word	.L165+1
 2188 0c58 630E0000 		.word	.L165+1
 2189 0c5c 630E0000 		.word	.L165+1
 2190 0c60 630E0000 		.word	.L165+1
 2191 0c64 410E0000 		.word	.L170+1
 2192 0c68 E90D0000 		.word	.L171+1
 2193 0c6c 630E0000 		.word	.L165+1
 2194 0c70 630E0000 		.word	.L165+1
 2195 0c74 0B0D0000 		.word	.L172+1
 2196 0c78 630E0000 		.word	.L165+1
 2197 0c7c A70E0000 		.word	.L212+1
 2198 0c80 630E0000 		.word	.L165+1
 2199 0c84 630E0000 		.word	.L165+1
 2200 0c88 510E0000 		.word	.L174+1
 2201              	.L168:
 801:../src/os/rt-thread/src/kservice.c **** 		{
 802:../src/os/rt-thread/src/kservice.c **** 		case 'c':
 803:../src/os/rt-thread/src/kservice.c **** 			if (!(flags & LEFT))
 2202              		.loc 1 803 0
 2203 0c8c BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2204 0c8e 03F01003 		and	r3, r3, #16
 2205 0c92 002B     		cmp	r3, #0
 2206 0c94 13D1     		bne	.L176
 804:../src/os/rt-thread/src/kservice.c **** 			{
 805:../src/os/rt-thread/src/kservice.c **** 				while (--field_width > 0)
 2207              		.loc 1 805 0
 2208 0c96 0BE0     		b	.L177
 2209              	.L179:
 806:../src/os/rt-thread/src/kservice.c **** 				{
 807:../src/os/rt-thread/src/kservice.c **** 					if (str <= end) *str = ' ';
 2210              		.loc 1 807 0
 2211 0c98 BA6A     		ldr	r2, [r7, #40]
 2212 0c9a 7B6A     		ldr	r3, [r7, #36]
 2213 0c9c 9A42     		cmp	r2, r3
 2214 0c9e 03D8     		bhi	.L178
 2215              		.loc 1 807 0 is_stmt 0 discriminator 1
 2216 0ca0 BB6A     		ldr	r3, [r7, #40]
 2217 0ca2 4FF02002 		mov	r2, #32
 2218 0ca6 1A70     		strb	r2, [r3, #0]
 2219              	.L178:
 808:../src/os/rt-thread/src/kservice.c **** 					++ str;
 2220              		.loc 1 808 0 is_stmt 1
 2221 0ca8 BB6A     		ldr	r3, [r7, #40]
 2222 0caa 03F10103 		add	r3, r3, #1
 2223 0cae BB62     		str	r3, [r7, #40]
 2224              	.L177:
 805:../src/os/rt-thread/src/kservice.c **** 				while (--field_width > 0)
 2225              		.loc 1 805 0 discriminator 1
 2226 0cb0 BB69     		ldr	r3, [r7, #24]
 2227 0cb2 03F1FF33 		add	r3, r3, #-1
 2228 0cb6 BB61     		str	r3, [r7, #24]
 2229 0cb8 BB69     		ldr	r3, [r7, #24]
 2230 0cba 002B     		cmp	r3, #0
 2231 0cbc ECDC     		bgt	.L179
 2232              	.L176:
 809:../src/os/rt-thread/src/kservice.c **** 				}
 810:../src/os/rt-thread/src/kservice.c **** 			}
 811:../src/os/rt-thread/src/kservice.c **** 
 812:../src/os/rt-thread/src/kservice.c **** 			/* get character */
 813:../src/os/rt-thread/src/kservice.c **** 			c = (rt_uint8_t)va_arg(args, int);
 2233              		.loc 1 813 0
 2234 0cbe 3B68     		ldr	r3, [r7, #0]
 2235 0cc0 03F10402 		add	r2, r3, #4
 2236 0cc4 3A60     		str	r2, [r7, #0]
 2237 0cc6 1B68     		ldr	r3, [r3, #0]
 2238 0cc8 FB74     		strb	r3, [r7, #19]
 814:../src/os/rt-thread/src/kservice.c **** 			if (str <= end) *str = c;
 2239              		.loc 1 814 0
 2240 0cca BA6A     		ldr	r2, [r7, #40]
 2241 0ccc 7B6A     		ldr	r3, [r7, #36]
 2242 0cce 9A42     		cmp	r2, r3
 2243 0cd0 02D8     		bhi	.L180
 2244              		.loc 1 814 0 is_stmt 0 discriminator 1
 2245 0cd2 BB6A     		ldr	r3, [r7, #40]
 2246 0cd4 FA7C     		ldrb	r2, [r7, #19]
 2247 0cd6 1A70     		strb	r2, [r3, #0]
 2248              	.L180:
 815:../src/os/rt-thread/src/kservice.c **** 			++ str;
 2249              		.loc 1 815 0 is_stmt 1
 2250 0cd8 BB6A     		ldr	r3, [r7, #40]
 2251 0cda 03F10103 		add	r3, r3, #1
 2252 0cde BB62     		str	r3, [r7, #40]
 816:../src/os/rt-thread/src/kservice.c **** 
 817:../src/os/rt-thread/src/kservice.c **** 			/* put width */
 818:../src/os/rt-thread/src/kservice.c **** 			while (--field_width > 0)
 2253              		.loc 1 818 0
 2254 0ce0 0BE0     		b	.L181
 2255              	.L183:
 819:../src/os/rt-thread/src/kservice.c **** 			{
 820:../src/os/rt-thread/src/kservice.c **** 				if (str <= end) *str = ' ';
 2256              		.loc 1 820 0
 2257 0ce2 BA6A     		ldr	r2, [r7, #40]
 2258 0ce4 7B6A     		ldr	r3, [r7, #36]
 2259 0ce6 9A42     		cmp	r2, r3
 2260 0ce8 03D8     		bhi	.L182
 2261              		.loc 1 820 0 is_stmt 0 discriminator 1
 2262 0cea BB6A     		ldr	r3, [r7, #40]
 2263 0cec 4FF02002 		mov	r2, #32
 2264 0cf0 1A70     		strb	r2, [r3, #0]
 2265              	.L182:
 821:../src/os/rt-thread/src/kservice.c **** 				++ str;
 2266              		.loc 1 821 0 is_stmt 1
 2267 0cf2 BB6A     		ldr	r3, [r7, #40]
 2268 0cf4 03F10103 		add	r3, r3, #1
 2269 0cf8 BB62     		str	r3, [r7, #40]
 2270              	.L181:
 818:../src/os/rt-thread/src/kservice.c **** 			while (--field_width > 0)
 2271              		.loc 1 818 0 discriminator 1
 2272 0cfa BB69     		ldr	r3, [r7, #24]
 2273 0cfc 03F1FF33 		add	r3, r3, #-1
 2274 0d00 BB61     		str	r3, [r7, #24]
 2275 0d02 BB69     		ldr	r3, [r7, #24]
 2276 0d04 002B     		cmp	r3, #0
 2277 0d06 ECDC     		bgt	.L183
 822:../src/os/rt-thread/src/kservice.c **** 			}
 823:../src/os/rt-thread/src/kservice.c **** 			continue;
 2278              		.loc 1 823 0
 2279 0d08 07E1     		b	.L149
 2280              	.L172:
 824:../src/os/rt-thread/src/kservice.c **** 
 825:../src/os/rt-thread/src/kservice.c **** 		case 's':
 826:../src/os/rt-thread/src/kservice.c **** 			s = va_arg(args, char *);
 2281              		.loc 1 826 0
 2282 0d0a 3B68     		ldr	r3, [r7, #0]
 2283 0d0c 03F10402 		add	r2, r3, #4
 2284 0d10 3A60     		str	r2, [r7, #0]
 2285 0d12 1B68     		ldr	r3, [r3, #0]
 2286 0d14 3B62     		str	r3, [r7, #32]
 827:../src/os/rt-thread/src/kservice.c **** 			if (!s) s = "(NULL)";
 2287              		.loc 1 827 0
 2288 0d16 3B6A     		ldr	r3, [r7, #32]
 2289 0d18 002B     		cmp	r3, #0
 2290 0d1a 01D1     		bne	.L184
 2291              		.loc 1 827 0 is_stmt 0 discriminator 1
 2292 0d1c 8F4B     		ldr	r3, .L213
 2293 0d1e 3B62     		str	r3, [r7, #32]
 2294              	.L184:
 828:../src/os/rt-thread/src/kservice.c **** 
 829:../src/os/rt-thread/src/kservice.c **** 			len = rt_strlen(s);
 2295              		.loc 1 829 0 is_stmt 1
 2296 0d20 386A     		ldr	r0, [r7, #32]
 2297 0d22 FFF7FEFF 		bl	rt_strlen
 2298 0d26 0346     		mov	r3, r0
 2299 0d28 FB62     		str	r3, [r7, #44]
 830:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 831:../src/os/rt-thread/src/kservice.c **** 			if (precision > 0 && len > precision) len = precision;
 2300              		.loc 1 831 0
 2301 0d2a 7B69     		ldr	r3, [r7, #20]
 2302 0d2c 002B     		cmp	r3, #0
 2303 0d2e 05DD     		ble	.L185
 2304              		.loc 1 831 0 is_stmt 0 discriminator 1
 2305 0d30 FA6A     		ldr	r2, [r7, #44]
 2306 0d32 7B69     		ldr	r3, [r7, #20]
 2307 0d34 9A42     		cmp	r2, r3
 2308 0d36 01DD     		ble	.L185
 2309 0d38 7B69     		ldr	r3, [r7, #20]
 2310 0d3a FB62     		str	r3, [r7, #44]
 2311              	.L185:
 832:../src/os/rt-thread/src/kservice.c **** #endif
 833:../src/os/rt-thread/src/kservice.c **** 
 834:../src/os/rt-thread/src/kservice.c **** 			if (!(flags & LEFT))
 2312              		.loc 1 834 0 is_stmt 1
 2313 0d3c BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2314 0d3e 03F01003 		and	r3, r3, #16
 2315 0d42 002B     		cmp	r3, #0
 2316 0d44 19D1     		bne	.L186
 835:../src/os/rt-thread/src/kservice.c **** 			{
 836:../src/os/rt-thread/src/kservice.c **** 				while (len < field_width--)
 2317              		.loc 1 836 0
 2318 0d46 0BE0     		b	.L187
 2319              	.L189:
 837:../src/os/rt-thread/src/kservice.c **** 				{
 838:../src/os/rt-thread/src/kservice.c **** 					if (str <= end) *str = ' ';
 2320              		.loc 1 838 0
 2321 0d48 BA6A     		ldr	r2, [r7, #40]
 2322 0d4a 7B6A     		ldr	r3, [r7, #36]
 2323 0d4c 9A42     		cmp	r2, r3
 2324 0d4e 03D8     		bhi	.L188
 2325              		.loc 1 838 0 is_stmt 0 discriminator 1
 2326 0d50 BB6A     		ldr	r3, [r7, #40]
 2327 0d52 4FF02002 		mov	r2, #32
 2328 0d56 1A70     		strb	r2, [r3, #0]
 2329              	.L188:
 839:../src/os/rt-thread/src/kservice.c **** 					++ str;
 2330              		.loc 1 839 0 is_stmt 1
 2331 0d58 BB6A     		ldr	r3, [r7, #40]
 2332 0d5a 03F10103 		add	r3, r3, #1
 2333 0d5e BB62     		str	r3, [r7, #40]
 2334              	.L187:
 836:../src/os/rt-thread/src/kservice.c **** 				while (len < field_width--)
 2335              		.loc 1 836 0 discriminator 1
 2336 0d60 BA69     		ldr	r2, [r7, #24]
 2337 0d62 FB6A     		ldr	r3, [r7, #44]
 2338 0d64 9A42     		cmp	r2, r3
 2339 0d66 D4BF     		ite	le
 2340 0d68 0023     		movle	r3, #0
 2341 0d6a 0123     		movgt	r3, #1
 2342 0d6c DBB2     		uxtb	r3, r3
 2343 0d6e BA69     		ldr	r2, [r7, #24]
 2344 0d70 02F1FF32 		add	r2, r2, #-1
 2345 0d74 BA61     		str	r2, [r7, #24]
 2346 0d76 002B     		cmp	r3, #0
 2347 0d78 E6D1     		bne	.L189
 2348              	.L186:
 840:../src/os/rt-thread/src/kservice.c **** 				}
 841:../src/os/rt-thread/src/kservice.c **** 			}
 842:../src/os/rt-thread/src/kservice.c **** 
 843:../src/os/rt-thread/src/kservice.c **** 			for (i = 0; i < len; ++i)
 2349              		.loc 1 843 0
 2350 0d7a 4FF00003 		mov	r3, #0
 2351 0d7e 3B63     		str	r3, [r7, #48]
 2352 0d80 13E0     		b	.L190
 2353              	.L192:
 844:../src/os/rt-thread/src/kservice.c **** 			{
 845:../src/os/rt-thread/src/kservice.c **** 				if (str <= end) *str = *s;
 2354              		.loc 1 845 0
 2355 0d82 BA6A     		ldr	r2, [r7, #40]
 2356 0d84 7B6A     		ldr	r3, [r7, #36]
 2357 0d86 9A42     		cmp	r2, r3
 2358 0d88 03D8     		bhi	.L191
 2359              		.loc 1 845 0 is_stmt 0 discriminator 1
 2360 0d8a 3B6A     		ldr	r3, [r7, #32]
 2361 0d8c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2362 0d8e BB6A     		ldr	r3, [r7, #40]
 2363 0d90 1A70     		strb	r2, [r3, #0]
 2364              	.L191:
 846:../src/os/rt-thread/src/kservice.c **** 				++ str;
 2365              		.loc 1 846 0 is_stmt 1
 2366 0d92 BB6A     		ldr	r3, [r7, #40]
 2367 0d94 03F10103 		add	r3, r3, #1
 2368 0d98 BB62     		str	r3, [r7, #40]
 847:../src/os/rt-thread/src/kservice.c **** 				++ s;
 2369              		.loc 1 847 0
 2370 0d9a 3B6A     		ldr	r3, [r7, #32]
 2371 0d9c 03F10103 		add	r3, r3, #1
 2372 0da0 3B62     		str	r3, [r7, #32]
 843:../src/os/rt-thread/src/kservice.c **** 			for (i = 0; i < len; ++i)
 2373              		.loc 1 843 0
 2374 0da2 3B6B     		ldr	r3, [r7, #48]
 2375 0da4 03F10103 		add	r3, r3, #1
 2376 0da8 3B63     		str	r3, [r7, #48]
 2377              	.L190:
 843:../src/os/rt-thread/src/kservice.c **** 			for (i = 0; i < len; ++i)
 2378              		.loc 1 843 0 is_stmt 0 discriminator 1
 2379 0daa 3A6B     		ldr	r2, [r7, #48]
 2380 0dac FB6A     		ldr	r3, [r7, #44]
 2381 0dae 9A42     		cmp	r2, r3
 2382 0db0 E7DB     		blt	.L192
 848:../src/os/rt-thread/src/kservice.c **** 			}
 849:../src/os/rt-thread/src/kservice.c **** 
 850:../src/os/rt-thread/src/kservice.c **** 			while (len < field_width--)
 2383              		.loc 1 850 0 is_stmt 1
 2384 0db2 0BE0     		b	.L193
 2385              	.L195:
 851:../src/os/rt-thread/src/kservice.c **** 			{
 852:../src/os/rt-thread/src/kservice.c **** 				if (str <= end) *str = ' ';
 2386              		.loc 1 852 0
 2387 0db4 BA6A     		ldr	r2, [r7, #40]
 2388 0db6 7B6A     		ldr	r3, [r7, #36]
 2389 0db8 9A42     		cmp	r2, r3
 2390 0dba 03D8     		bhi	.L194
 2391              		.loc 1 852 0 is_stmt 0 discriminator 1
 2392 0dbc BB6A     		ldr	r3, [r7, #40]
 2393 0dbe 4FF02002 		mov	r2, #32
 2394 0dc2 1A70     		strb	r2, [r3, #0]
 2395              	.L194:
 853:../src/os/rt-thread/src/kservice.c **** 				++ str;
 2396              		.loc 1 853 0 is_stmt 1
 2397 0dc4 BB6A     		ldr	r3, [r7, #40]
 2398 0dc6 03F10103 		add	r3, r3, #1
 2399 0dca BB62     		str	r3, [r7, #40]
 2400              	.L193:
 850:../src/os/rt-thread/src/kservice.c **** 			while (len < field_width--)
 2401              		.loc 1 850 0 discriminator 1
 2402 0dcc BA69     		ldr	r2, [r7, #24]
 2403 0dce FB6A     		ldr	r3, [r7, #44]
 2404 0dd0 9A42     		cmp	r2, r3
 2405 0dd2 D4BF     		ite	le
 2406 0dd4 0023     		movle	r3, #0
 2407 0dd6 0123     		movgt	r3, #1
 2408 0dd8 DBB2     		uxtb	r3, r3
 2409 0dda BA69     		ldr	r2, [r7, #24]
 2410 0ddc 02F1FF32 		add	r2, r2, #-1
 2411 0de0 BA61     		str	r2, [r7, #24]
 2412 0de2 002B     		cmp	r3, #0
 2413 0de4 E6D1     		bne	.L195
 854:../src/os/rt-thread/src/kservice.c **** 			}
 855:../src/os/rt-thread/src/kservice.c **** 			continue;
 2414              		.loc 1 855 0
 2415 0de6 98E0     		b	.L149
 2416              	.L171:
 856:../src/os/rt-thread/src/kservice.c **** 
 857:../src/os/rt-thread/src/kservice.c **** 		case 'p':
 858:../src/os/rt-thread/src/kservice.c **** 			if (field_width == -1)
 2417              		.loc 1 858 0
 2418 0de8 BB69     		ldr	r3, [r7, #24]
 2419 0dea B3F1FF3F 		cmp	r3, #-1
 2420 0dee 06D1     		bne	.L196
 859:../src/os/rt-thread/src/kservice.c **** 			{
 860:../src/os/rt-thread/src/kservice.c **** 				field_width = sizeof(void *) << 1;
 2421              		.loc 1 860 0
 2422 0df0 4FF00803 		mov	r3, #8
 2423 0df4 BB61     		str	r3, [r7, #24]
 861:../src/os/rt-thread/src/kservice.c **** 				flags |= ZEROPAD;
 2424              		.loc 1 861 0
 2425 0df6 BB7F     		ldrb	r3, [r7, #30]
 2426 0df8 43F00103 		orr	r3, r3, #1
 2427 0dfc BB77     		strb	r3, [r7, #30]
 2428              	.L196:
 862:../src/os/rt-thread/src/kservice.c **** 			}
 863:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 864:../src/os/rt-thread/src/kservice.c **** 			str = print_number(str, end,
 865:../src/os/rt-thread/src/kservice.c **** 							   (long)va_arg(args, void *),
 2429              		.loc 1 865 0
 2430 0dfe 3B68     		ldr	r3, [r7, #0]
 2431 0e00 03F10402 		add	r2, r3, #4
 2432 0e04 3A60     		str	r2, [r7, #0]
 2433 0e06 1B68     		ldr	r3, [r3, #0]
 864:../src/os/rt-thread/src/kservice.c **** 			str = print_number(str, end,
 2434              		.loc 1 864 0
 2435 0e08 BA7F     		ldrb	r2, [r7, #30]	@ zero_extendqisi2
 2436 0e0a B969     		ldr	r1, [r7, #24]
 2437 0e0c 0091     		str	r1, [sp, #0]
 2438 0e0e 7969     		ldr	r1, [r7, #20]
 2439 0e10 0191     		str	r1, [sp, #4]
 2440 0e12 0292     		str	r2, [sp, #8]
 2441 0e14 B86A     		ldr	r0, [r7, #40]
 2442 0e16 796A     		ldr	r1, [r7, #36]
 2443 0e18 1A46     		mov	r2, r3
 2444 0e1a 4FF01003 		mov	r3, #16
 2445 0e1e FFF797FC 		bl	print_number
 2446 0e22 B862     		str	r0, [r7, #40]
 866:../src/os/rt-thread/src/kservice.c **** 							   16, field_width, precision, flags);
 867:../src/os/rt-thread/src/kservice.c **** #else
 868:../src/os/rt-thread/src/kservice.c **** 			str = print_number(str, end,
 869:../src/os/rt-thread/src/kservice.c **** 							   (long)va_arg(args, void *),
 870:../src/os/rt-thread/src/kservice.c **** 							   16, field_width, flags);
 871:../src/os/rt-thread/src/kservice.c **** #endif
 872:../src/os/rt-thread/src/kservice.c **** 			continue;
 2447              		.loc 1 872 0
 2448 0e24 79E0     		b	.L149
 2449              	.L166:
 873:../src/os/rt-thread/src/kservice.c **** 
 874:../src/os/rt-thread/src/kservice.c **** 		case '%':
 875:../src/os/rt-thread/src/kservice.c **** 			if (str <= end) *str = '%';
 2450              		.loc 1 875 0
 2451 0e26 BA6A     		ldr	r2, [r7, #40]
 2452 0e28 7B6A     		ldr	r3, [r7, #36]
 2453 0e2a 9A42     		cmp	r2, r3
 2454 0e2c 03D8     		bhi	.L197
 2455              		.loc 1 875 0 is_stmt 0 discriminator 1
 2456 0e2e BB6A     		ldr	r3, [r7, #40]
 2457 0e30 4FF02502 		mov	r2, #37
 2458 0e34 1A70     		strb	r2, [r3, #0]
 2459              	.L197:
 876:../src/os/rt-thread/src/kservice.c **** 			++ str;
 2460              		.loc 1 876 0 is_stmt 1
 2461 0e36 BB6A     		ldr	r3, [r7, #40]
 2462 0e38 03F10103 		add	r3, r3, #1
 2463 0e3c BB62     		str	r3, [r7, #40]
 877:../src/os/rt-thread/src/kservice.c **** 			continue;
 2464              		.loc 1 877 0
 2465 0e3e 6CE0     		b	.L149
 2466              	.L170:
 878:../src/os/rt-thread/src/kservice.c **** 
 879:../src/os/rt-thread/src/kservice.c **** 			/* integer number formats - set up the flags and "break" */
 880:../src/os/rt-thread/src/kservice.c **** 		case 'o':
 881:../src/os/rt-thread/src/kservice.c **** 			base = 8;
 2467              		.loc 1 881 0
 2468 0e40 4FF00803 		mov	r3, #8
 2469 0e44 FB77     		strb	r3, [r7, #31]
 882:../src/os/rt-thread/src/kservice.c **** 			break;
 2470              		.loc 1 882 0
 2471 0e46 2FE0     		b	.L198
 2472              	.L167:
 883:../src/os/rt-thread/src/kservice.c **** 
 884:../src/os/rt-thread/src/kservice.c **** 		case 'X':
 885:../src/os/rt-thread/src/kservice.c **** 			flags |= LARGE;
 2473              		.loc 1 885 0
 2474 0e48 BB7F     		ldrb	r3, [r7, #30]
 2475 0e4a 43F04003 		orr	r3, r3, #64
 2476 0e4e BB77     		strb	r3, [r7, #30]
 2477              	.L174:
 886:../src/os/rt-thread/src/kservice.c **** 		case 'x':
 887:../src/os/rt-thread/src/kservice.c **** 			base = 16;
 2478              		.loc 1 887 0
 2479 0e50 4FF01003 		mov	r3, #16
 2480 0e54 FB77     		strb	r3, [r7, #31]
 888:../src/os/rt-thread/src/kservice.c **** 			break;
 2481              		.loc 1 888 0
 2482 0e56 27E0     		b	.L198
 2483              	.L169:
 889:../src/os/rt-thread/src/kservice.c **** 
 890:../src/os/rt-thread/src/kservice.c **** 		case 'd':
 891:../src/os/rt-thread/src/kservice.c **** 		case 'i':
 892:../src/os/rt-thread/src/kservice.c **** 			flags |= SIGN;
 2484              		.loc 1 892 0
 2485 0e58 BB7F     		ldrb	r3, [r7, #30]
 2486 0e5a 43F00203 		orr	r3, r3, #2
 2487 0e5e BB77     		strb	r3, [r7, #30]
 893:../src/os/rt-thread/src/kservice.c **** 		case 'u':
 894:../src/os/rt-thread/src/kservice.c **** 			break;
 2488              		.loc 1 894 0
 2489 0e60 21E0     		b	.L212
 2490              	.L165:
 895:../src/os/rt-thread/src/kservice.c **** 
 896:../src/os/rt-thread/src/kservice.c **** 		default:
 897:../src/os/rt-thread/src/kservice.c **** 			if (str <= end) *str = '%';
 2491              		.loc 1 897 0
 2492 0e62 BA6A     		ldr	r2, [r7, #40]
 2493 0e64 7B6A     		ldr	r3, [r7, #36]
 2494 0e66 9A42     		cmp	r2, r3
 2495 0e68 03D8     		bhi	.L199
 2496              		.loc 1 897 0 is_stmt 0 discriminator 1
 2497 0e6a BB6A     		ldr	r3, [r7, #40]
 2498 0e6c 4FF02502 		mov	r2, #37
 2499 0e70 1A70     		strb	r2, [r3, #0]
 2500              	.L199:
 898:../src/os/rt-thread/src/kservice.c **** 			++ str;
 2501              		.loc 1 898 0 is_stmt 1
 2502 0e72 BB6A     		ldr	r3, [r7, #40]
 2503 0e74 03F10103 		add	r3, r3, #1
 2504 0e78 BB62     		str	r3, [r7, #40]
 899:../src/os/rt-thread/src/kservice.c **** 
 900:../src/os/rt-thread/src/kservice.c **** 			if (*fmt)
 2505              		.loc 1 900 0
 2506 0e7a 7B68     		ldr	r3, [r7, #4]
 2507 0e7c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2508 0e7e 002B     		cmp	r3, #0
 2509 0e80 0CD0     		beq	.L200
 901:../src/os/rt-thread/src/kservice.c **** 			{
 902:../src/os/rt-thread/src/kservice.c **** 				if (str <= end) *str = *fmt;
 2510              		.loc 1 902 0
 2511 0e82 BA6A     		ldr	r2, [r7, #40]
 2512 0e84 7B6A     		ldr	r3, [r7, #36]
 2513 0e86 9A42     		cmp	r2, r3
 2514 0e88 03D8     		bhi	.L201
 2515              		.loc 1 902 0 is_stmt 0 discriminator 1
 2516 0e8a 7B68     		ldr	r3, [r7, #4]
 2517 0e8c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2518 0e8e BB6A     		ldr	r3, [r7, #40]
 2519 0e90 1A70     		strb	r2, [r3, #0]
 2520              	.L201:
 903:../src/os/rt-thread/src/kservice.c **** 				++ str;
 2521              		.loc 1 903 0 is_stmt 1
 2522 0e92 BB6A     		ldr	r3, [r7, #40]
 2523 0e94 03F10103 		add	r3, r3, #1
 2524 0e98 BB62     		str	r3, [r7, #40]
 904:../src/os/rt-thread/src/kservice.c **** 			}
 905:../src/os/rt-thread/src/kservice.c **** 			else
 906:../src/os/rt-thread/src/kservice.c **** 			{
 907:../src/os/rt-thread/src/kservice.c **** 				-- fmt;
 908:../src/os/rt-thread/src/kservice.c **** 			}
 909:../src/os/rt-thread/src/kservice.c **** 			continue;
 2525              		.loc 1 909 0
 2526 0e9a 3EE0     		b	.L149
 2527              	.L200:
 907:../src/os/rt-thread/src/kservice.c **** 				-- fmt;
 2528              		.loc 1 907 0
 2529 0e9c 7B68     		ldr	r3, [r7, #4]
 2530 0e9e 03F1FF33 		add	r3, r3, #-1
 2531 0ea2 7B60     		str	r3, [r7, #4]
 2532              		.loc 1 909 0
 2533 0ea4 39E0     		b	.L149
 2534              	.L212:
 894:../src/os/rt-thread/src/kservice.c **** 			break;
 2535              		.loc 1 894 0
 2536 0ea6 00BF     		nop
 2537              	.L198:
 910:../src/os/rt-thread/src/kservice.c **** 		}
 911:../src/os/rt-thread/src/kservice.c **** 
 912:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 913:../src/os/rt-thread/src/kservice.c **** 		if (qualifier == 'L') num = va_arg(args, long long);
 914:../src/os/rt-thread/src/kservice.c **** 		else if (qualifier == 'l')
 915:../src/os/rt-thread/src/kservice.c **** #else
 916:../src/os/rt-thread/src/kservice.c **** 		if (qualifier == 'l')
 2538              		.loc 1 916 0
 2539 0ea8 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 2540 0eaa 6C2B     		cmp	r3, #108
 2541 0eac 0AD1     		bne	.L203
 917:../src/os/rt-thread/src/kservice.c **** #endif
 918:../src/os/rt-thread/src/kservice.c **** 		{
 919:../src/os/rt-thread/src/kservice.c **** 			num = va_arg(args, rt_uint32_t);
 2542              		.loc 1 919 0
 2543 0eae 3B68     		ldr	r3, [r7, #0]
 2544 0eb0 03F10402 		add	r2, r3, #4
 2545 0eb4 3A60     		str	r2, [r7, #0]
 2546 0eb6 1B68     		ldr	r3, [r3, #0]
 2547 0eb8 7B63     		str	r3, [r7, #52]
 920:../src/os/rt-thread/src/kservice.c **** 			if (flags & SIGN) num = (rt_int32_t)num;
 2548              		.loc 1 920 0
 2549 0eba BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2550 0ebc 03F00203 		and	r3, r3, #2
 2551 0ec0 002B     		cmp	r3, #0
 2552 0ec2 1DE0     		b	.L204
 2553              	.L203:
 921:../src/os/rt-thread/src/kservice.c **** 		}
 922:../src/os/rt-thread/src/kservice.c **** 		else if (qualifier == 'h')
 2554              		.loc 1 922 0
 2555 0ec4 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 2556 0ec6 682B     		cmp	r3, #104
 2557 0ec8 10D1     		bne	.L205
 923:../src/os/rt-thread/src/kservice.c **** 		{
 924:../src/os/rt-thread/src/kservice.c **** 			num = (rt_uint16_t)va_arg(args, rt_int32_t);
 2558              		.loc 1 924 0
 2559 0eca 3B68     		ldr	r3, [r7, #0]
 2560 0ecc 03F10402 		add	r2, r3, #4
 2561 0ed0 3A60     		str	r2, [r7, #0]
 2562 0ed2 1B68     		ldr	r3, [r3, #0]
 2563 0ed4 9BB2     		uxth	r3, r3
 2564 0ed6 7B63     		str	r3, [r7, #52]
 925:../src/os/rt-thread/src/kservice.c **** 			if (flags & SIGN) num = (rt_int16_t)num;
 2565              		.loc 1 925 0
 2566 0ed8 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2567 0eda 03F00203 		and	r3, r3, #2
 2568 0ede 002B     		cmp	r3, #0
 2569 0ee0 0ED0     		beq	.L204
 2570              		.loc 1 925 0 is_stmt 0 discriminator 1
 2571 0ee2 7B6B     		ldr	r3, [r7, #52]
 2572 0ee4 9BB2     		uxth	r3, r3
 2573 0ee6 1BB2     		sxth	r3, r3
 2574 0ee8 7B63     		str	r3, [r7, #52]
 2575 0eea 09E0     		b	.L204
 2576              	.L205:
 926:../src/os/rt-thread/src/kservice.c **** 		}
 927:../src/os/rt-thread/src/kservice.c **** 		else
 928:../src/os/rt-thread/src/kservice.c **** 		{
 929:../src/os/rt-thread/src/kservice.c **** 			num = va_arg(args, rt_uint32_t);
 2577              		.loc 1 929 0 is_stmt 1
 2578 0eec 3B68     		ldr	r3, [r7, #0]
 2579 0eee 03F10402 		add	r2, r3, #4
 2580 0ef2 3A60     		str	r2, [r7, #0]
 2581 0ef4 1B68     		ldr	r3, [r3, #0]
 2582 0ef6 7B63     		str	r3, [r7, #52]
 930:../src/os/rt-thread/src/kservice.c **** 			if (flags & SIGN) num = (rt_int32_t)num;
 2583              		.loc 1 930 0
 2584 0ef8 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2585 0efa 03F00203 		and	r3, r3, #2
 2586 0efe 002B     		cmp	r3, #0
 2587              	.L204:
 931:../src/os/rt-thread/src/kservice.c **** 		}
 932:../src/os/rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 933:../src/os/rt-thread/src/kservice.c **** 		str = print_number(str, end, num, base, field_width, precision, flags);
 2588              		.loc 1 933 0
 2589 0f00 7A6B     		ldr	r2, [r7, #52]
 2590 0f02 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2591 0f04 B97F     		ldrb	r1, [r7, #30]	@ zero_extendqisi2
 2592 0f06 B869     		ldr	r0, [r7, #24]
 2593 0f08 0090     		str	r0, [sp, #0]
 2594 0f0a 7869     		ldr	r0, [r7, #20]
 2595 0f0c 0190     		str	r0, [sp, #4]
 2596 0f0e 0291     		str	r1, [sp, #8]
 2597 0f10 B86A     		ldr	r0, [r7, #40]
 2598 0f12 796A     		ldr	r1, [r7, #36]
 2599 0f14 FFF71CFC 		bl	print_number
 2600 0f18 B862     		str	r0, [r7, #40]
 2601              	.L149:
 722:../src/os/rt-thread/src/kservice.c **** 	for (; *fmt ; ++fmt)
 2602              		.loc 1 722 0
 2603 0f1a 7B68     		ldr	r3, [r7, #4]
 2604 0f1c 03F10103 		add	r3, r3, #1
 2605 0f20 7B60     		str	r3, [r7, #4]
 2606 0f22 00E0     		b	.L146
 2607              	.L210:
 2608 0f24 00BF     		nop
 2609              	.L146:
 722:../src/os/rt-thread/src/kservice.c **** 	for (; *fmt ; ++fmt)
 2610              		.loc 1 722 0 is_stmt 0 discriminator 1
 2611 0f26 7B68     		ldr	r3, [r7, #4]
 2612 0f28 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2613 0f2a 002B     		cmp	r3, #0
 2614 0f2c 7FF44CAD 		bne	.L206
 934:../src/os/rt-thread/src/kservice.c **** #else
 935:../src/os/rt-thread/src/kservice.c **** 		str = print_number(str, end, num, base, field_width, flags);
 936:../src/os/rt-thread/src/kservice.c **** #endif
 937:../src/os/rt-thread/src/kservice.c **** 	}
 938:../src/os/rt-thread/src/kservice.c **** 
 939:../src/os/rt-thread/src/kservice.c **** 	if (str <= end) *str = '\0';
 2615              		.loc 1 939 0 is_stmt 1
 2616 0f30 BA6A     		ldr	r2, [r7, #40]
 2617 0f32 7B6A     		ldr	r3, [r7, #36]
 2618 0f34 9A42     		cmp	r2, r3
 2619 0f36 04D8     		bhi	.L207
 2620              		.loc 1 939 0 is_stmt 0 discriminator 1
 2621 0f38 BB6A     		ldr	r3, [r7, #40]
 2622 0f3a 4FF00002 		mov	r2, #0
 2623 0f3e 1A70     		strb	r2, [r3, #0]
 2624 0f40 03E0     		b	.L208
 2625              	.L207:
 940:../src/os/rt-thread/src/kservice.c **** 	else *end = '\0';
 2626              		.loc 1 940 0 is_stmt 1
 2627 0f42 7B6A     		ldr	r3, [r7, #36]
 2628 0f44 4FF00002 		mov	r2, #0
 2629 0f48 1A70     		strb	r2, [r3, #0]
 2630              	.L208:
 941:../src/os/rt-thread/src/kservice.c **** 
 942:../src/os/rt-thread/src/kservice.c **** 	/* the trailing null byte doesn't count towards the total
 943:../src/os/rt-thread/src/kservice.c **** 	* ++str;
 944:../src/os/rt-thread/src/kservice.c **** 	*/
 945:../src/os/rt-thread/src/kservice.c **** 	return str - buf;
 2631              		.loc 1 945 0
 2632 0f4a BA6A     		ldr	r2, [r7, #40]
 2633 0f4c FB68     		ldr	r3, [r7, #12]
 2634 0f4e D31A     		subs	r3, r2, r3
 946:../src/os/rt-thread/src/kservice.c **** }
 2635              		.loc 1 946 0
 2636 0f50 1846     		mov	r0, r3
 2637 0f52 07F13807 		add	r7, r7, #56
 2638 0f56 BD46     		mov	sp, r7
 2639 0f58 80BD     		pop	{r7, pc}
 2640              	.L214:
 2641 0f5a 00BF     		.align	2
 2642              	.L213:
 2643 0f5c 88000000 		.word	.LC5
 2644              		.cfi_endproc
 2645              	.LFE23:
 2647              		.align	2
 2648              		.global	rt_snprintf
 2649              		.thumb
 2650              		.thumb_func
 2652              	rt_snprintf:
 2653              	.LFB24:
 947:../src/os/rt-thread/src/kservice.c **** 
 948:../src/os/rt-thread/src/kservice.c **** /**
 949:../src/os/rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
 950:../src/os/rt-thread/src/kservice.c ****  *
 951:../src/os/rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
 952:../src/os/rt-thread/src/kservice.c ****  * @param size the size of buffer
 953:../src/os/rt-thread/src/kservice.c ****  * @param fmt the format
 954:../src/os/rt-thread/src/kservice.c ****  */
 955:../src/os/rt-thread/src/kservice.c **** rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
 956:../src/os/rt-thread/src/kservice.c **** {
 2654              		.loc 1 956 0
 2655              		.cfi_startproc
 2656              		@ args = 4, pretend = 8, frame = 16
 2657              		@ frame_needed = 1, uses_anonymous_args = 1
 2658 0f60 0CB4     		push	{r2, r3}
 2659              	.LCFI57:
 2660              		.cfi_def_cfa_offset 8
 2661              		.cfi_offset 2, -8
 2662              		.cfi_offset 3, -4
 2663 0f62 80B5     		push	{r7, lr}
 2664              	.LCFI58:
 2665              		.cfi_def_cfa_offset 16
 2666              		.cfi_offset 7, -16
 2667              		.cfi_offset 14, -12
 2668 0f64 84B0     		sub	sp, sp, #16
 2669              	.LCFI59:
 2670              		.cfi_def_cfa_offset 32
 2671 0f66 00AF     		add	r7, sp, #0
 2672              	.LCFI60:
 2673              		.cfi_def_cfa_register 7
 2674 0f68 7860     		str	r0, [r7, #4]
 2675 0f6a 3960     		str	r1, [r7, #0]
 957:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t n;
 958:../src/os/rt-thread/src/kservice.c **** 	va_list args;
 959:../src/os/rt-thread/src/kservice.c **** 
 960:../src/os/rt-thread/src/kservice.c **** 	va_start(args, fmt);
 2676              		.loc 1 960 0
 2677 0f6c 07F11C03 		add	r3, r7, #28
 2678 0f70 BB60     		str	r3, [r7, #8]
 961:../src/os/rt-thread/src/kservice.c **** 	n = vsnprintf(buf, size, fmt, args);
 2679              		.loc 1 961 0
 2680 0f72 7868     		ldr	r0, [r7, #4]
 2681 0f74 3968     		ldr	r1, [r7, #0]
 2682 0f76 BA69     		ldr	r2, [r7, #24]
 2683 0f78 BB68     		ldr	r3, [r7, #8]
 2684 0f7a FFF709FD 		bl	vsnprintf
 2685 0f7e F860     		str	r0, [r7, #12]
 962:../src/os/rt-thread/src/kservice.c **** 	va_end(args);
 963:../src/os/rt-thread/src/kservice.c **** 
 964:../src/os/rt-thread/src/kservice.c **** 	return n;
 2686              		.loc 1 964 0
 2687 0f80 FB68     		ldr	r3, [r7, #12]
 965:../src/os/rt-thread/src/kservice.c **** }
 2688              		.loc 1 965 0
 2689 0f82 1846     		mov	r0, r3
 2690 0f84 07F11007 		add	r7, r7, #16
 2691 0f88 BD46     		mov	sp, r7
 2692 0f8a BDE88040 		pop	{r7, lr}
 2693 0f8e 02B0     		add	sp, sp, #8
 2694 0f90 7047     		bx	lr
 2695              		.cfi_endproc
 2696              	.LFE24:
 2698 0f92 00BF     		.align	2
 2699              		.global	rt_vsprintf
 2700              		.thumb
 2701              		.thumb_func
 2703              	rt_vsprintf:
 2704              	.LFB25:
 966:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_snprintf);
 967:../src/os/rt-thread/src/kservice.c **** 
 968:../src/os/rt-thread/src/kservice.c **** /**
 969:../src/os/rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
 970:../src/os/rt-thread/src/kservice.c ****  *
 971:../src/os/rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
 972:../src/os/rt-thread/src/kservice.c ****  * @param arg_ptr the arg_ptr
 973:../src/os/rt-thread/src/kservice.c ****  * @param format the format
 974:../src/os/rt-thread/src/kservice.c ****  */
 975:../src/os/rt-thread/src/kservice.c **** rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
 976:../src/os/rt-thread/src/kservice.c **** {
 2705              		.loc 1 976 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 16
 2708              		@ frame_needed = 1, uses_anonymous_args = 0
 2709 0f94 80B5     		push	{r7, lr}
 2710              	.LCFI61:
 2711              		.cfi_def_cfa_offset 8
 2712              		.cfi_offset 7, -8
 2713              		.cfi_offset 14, -4
 2714 0f96 84B0     		sub	sp, sp, #16
 2715              	.LCFI62:
 2716              		.cfi_def_cfa_offset 24
 2717 0f98 00AF     		add	r7, sp, #0
 2718              	.LCFI63:
 2719              		.cfi_def_cfa_register 7
 2720 0f9a F860     		str	r0, [r7, #12]
 2721 0f9c B960     		str	r1, [r7, #8]
 2722 0f9e 7A60     		str	r2, [r7, #4]
 977:../src/os/rt-thread/src/kservice.c **** 	return vsnprintf(buf, (rt_size_t) -1, format, arg_ptr);
 2723              		.loc 1 977 0
 2724 0fa0 F868     		ldr	r0, [r7, #12]
 2725 0fa2 4FF0FF31 		mov	r1, #-1
 2726 0fa6 BA68     		ldr	r2, [r7, #8]
 2727 0fa8 7B68     		ldr	r3, [r7, #4]
 2728 0faa FFF7F1FC 		bl	vsnprintf
 2729 0fae 0346     		mov	r3, r0
 978:../src/os/rt-thread/src/kservice.c **** }
 2730              		.loc 1 978 0
 2731 0fb0 1846     		mov	r0, r3
 2732 0fb2 07F11007 		add	r7, r7, #16
 2733 0fb6 BD46     		mov	sp, r7
 2734 0fb8 80BD     		pop	{r7, pc}
 2735              		.cfi_endproc
 2736              	.LFE25:
 2738 0fba 00BF     		.align	2
 2739              		.global	rt_sprintf
 2740              		.thumb
 2741              		.thumb_func
 2743              	rt_sprintf:
 2744              	.LFB26:
 979:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_vsprintf);
 980:../src/os/rt-thread/src/kservice.c **** 
 981:../src/os/rt-thread/src/kservice.c **** /**
 982:../src/os/rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
 983:../src/os/rt-thread/src/kservice.c ****  *
 984:../src/os/rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
 985:../src/os/rt-thread/src/kservice.c ****  * @param format the format
 986:../src/os/rt-thread/src/kservice.c ****  */
 987:../src/os/rt-thread/src/kservice.c **** rt_int32_t rt_sprintf(char *buf, const char *format, ...)
 988:../src/os/rt-thread/src/kservice.c **** {
 2745              		.loc 1 988 0
 2746              		.cfi_startproc
 2747              		@ args = 4, pretend = 12, frame = 16
 2748              		@ frame_needed = 1, uses_anonymous_args = 1
 2749 0fbc 0EB4     		push	{r1, r2, r3}
 2750              	.LCFI64:
 2751              		.cfi_def_cfa_offset 12
 2752              		.cfi_offset 1, -12
 2753              		.cfi_offset 2, -8
 2754              		.cfi_offset 3, -4
 2755 0fbe 80B5     		push	{r7, lr}
 2756              	.LCFI65:
 2757              		.cfi_def_cfa_offset 20
 2758              		.cfi_offset 7, -20
 2759              		.cfi_offset 14, -16
 2760 0fc0 85B0     		sub	sp, sp, #20
 2761              	.LCFI66:
 2762              		.cfi_def_cfa_offset 40
 2763 0fc2 00AF     		add	r7, sp, #0
 2764              	.LCFI67:
 2765              		.cfi_def_cfa_register 7
 2766 0fc4 7860     		str	r0, [r7, #4]
 989:../src/os/rt-thread/src/kservice.c **** 	rt_int32_t n;
 990:../src/os/rt-thread/src/kservice.c **** 	va_list arg_ptr;
 991:../src/os/rt-thread/src/kservice.c **** 
 992:../src/os/rt-thread/src/kservice.c **** 	va_start(arg_ptr, format);
 2767              		.loc 1 992 0
 2768 0fc6 07F12003 		add	r3, r7, #32
 2769 0fca BB60     		str	r3, [r7, #8]
 993:../src/os/rt-thread/src/kservice.c **** 	n = rt_vsprintf(buf ,format, arg_ptr);
 2770              		.loc 1 993 0
 2771 0fcc 7868     		ldr	r0, [r7, #4]
 2772 0fce F969     		ldr	r1, [r7, #28]
 2773 0fd0 BA68     		ldr	r2, [r7, #8]
 2774 0fd2 FFF7FEFF 		bl	rt_vsprintf
 2775 0fd6 F860     		str	r0, [r7, #12]
 994:../src/os/rt-thread/src/kservice.c **** 	va_end(arg_ptr);
 995:../src/os/rt-thread/src/kservice.c **** 
 996:../src/os/rt-thread/src/kservice.c **** 	return n;
 2776              		.loc 1 996 0
 2777 0fd8 FB68     		ldr	r3, [r7, #12]
 997:../src/os/rt-thread/src/kservice.c **** }
 2778              		.loc 1 997 0
 2779 0fda 1846     		mov	r0, r3
 2780 0fdc 07F11407 		add	r7, r7, #20
 2781 0fe0 BD46     		mov	sp, r7
 2782 0fe2 BDE88040 		pop	{r7, lr}
 2783 0fe6 03B0     		add	sp, sp, #12
 2784 0fe8 7047     		bx	lr
 2785              		.cfi_endproc
 2786              	.LFE26:
 2788 0fea 00BF     		.align	2
 2789              		.global	rt_console_get_device
 2790              		.thumb
 2791              		.thumb_func
 2793              	rt_console_get_device:
 2794              	.LFB27:
 998:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_sprintf);
 999:../src/os/rt-thread/src/kservice.c **** 
1000:../src/os/rt-thread/src/kservice.c **** #ifdef RT_USING_CONSOLE
1001:../src/os/rt-thread/src/kservice.c **** 
1002:../src/os/rt-thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1003:../src/os/rt-thread/src/kservice.c **** /**
1004:../src/os/rt-thread/src/kservice.c ****  * This function returns the device using in console.
1005:../src/os/rt-thread/src/kservice.c ****  *
1006:../src/os/rt-thread/src/kservice.c ****  * @return the device using in console or RT_NULL
1007:../src/os/rt-thread/src/kservice.c ****  */
1008:../src/os/rt-thread/src/kservice.c **** rt_device_t rt_console_get_device(void)
1009:../src/os/rt-thread/src/kservice.c **** {
 2795              		.loc 1 1009 0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 0
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799              		@ link register save eliminated.
 2800 0fec 80B4     		push	{r7}
 2801              	.LCFI68:
 2802              		.cfi_def_cfa_offset 4
 2803              		.cfi_offset 7, -4
 2804 0fee 00AF     		add	r7, sp, #0
 2805              	.LCFI69:
 2806              		.cfi_def_cfa_register 7
1010:../src/os/rt-thread/src/kservice.c **** 	return _console_device;
 2807              		.loc 1 1010 0
 2808 0ff0 024B     		ldr	r3, .L223
 2809 0ff2 1B68     		ldr	r3, [r3, #0]
1011:../src/os/rt-thread/src/kservice.c **** }
 2810              		.loc 1 1011 0
 2811 0ff4 1846     		mov	r0, r3
 2812 0ff6 BD46     		mov	sp, r7
 2813 0ff8 80BC     		pop	{r7}
 2814 0ffa 7047     		bx	lr
 2815              	.L224:
 2816              		.align	2
 2817              	.L223:
 2818 0ffc 04000000 		.word	_console_device
 2819              		.cfi_endproc
 2820              	.LFE27:
 2822              		.align	2
 2823              		.global	rt_console_set_device
 2824              		.thumb
 2825              		.thumb_func
 2827              	rt_console_set_device:
 2828              	.LFB28:
1012:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_console_get_device);
1013:../src/os/rt-thread/src/kservice.c **** 
1014:../src/os/rt-thread/src/kservice.c **** /**
1015:../src/os/rt-thread/src/kservice.c ****  * This function will set a device as console device.
1016:../src/os/rt-thread/src/kservice.c ****  * After set a device to console, all output of rt_kprintf will be
1017:../src/os/rt-thread/src/kservice.c ****  * redirected to this new device.
1018:../src/os/rt-thread/src/kservice.c ****  *
1019:../src/os/rt-thread/src/kservice.c ****  * @param name the name of new console device
1020:../src/os/rt-thread/src/kservice.c ****  *
1021:../src/os/rt-thread/src/kservice.c ****  * @return the old console device handler
1022:../src/os/rt-thread/src/kservice.c ****  */
1023:../src/os/rt-thread/src/kservice.c **** rt_device_t rt_console_set_device(const char *name)
1024:../src/os/rt-thread/src/kservice.c **** {
 2829              		.loc 1 1024 0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 16
 2832              		@ frame_needed = 1, uses_anonymous_args = 0
 2833 1000 80B5     		push	{r7, lr}
 2834              	.LCFI70:
 2835              		.cfi_def_cfa_offset 8
 2836              		.cfi_offset 7, -8
 2837              		.cfi_offset 14, -4
 2838 1002 84B0     		sub	sp, sp, #16
 2839              	.LCFI71:
 2840              		.cfi_def_cfa_offset 24
 2841 1004 00AF     		add	r7, sp, #0
 2842              	.LCFI72:
 2843              		.cfi_def_cfa_register 7
 2844 1006 7860     		str	r0, [r7, #4]
1025:../src/os/rt-thread/src/kservice.c **** 	rt_device_t new, old;
1026:../src/os/rt-thread/src/kservice.c **** 
1027:../src/os/rt-thread/src/kservice.c **** 	/* save old device */
1028:../src/os/rt-thread/src/kservice.c **** 	old = _console_device;
 2845              		.loc 1 1028 0
 2846 1008 114B     		ldr	r3, .L229
 2847 100a 1B68     		ldr	r3, [r3, #0]
 2848 100c FB60     		str	r3, [r7, #12]
1029:../src/os/rt-thread/src/kservice.c **** 
1030:../src/os/rt-thread/src/kservice.c **** 	/* find new console device */
1031:../src/os/rt-thread/src/kservice.c **** 	new = rt_device_find(name);
 2849              		.loc 1 1031 0
 2850 100e 7868     		ldr	r0, [r7, #4]
 2851 1010 FFF7FEFF 		bl	rt_device_find
 2852 1014 B860     		str	r0, [r7, #8]
1032:../src/os/rt-thread/src/kservice.c **** 	if (new != RT_NULL)
 2853              		.loc 1 1032 0
 2854 1016 BB68     		ldr	r3, [r7, #8]
 2855 1018 002B     		cmp	r3, #0
 2856 101a 12D0     		beq	.L226
1033:../src/os/rt-thread/src/kservice.c **** 	{
1034:../src/os/rt-thread/src/kservice.c **** 		if (_console_device != RT_NULL)
 2857              		.loc 1 1034 0
 2858 101c 0C4B     		ldr	r3, .L229
 2859 101e 1B68     		ldr	r3, [r3, #0]
 2860 1020 002B     		cmp	r3, #0
 2861 1022 04D0     		beq	.L227
1035:../src/os/rt-thread/src/kservice.c **** 		{
1036:../src/os/rt-thread/src/kservice.c **** 			/* close old console device */
1037:../src/os/rt-thread/src/kservice.c **** 			rt_device_close(_console_device);
 2862              		.loc 1 1037 0
 2863 1024 0A4B     		ldr	r3, .L229
 2864 1026 1B68     		ldr	r3, [r3, #0]
 2865 1028 1846     		mov	r0, r3
 2866 102a FFF7FEFF 		bl	rt_device_close
 2867              	.L227:
1038:../src/os/rt-thread/src/kservice.c **** 		}
1039:../src/os/rt-thread/src/kservice.c **** 
1040:../src/os/rt-thread/src/kservice.c **** 		/* set new console device */
1041:../src/os/rt-thread/src/kservice.c **** 		_console_device = new;
 2868              		.loc 1 1041 0
 2869 102e 084B     		ldr	r3, .L229
 2870 1030 BA68     		ldr	r2, [r7, #8]
 2871 1032 1A60     		str	r2, [r3, #0]
1042:../src/os/rt-thread/src/kservice.c **** 		rt_device_open(_console_device, RT_DEVICE_OFLAG_RDWR);
 2872              		.loc 1 1042 0
 2873 1034 064B     		ldr	r3, .L229
 2874 1036 1B68     		ldr	r3, [r3, #0]
 2875 1038 1846     		mov	r0, r3
 2876 103a 4FF00301 		mov	r1, #3
 2877 103e FFF7FEFF 		bl	rt_device_open
 2878              	.L226:
1043:../src/os/rt-thread/src/kservice.c **** 	}
1044:../src/os/rt-thread/src/kservice.c **** 
1045:../src/os/rt-thread/src/kservice.c **** 	return old;
 2879              		.loc 1 1045 0
 2880 1042 FB68     		ldr	r3, [r7, #12]
1046:../src/os/rt-thread/src/kservice.c **** }
 2881              		.loc 1 1046 0
 2882 1044 1846     		mov	r0, r3
 2883 1046 07F11007 		add	r7, r7, #16
 2884 104a BD46     		mov	sp, r7
 2885 104c 80BD     		pop	{r7, pc}
 2886              	.L230:
 2887 104e 00BF     		.align	2
 2888              	.L229:
 2889 1050 04000000 		.word	_console_device
 2890              		.cfi_endproc
 2891              	.LFE28:
 2893              		.align	2
 2894              		.weak	rt_hw_console_output
 2895              		.thumb
 2896              		.thumb_func
 2898              	rt_hw_console_output:
 2899              	.LFB29:
1047:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_console_set_device);
1048:../src/os/rt-thread/src/kservice.c **** #endif
1049:../src/os/rt-thread/src/kservice.c **** 
1050:../src/os/rt-thread/src/kservice.c **** #if defined(__GNUC__) || defined(__ADSPBLACKFIN__)
1051:../src/os/rt-thread/src/kservice.c **** void rt_hw_console_output(const char *str) __attribute__((weak));
1052:../src/os/rt-thread/src/kservice.c **** void rt_hw_console_output(const char *str)
1053:../src/os/rt-thread/src/kservice.c **** #elif defined(__CC_ARM)
1054:../src/os/rt-thread/src/kservice.c **** __weak void rt_hw_console_output(const char *str)
1055:../src/os/rt-thread/src/kservice.c **** #elif defined(__IAR_SYSTEMS_ICC__)
1056:../src/os/rt-thread/src/kservice.c ****     #if __VER__ > 540
1057:../src/os/rt-thread/src/kservice.c ****     __weak
1058:../src/os/rt-thread/src/kservice.c ****     #endif
1059:../src/os/rt-thread/src/kservice.c **** void rt_hw_console_output(const char *str)
1060:../src/os/rt-thread/src/kservice.c **** #else
1061:../src/os/rt-thread/src/kservice.c **** void rt_hw_console_output(const char *str)
1062:../src/os/rt-thread/src/kservice.c **** #endif
1063:../src/os/rt-thread/src/kservice.c **** {
 2900              		.loc 1 1063 0
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 8
 2903              		@ frame_needed = 1, uses_anonymous_args = 0
 2904              		@ link register save eliminated.
 2905 1054 80B4     		push	{r7}
 2906              	.LCFI73:
 2907              		.cfi_def_cfa_offset 4
 2908              		.cfi_offset 7, -4
 2909 1056 83B0     		sub	sp, sp, #12
 2910              	.LCFI74:
 2911              		.cfi_def_cfa_offset 16
 2912 1058 00AF     		add	r7, sp, #0
 2913              	.LCFI75:
 2914              		.cfi_def_cfa_register 7
 2915 105a 7860     		str	r0, [r7, #4]
1064:../src/os/rt-thread/src/kservice.c **** 	/* empty console output */
1065:../src/os/rt-thread/src/kservice.c **** }
 2916              		.loc 1 1065 0
 2917 105c 07F10C07 		add	r7, r7, #12
 2918 1060 BD46     		mov	sp, r7
 2919 1062 80BC     		pop	{r7}
 2920 1064 7047     		bx	lr
 2921              		.cfi_endproc
 2922              	.LFE29:
 2924 1066 00BF     		.align	2
 2925              		.global	rt_kprintf
 2926              		.thumb
 2927              		.thumb_func
 2929              	rt_kprintf:
 2930              	.LFB30:
1066:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_hw_console_output);
1067:../src/os/rt-thread/src/kservice.c **** 
1068:../src/os/rt-thread/src/kservice.c **** /**
1069:../src/os/rt-thread/src/kservice.c ****  * This function will print a formatted string on system console
1070:../src/os/rt-thread/src/kservice.c ****  *
1071:../src/os/rt-thread/src/kservice.c ****  * @param fmt the format
1072:../src/os/rt-thread/src/kservice.c ****  */
1073:../src/os/rt-thread/src/kservice.c **** void rt_kprintf(const char *fmt, ...)
1074:../src/os/rt-thread/src/kservice.c **** {
 2931              		.loc 1 1074 0
 2932              		.cfi_startproc
 2933              		@ args = 4, pretend = 16, frame = 8
 2934              		@ frame_needed = 1, uses_anonymous_args = 1
 2935 1068 0FB4     		push	{r0, r1, r2, r3}
 2936              	.LCFI76:
 2937              		.cfi_def_cfa_offset 16
 2938              		.cfi_offset 0, -16
 2939              		.cfi_offset 1, -12
 2940              		.cfi_offset 2, -8
 2941              		.cfi_offset 3, -4
 2942 106a 80B5     		push	{r7, lr}
 2943              	.LCFI77:
 2944              		.cfi_def_cfa_offset 24
 2945              		.cfi_offset 7, -24
 2946              		.cfi_offset 14, -20
 2947 106c 82B0     		sub	sp, sp, #8
 2948              	.LCFI78:
 2949              		.cfi_def_cfa_offset 32
 2950 106e 00AF     		add	r7, sp, #0
 2951              	.LCFI79:
 2952              		.cfi_def_cfa_register 7
1075:../src/os/rt-thread/src/kservice.c **** 	va_list args;
1076:../src/os/rt-thread/src/kservice.c **** 	rt_size_t length;
1077:../src/os/rt-thread/src/kservice.c **** 	static char rt_log_buf[RT_CONSOLEBUF_SIZE];
1078:../src/os/rt-thread/src/kservice.c **** 
1079:../src/os/rt-thread/src/kservice.c **** 	va_start(args, fmt);
 2953              		.loc 1 1079 0
 2954 1070 07F11403 		add	r3, r7, #20
 2955 1074 3B60     		str	r3, [r7, #0]
1080:../src/os/rt-thread/src/kservice.c **** 	length = vsnprintf(rt_log_buf, sizeof(rt_log_buf), fmt, args);
 2956              		.loc 1 1080 0
 2957 1076 1048     		ldr	r0, .L235
 2958 1078 4FF08001 		mov	r1, #128
 2959 107c 3A69     		ldr	r2, [r7, #16]
 2960 107e 3B68     		ldr	r3, [r7, #0]
 2961 1080 FFF786FC 		bl	vsnprintf
 2962 1084 0346     		mov	r3, r0
 2963 1086 7B60     		str	r3, [r7, #4]
1081:../src/os/rt-thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1082:../src/os/rt-thread/src/kservice.c **** 	if (_console_device == RT_NULL)
 2964              		.loc 1 1082 0
 2965 1088 0C4B     		ldr	r3, .L235+4
 2966 108a 1B68     		ldr	r3, [r3, #0]
 2967 108c 002B     		cmp	r3, #0
 2968 108e 03D1     		bne	.L233
1083:../src/os/rt-thread/src/kservice.c **** 	{
1084:../src/os/rt-thread/src/kservice.c **** 		rt_hw_console_output(rt_log_buf);
 2969              		.loc 1 1084 0
 2970 1090 0948     		ldr	r0, .L235
 2971 1092 FFF7FEFF 		bl	rt_hw_console_output
 2972 1096 08E0     		b	.L232
 2973              	.L233:
1085:../src/os/rt-thread/src/kservice.c **** 	}
1086:../src/os/rt-thread/src/kservice.c **** 	else
1087:../src/os/rt-thread/src/kservice.c **** 	{
1088:../src/os/rt-thread/src/kservice.c **** 		rt_device_write(_console_device, 0, rt_log_buf, length);
 2974              		.loc 1 1088 0
 2975 1098 084B     		ldr	r3, .L235+4
 2976 109a 1B68     		ldr	r3, [r3, #0]
 2977 109c 1846     		mov	r0, r3
 2978 109e 4FF00001 		mov	r1, #0
 2979 10a2 054A     		ldr	r2, .L235
 2980 10a4 7B68     		ldr	r3, [r7, #4]
 2981 10a6 FFF7FEFF 		bl	rt_device_write
 2982              	.L232:
1089:../src/os/rt-thread/src/kservice.c **** 	}
1090:../src/os/rt-thread/src/kservice.c **** #else
1091:../src/os/rt-thread/src/kservice.c **** 	rt_hw_console_output(rt_log_buf);
1092:../src/os/rt-thread/src/kservice.c **** #endif
1093:../src/os/rt-thread/src/kservice.c **** 	va_end(args);
1094:../src/os/rt-thread/src/kservice.c **** }
 2983              		.loc 1 1094 0
 2984 10aa 07F10807 		add	r7, r7, #8
 2985 10ae BD46     		mov	sp, r7
 2986 10b0 BDE88040 		pop	{r7, lr}
 2987 10b4 04B0     		add	sp, sp, #16
 2988 10b6 7047     		bx	lr
 2989              	.L236:
 2990              		.align	2
 2991              	.L235:
 2992 10b8 08000000 		.word	rt_log_buf.5110
 2993 10bc 04000000 		.word	_console_device
 2994              		.cfi_endproc
 2995              	.LFE30:
 2997              		.align	2
 2998              		.global	rt_malloc_align
 2999              		.thumb
 3000              		.thumb_func
 3002              	rt_malloc_align:
 3003              	.LFB31:
1095:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_kprintf);
1096:../src/os/rt-thread/src/kservice.c **** #else
1097:../src/os/rt-thread/src/kservice.c **** void rt_kprintf(const char *fmt, ...)
1098:../src/os/rt-thread/src/kservice.c **** {
1099:../src/os/rt-thread/src/kservice.c **** }
1100:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_kprintf);
1101:../src/os/rt-thread/src/kservice.c **** 
1102:../src/os/rt-thread/src/kservice.c **** #endif
1103:../src/os/rt-thread/src/kservice.c **** 
1104:../src/os/rt-thread/src/kservice.c **** #ifdef RT_USING_HEAP
1105:../src/os/rt-thread/src/kservice.c **** /**
1106:../src/os/rt-thread/src/kservice.c ****  * This function allocates a memory block, which address is aligned to the
1107:../src/os/rt-thread/src/kservice.c ****  * specified alignment size.
1108:../src/os/rt-thread/src/kservice.c ****  *
1109:../src/os/rt-thread/src/kservice.c ****  * @param size the allocated memory block size
1110:../src/os/rt-thread/src/kservice.c ****  * @param align the alignment size
1111:../src/os/rt-thread/src/kservice.c ****  *
1112:../src/os/rt-thread/src/kservice.c ****  * @return the allocated memory block on successful, otherwise returns RT_NULL
1113:../src/os/rt-thread/src/kservice.c ****  */
1114:../src/os/rt-thread/src/kservice.c **** void* rt_malloc_align(rt_size_t size, rt_size_t align)
1115:../src/os/rt-thread/src/kservice.c **** {
 3004              		.loc 1 1115 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 24
 3007              		@ frame_needed = 1, uses_anonymous_args = 0
 3008 10c0 80B5     		push	{r7, lr}
 3009              	.LCFI80:
 3010              		.cfi_def_cfa_offset 8
 3011              		.cfi_offset 7, -8
 3012              		.cfi_offset 14, -4
 3013 10c2 86B0     		sub	sp, sp, #24
 3014              	.LCFI81:
 3015              		.cfi_def_cfa_offset 32
 3016 10c4 00AF     		add	r7, sp, #0
 3017              	.LCFI82:
 3018              		.cfi_def_cfa_register 7
 3019 10c6 7860     		str	r0, [r7, #4]
 3020 10c8 3960     		str	r1, [r7, #0]
1116:../src/os/rt-thread/src/kservice.c **** 	void *align_ptr;
1117:../src/os/rt-thread/src/kservice.c **** 	void *ptr;
1118:../src/os/rt-thread/src/kservice.c **** 	rt_size_t align_size;
1119:../src/os/rt-thread/src/kservice.c **** 
1120:../src/os/rt-thread/src/kservice.c **** 	/* align the alignment size to 4 byte */
1121:../src/os/rt-thread/src/kservice.c **** 	align = ((align + 0x03) & ~0x03);
 3021              		.loc 1 1121 0
 3022 10ca 3B68     		ldr	r3, [r7, #0]
 3023 10cc 03F10303 		add	r3, r3, #3
 3024 10d0 23F00303 		bic	r3, r3, #3
 3025 10d4 3B60     		str	r3, [r7, #0]
1122:../src/os/rt-thread/src/kservice.c **** 
1123:../src/os/rt-thread/src/kservice.c **** 	/* get total aligned size */
1124:../src/os/rt-thread/src/kservice.c **** 	align_size = ((size + 0x03) & ~0x03) + align;
 3026              		.loc 1 1124 0
 3027 10d6 7B68     		ldr	r3, [r7, #4]
 3028 10d8 03F10303 		add	r3, r3, #3
 3029 10dc 23F00302 		bic	r2, r3, #3
 3030 10e0 3B68     		ldr	r3, [r7, #0]
 3031 10e2 D318     		adds	r3, r2, r3
 3032 10e4 FB60     		str	r3, [r7, #12]
1125:../src/os/rt-thread/src/kservice.c **** 	/* allocate memory block from heap */
1126:../src/os/rt-thread/src/kservice.c **** 	ptr = rt_malloc(align_size);
 3033              		.loc 1 1126 0
 3034 10e6 F868     		ldr	r0, [r7, #12]
 3035 10e8 FFF7FEFF 		bl	rt_malloc
 3036 10ec 3861     		str	r0, [r7, #16]
1127:../src/os/rt-thread/src/kservice.c **** 	if (ptr != RT_NULL)
 3037              		.loc 1 1127 0
 3038 10ee 3B69     		ldr	r3, [r7, #16]
 3039 10f0 002B     		cmp	r3, #0
 3040 10f2 1CD0     		beq	.L238
1128:../src/os/rt-thread/src/kservice.c **** 	{
1129:../src/os/rt-thread/src/kservice.c **** 		if (((rt_uint32_t)ptr & (align - 1)) == 0) /* the allocated memory block is aligned */
 3041              		.loc 1 1129 0
 3042 10f4 3B68     		ldr	r3, [r7, #0]
 3043 10f6 03F1FF32 		add	r2, r3, #-1
 3044 10fa 3B69     		ldr	r3, [r7, #16]
 3045 10fc 1340     		ands	r3, r3, r2
 3046 10fe 002B     		cmp	r3, #0
 3047 1100 04D1     		bne	.L239
1130:../src/os/rt-thread/src/kservice.c **** 		{
1131:../src/os/rt-thread/src/kservice.c **** 			align_ptr = (void*) ((rt_uint32_t)ptr + align);
 3048              		.loc 1 1131 0
 3049 1102 3A69     		ldr	r2, [r7, #16]
 3050 1104 3B68     		ldr	r3, [r7, #0]
 3051 1106 D318     		adds	r3, r2, r3
 3052 1108 7B61     		str	r3, [r7, #20]
 3053 110a 09E0     		b	.L240
 3054              	.L239:
1132:../src/os/rt-thread/src/kservice.c **** 		}
1133:../src/os/rt-thread/src/kservice.c **** 		else
1134:../src/os/rt-thread/src/kservice.c **** 		{
1135:../src/os/rt-thread/src/kservice.c **** 			align_ptr = (void*) (((rt_uint32_t)ptr + (align - 1)) & ~(align - 1));
 3055              		.loc 1 1135 0
 3056 110c 3A69     		ldr	r2, [r7, #16]
 3057 110e 3B68     		ldr	r3, [r7, #0]
 3058 1110 D318     		adds	r3, r2, r3
 3059 1112 03F1FF32 		add	r2, r3, #-1
 3060 1116 3B68     		ldr	r3, [r7, #0]
 3061 1118 C3F10003 		rsb	r3, r3, #0
 3062 111c 1340     		ands	r3, r3, r2
 3063 111e 7B61     		str	r3, [r7, #20]
 3064              	.L240:
1136:../src/os/rt-thread/src/kservice.c **** 		}
1137:../src/os/rt-thread/src/kservice.c **** 
1138:../src/os/rt-thread/src/kservice.c **** 		/* set the pointer before alignment pointer to the real pointer */
1139:../src/os/rt-thread/src/kservice.c **** 		*((rt_uint32_t*)((rt_uint32_t)align_ptr - sizeof(void*))) = (rt_uint32_t)ptr;
 3065              		.loc 1 1139 0
 3066 1120 7B69     		ldr	r3, [r7, #20]
 3067 1122 A3F10403 		sub	r3, r3, #4
 3068 1126 3A69     		ldr	r2, [r7, #16]
 3069 1128 1A60     		str	r2, [r3, #0]
1140:../src/os/rt-thread/src/kservice.c **** 
1141:../src/os/rt-thread/src/kservice.c **** 		ptr = align_ptr;
 3070              		.loc 1 1141 0
 3071 112a 7B69     		ldr	r3, [r7, #20]
 3072 112c 3B61     		str	r3, [r7, #16]
 3073              	.L238:
1142:../src/os/rt-thread/src/kservice.c **** 	}
1143:../src/os/rt-thread/src/kservice.c **** 
1144:../src/os/rt-thread/src/kservice.c **** 	return ptr;
 3074              		.loc 1 1144 0
 3075 112e 3B69     		ldr	r3, [r7, #16]
1145:../src/os/rt-thread/src/kservice.c **** }
 3076              		.loc 1 1145 0
 3077 1130 1846     		mov	r0, r3
 3078 1132 07F11807 		add	r7, r7, #24
 3079 1136 BD46     		mov	sp, r7
 3080 1138 80BD     		pop	{r7, pc}
 3081              		.cfi_endproc
 3082              	.LFE31:
 3084 113a 00BF     		.align	2
 3085              		.global	rt_free_align
 3086              		.thumb
 3087              		.thumb_func
 3089              	rt_free_align:
 3090              	.LFB32:
1146:../src/os/rt-thread/src/kservice.c **** RTM_EXPORT(rt_malloc_align);
1147:../src/os/rt-thread/src/kservice.c **** 
1148:../src/os/rt-thread/src/kservice.c **** /**
1149:../src/os/rt-thread/src/kservice.c ****  * This function release the memory block, which is allocated by rt_malloc_align
1150:../src/os/rt-thread/src/kservice.c ****  * function and address is aligned.
1151:../src/os/rt-thread/src/kservice.c ****  *
1152:../src/os/rt-thread/src/kservice.c ****  * @param ptr the memory block pointer
1153:../src/os/rt-thread/src/kservice.c ****  */
1154:../src/os/rt-thread/src/kservice.c **** void rt_free_align(void *ptr)
1155:../src/os/rt-thread/src/kservice.c **** {
 3091              		.loc 1 1155 0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 16
 3094              		@ frame_needed = 1, uses_anonymous_args = 0
 3095 113c 80B5     		push	{r7, lr}
 3096              	.LCFI83:
 3097              		.cfi_def_cfa_offset 8
 3098              		.cfi_offset 7, -8
 3099              		.cfi_offset 14, -4
 3100 113e 84B0     		sub	sp, sp, #16
 3101              	.LCFI84:
 3102              		.cfi_def_cfa_offset 24
 3103 1140 00AF     		add	r7, sp, #0
 3104              	.LCFI85:
 3105              		.cfi_def_cfa_register 7
 3106 1142 7860     		str	r0, [r7, #4]
1156:../src/os/rt-thread/src/kservice.c **** 	void *real_ptr;
1157:../src/os/rt-thread/src/kservice.c **** 
1158:../src/os/rt-thread/src/kservice.c **** 	real_ptr = (void*)*(rt_uint32_t*)((rt_uint32_t)ptr - sizeof(void*));
 3107              		.loc 1 1158 0
 3108 1144 7B68     		ldr	r3, [r7, #4]
 3109 1146 A3F10403 		sub	r3, r3, #4
 3110 114a 1B68     		ldr	r3, [r3, #0]
 3111 114c FB60     		str	r3, [r7, #12]
1159:../src/os/rt-thread/src/kservice.c **** 	rt_free(real_ptr);
 3112              		.loc 1 1159 0
 3113 114e F868     		ldr	r0, [r7, #12]
 3114 1150 FFF7FEFF 		bl	rt_free
1160:../src/os/rt-thread/src/kservice.c **** }
 3115              		.loc 1 1160 0
 3116 1154 07F11007 		add	r7, r7, #16
 3117 1158 BD46     		mov	sp, r7
 3118 115a 80BD     		pop	{r7, pc}
 3119              		.cfi_endproc
 3120              	.LFE32:
 3122              		.bss
 3123              		.align	2
 3124              	rt_log_buf.5110:
 3125 0008 00000000 		.space	128
 3125      00000000 
 3125      00000000 
 3125      00000000 
 3125      00000000 
 3126              		.section	.rodata
 3127 008f 00       		.align	2
 3130              	large_digits.5002:
 3131 0090 30313233 		.ascii	"0123456789ABCDEF\000"
 3131      34353637 
 3131      38394142 
 3131      43444546 
 3131      00
 3132 00a1 000000   		.align	2
 3135              	small_digits.5001:
 3136 00a4 30313233 		.ascii	"0123456789abcdef\000"
 3136      34353637 
 3136      38396162 
 3136      63646566 
 3136      00
 3137 00b5 000000   		.text
 3138              	.Letext0:
 3139              		.file 2 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
 3140              		.file 3 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 kservice.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:19     .bss:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:20     .bss:00000000 _errno
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:23     .bss:00000004 _console_device
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:26     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:31     .text:00000000 rt_get_errno
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:83     .text:00000038 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:87     .text:0000003c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:92     .text:0000003c rt_set_errno
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:148    .text:00000078 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:152    .text:0000007c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:157    .text:0000007c _rt_errno
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:206    .text:000000b0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:210    .text:000000b4 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:215    .text:000000b4 rt_memset
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:372    .text:0000019c rt_memcpy
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:550    .text:000002b4 rt_memmove
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:672    .text:00000364 rt_memcmp
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:750    .text:000003c4 rt_strstr
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1167   .text:000005d8 rt_strlen
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:833    .text:0000042c rt_strcasecmp
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:921    .text:0000049c rt_strncpy
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1019   .text:00000520 rt_strncmp
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1103   .text:00000590 rt_strcmp
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1218   .text:00000608 rt_strdup
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1271   .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1292   .text:00000648 rt_show_version
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2929   .text:00001068 rt_kprintf
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1332   .text:0000067c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1340   .text:00000690 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1344   .text:00000690 divide
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1416   .text:00000700 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1420   .text:00000704 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1424   .text:00000704 skip_atoi
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1485   .text:00000750 print_number
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1834   .text:00000988 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:3130   .rodata:00000090 large_digits.5002
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:3135   .rodata:000000a4 small_digits.5001
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1844   .text:00000990 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:1848   .text:00000990 vsnprintf
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2117   .text:00000b3c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2203   .text:00000c8c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2643   .text:00000f5c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2647   .text:00000f60 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2652   .text:00000f60 rt_snprintf
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2703   .text:00000f94 rt_vsprintf
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2743   .text:00000fbc rt_sprintf
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2793   .text:00000fec rt_console_get_device
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2818   .text:00000ffc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2822   .text:00001000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2827   .text:00001000 rt_console_set_device
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2889   .text:00001050 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2893   .text:00001054 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2898   .text:00001054 rt_hw_console_output
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2992   .text:000010b8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:3124   .bss:00000008 rt_log_buf.5110
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:2997   .text:000010c0 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:3002   .text:000010c0 rt_malloc_align
C:\Users\YANGZH~1\AppData\Local\Temp\ccPjpeRF.s:3089   .text:0000113c rt_free_align
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.1271905b0c3eea0323671cb235cf482e
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_interrupt_get_nest
rt_thread_self
rt_malloc
rt_device_find
rt_device_close
rt_device_open
rt_device_write
rt_free
