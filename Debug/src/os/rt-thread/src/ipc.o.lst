   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ipc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	rt_list_init:
  23              	.LFB0:
  24              		.file 1 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtservice.h"
   1:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*
   2:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * File      : rtservice.h
   3:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * This file is part of RT-Thread RTOS
   4:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
   6:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * The license and distribution terms for this file may be
   7:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * found in the file LICENSE in this distribution or at
   8:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * http://www.rt-thread.org/license/LICENSE
   9:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  10:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Change Logs:
  11:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Date           Author       Notes
  12:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-03-16     Bernard      the first version
  13:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  14:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  15:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  16:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  17:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  18:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifndef __RT_SERVICE_H__
  19:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define __RT_SERVICE_H__
  20:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  21:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifdef __cplusplus
  22:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** extern "C" {
  23:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #endif
  24:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  25:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  26:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @addtogroup KernelService
  27:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  28:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  29:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*@{*/
  30:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  31:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  32:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list object
  33:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  34:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  35:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  36:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  37:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list
  38:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  39:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to be initialized
  40:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  41:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  42:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  25              		.loc 1 42 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  43:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = l->prev = l;
  41              		.loc 1 43 0
  42 0008 7B68     		ldr	r3, [r7, #4]
  43 000a 7A68     		ldr	r2, [r7, #4]
  44 000c 5A60     		str	r2, [r3, #4]
  45 000e 7B68     		ldr	r3, [r7, #4]
  46 0010 5A68     		ldr	r2, [r3, #4]
  47 0012 7B68     		ldr	r3, [r7, #4]
  48 0014 1A60     		str	r2, [r3, #0]
  44:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  49              		.loc 1 44 0
  50 0016 07F10C07 		add	r7, r7, #12
  51 001a BD46     		mov	sp, r7
  52 001c 80BC     		pop	{r7}
  53 001e 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.align	2
  58              		.thumb
  59              		.thumb_func
  61              	rt_list_insert_before:
  62              	.LFB2:
  45:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  46:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  47:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node after a list
  48:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  49:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  50:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  51:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  52:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  53:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  54:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next->prev = n;
  55:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l->next;
  56:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  57:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = n;
  58:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l;
  59:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  60:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  61:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  62:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node before a list
  63:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  64:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  65:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  66:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  67:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  68:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  63              		.loc 1 68 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68 0020 80B4     		push	{r7}
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 7, -4
  72 0022 83B0     		sub	sp, sp, #12
  73              	.LCFI4:
  74              		.cfi_def_cfa_offset 16
  75 0024 00AF     		add	r7, sp, #0
  76              	.LCFI5:
  77              		.cfi_def_cfa_register 7
  78 0026 7860     		str	r0, [r7, #4]
  79 0028 3960     		str	r1, [r7, #0]
  69:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev->next = n;
  80              		.loc 1 69 0
  81 002a 7B68     		ldr	r3, [r7, #4]
  82 002c 5B68     		ldr	r3, [r3, #4]
  83 002e 3A68     		ldr	r2, [r7, #0]
  84 0030 1A60     		str	r2, [r3, #0]
  70:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l->prev;
  85              		.loc 1 70 0
  86 0032 7B68     		ldr	r3, [r7, #4]
  87 0034 5A68     		ldr	r2, [r3, #4]
  88 0036 3B68     		ldr	r3, [r7, #0]
  89 0038 5A60     		str	r2, [r3, #4]
  71:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  72:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev = n;
  90              		.loc 1 72 0
  91 003a 7B68     		ldr	r3, [r7, #4]
  92 003c 3A68     		ldr	r2, [r7, #0]
  93 003e 5A60     		str	r2, [r3, #4]
  73:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l;
  94              		.loc 1 73 0
  95 0040 3B68     		ldr	r3, [r7, #0]
  96 0042 7A68     		ldr	r2, [r7, #4]
  97 0044 1A60     		str	r2, [r3, #0]
  74:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  98              		.loc 1 74 0
  99 0046 07F10C07 		add	r7, r7, #12
 100 004a BD46     		mov	sp, r7
 101 004c 80BC     		pop	{r7}
 102 004e 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE2:
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 110              	rt_list_isempty:
 111              	.LFB4:
  75:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  76:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  77:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief remove node from list.
  78:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n the node to remove from the list.
  79:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  80:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  81:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  82:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next->prev = n->prev;
  83:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev->next = n->next;
  84:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  85:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = n->prev = n;
  86:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  87:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  88:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  89:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief tests whether a list is empty
  90:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l the list to test.
  91:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  92:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  93:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
 112              		.loc 1 93 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0050 80B4     		push	{r7}
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0052 83B0     		sub	sp, sp, #12
 122              	.LCFI7:
 123              		.cfi_def_cfa_offset 16
 124 0054 00AF     		add	r7, sp, #0
 125              	.LCFI8:
 126              		.cfi_def_cfa_register 7
 127 0056 7860     		str	r0, [r7, #4]
  94:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     return l->next == l;
 128              		.loc 1 94 0
 129 0058 7B68     		ldr	r3, [r7, #4]
 130 005a 1A68     		ldr	r2, [r3, #0]
 131 005c 7B68     		ldr	r3, [r7, #4]
 132 005e 9A42     		cmp	r2, r3
 133 0060 14BF     		ite	ne
 134 0062 0023     		movne	r3, #0
 135 0064 0123     		moveq	r3, #1
 136 0066 DBB2     		uxtb	r3, r3
  95:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
 137              		.loc 1 95 0
 138 0068 1846     		mov	r0, r3
 139 006a 07F10C07 		add	r7, r7, #12
 140 006e BD46     		mov	sp, r7
 141 0070 80BC     		pop	{r7}
 142 0072 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE4:
 146              		.align	2
 147              		.thumb
 148              		.thumb_func
 150              	rt_ipc_object_init:
 151              	.LFB5:
 152              		.file 2 "../src/os/rt-thread/src/ipc.c"
   1:../src/os/rt-thread/src/ipc.c **** /*
   2:../src/os/rt-thread/src/ipc.c ****  * File      : ipc.c
   3:../src/os/rt-thread/src/ipc.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/ipc.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/ipc.c ****  *
   6:../src/os/rt-thread/src/ipc.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/ipc.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/ipc.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/ipc.c ****  *
  10:../src/os/rt-thread/src/ipc.c ****  * Change Logs:
  11:../src/os/rt-thread/src/ipc.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/ipc.c ****  * 2006-03-14     Bernard      the first version
  13:../src/os/rt-thread/src/ipc.c ****  * 2006-04-25     Bernard      implement semaphore
  14:../src/os/rt-thread/src/ipc.c ****  * 2006-05-03     Bernard      add RT_IPC_DEBUG
  15:../src/os/rt-thread/src/ipc.c ****  *                             modify the type of IPC waiting time to rt_int32_t
  16:../src/os/rt-thread/src/ipc.c ****  * 2006-05-10     Bernard      fix the semaphore take bug and add IPC object
  17:../src/os/rt-thread/src/ipc.c ****  * 2006-05-12     Bernard      implement mailbox and message queue
  18:../src/os/rt-thread/src/ipc.c ****  * 2006-05-20     Bernard      implement mutex
  19:../src/os/rt-thread/src/ipc.c ****  * 2006-05-23     Bernard      implement fast event
  20:../src/os/rt-thread/src/ipc.c ****  * 2006-05-24     Bernard      implement event
  21:../src/os/rt-thread/src/ipc.c ****  * 2006-06-03     Bernard      fix the thread timer init bug
  22:../src/os/rt-thread/src/ipc.c ****  * 2006-06-05     Bernard      fix the mutex release bug
  23:../src/os/rt-thread/src/ipc.c ****  * 2006-06-07     Bernard      fix the message queue send bug
  24:../src/os/rt-thread/src/ipc.c ****  * 2006-08-04     Bernard      add hook support
  25:../src/os/rt-thread/src/ipc.c ****  * 2009-05-21     Yi.qiu       fix the sem release bug
  26:../src/os/rt-thread/src/ipc.c ****  * 2009-07-18     Bernard      fix the event clear bug
  27:../src/os/rt-thread/src/ipc.c ****  * 2009-09-09     Bernard      remove fast event and fix ipc release bug
  28:../src/os/rt-thread/src/ipc.c ****  * 2009-10-10     Bernard      change semaphore and mutex value to unsigned value
  29:../src/os/rt-thread/src/ipc.c ****  * 2009-10-25     Bernard      change the mb/mq receive timeout to 0 if the
  30:../src/os/rt-thread/src/ipc.c ****  *                             re-calculated delta tick is a negative number.
  31:../src/os/rt-thread/src/ipc.c ****  * 2009-12-16     Bernard      fix the rt_ipc_object_suspend issue when IPC flag
  32:../src/os/rt-thread/src/ipc.c ****  *                             is RT_IPC_FLAG_PRIO
  33:../src/os/rt-thread/src/ipc.c ****  * 2010-01-20     mbbill       remove rt_ipc_object_decrease function.
  34:../src/os/rt-thread/src/ipc.c ****  * 2010-04-20     Bernard      move memcpy outside interrupt disable in mq
  35:../src/os/rt-thread/src/ipc.c ****  * 2010-10-26     yi.qiu       add module support in rt_mp_delete and rt_mq_delete
  36:../src/os/rt-thread/src/ipc.c ****  * 2010-11-10     Bernard      add IPC reset command implementation.
  37:../src/os/rt-thread/src/ipc.c ****  * 2011-12-18     Bernard      add more parameter checking in message queue
  38:../src/os/rt-thread/src/ipc.c ****  */
  39:../src/os/rt-thread/src/ipc.c **** 
  40:../src/os/rt-thread/src/ipc.c **** #include <rtthread.h>
  41:../src/os/rt-thread/src/ipc.c **** #include <rthw.h>
  42:../src/os/rt-thread/src/ipc.c **** 
  43:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HOOK
  44:../src/os/rt-thread/src/ipc.c **** extern void (*rt_object_trytake_hook)(struct rt_object *object);
  45:../src/os/rt-thread/src/ipc.c **** extern void (*rt_object_take_hook)(struct rt_object *object);
  46:../src/os/rt-thread/src/ipc.c **** extern void (*rt_object_put_hook)(struct rt_object *object);
  47:../src/os/rt-thread/src/ipc.c **** #endif
  48:../src/os/rt-thread/src/ipc.c **** 
  49:../src/os/rt-thread/src/ipc.c **** /**
  50:../src/os/rt-thread/src/ipc.c ****  * @addtogroup IPC
  51:../src/os/rt-thread/src/ipc.c ****  */
  52:../src/os/rt-thread/src/ipc.c **** 
  53:../src/os/rt-thread/src/ipc.c **** /*@{*/
  54:../src/os/rt-thread/src/ipc.c **** 
  55:../src/os/rt-thread/src/ipc.c **** /**
  56:../src/os/rt-thread/src/ipc.c ****  * This function will initialize an IPC object
  57:../src/os/rt-thread/src/ipc.c ****  *
  58:../src/os/rt-thread/src/ipc.c ****  * @param ipc the IPC object
  59:../src/os/rt-thread/src/ipc.c ****  *
  60:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
  61:../src/os/rt-thread/src/ipc.c ****  */
  62:../src/os/rt-thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_object_init(struct rt_ipc_object *ipc)
  63:../src/os/rt-thread/src/ipc.c **** {
 153              		.loc 2 63 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 8
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0074 80B5     		push	{r7, lr}
 158              	.LCFI9:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 0076 82B0     		sub	sp, sp, #8
 163              	.LCFI10:
 164              		.cfi_def_cfa_offset 16
 165 0078 00AF     		add	r7, sp, #0
 166              	.LCFI11:
 167              		.cfi_def_cfa_register 7
 168 007a 7860     		str	r0, [r7, #4]
  64:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
  65:../src/os/rt-thread/src/ipc.c **** 	rt_list_init(&(ipc->suspend_thread));
 169              		.loc 2 65 0
 170 007c 7B68     		ldr	r3, [r7, #4]
 171 007e 03F11003 		add	r3, r3, #16
 172 0082 1846     		mov	r0, r3
 173 0084 FFF7BCFF 		bl	rt_list_init
  66:../src/os/rt-thread/src/ipc.c **** 
  67:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 174              		.loc 2 67 0
 175 0088 4FF00003 		mov	r3, #0
  68:../src/os/rt-thread/src/ipc.c **** }
 176              		.loc 2 68 0
 177 008c 1846     		mov	r0, r3
 178 008e 07F10807 		add	r7, r7, #8
 179 0092 BD46     		mov	sp, r7
 180 0094 80BD     		pop	{r7, pc}
 181              		.cfi_endproc
 182              	.LFE5:
 184 0096 00BF     		.align	2
 185              		.thumb
 186              		.thumb_func
 188              	rt_ipc_list_suspend:
 189              	.LFB6:
  69:../src/os/rt-thread/src/ipc.c **** 
  70:../src/os/rt-thread/src/ipc.c **** /**
  71:../src/os/rt-thread/src/ipc.c ****  * This function will suspend a thread to a specified list. IPC object or some double-queue
  72:../src/os/rt-thread/src/ipc.c ****  * object (mailbox etc.) contains this kind of list.
  73:../src/os/rt-thread/src/ipc.c ****  *
  74:../src/os/rt-thread/src/ipc.c ****  * @param list the IPC suspended thread list
  75:../src/os/rt-thread/src/ipc.c ****  * @param thread the thread object to be suspended
  76:../src/os/rt-thread/src/ipc.c ****  * @param flag the IPC object flag, which shall be RT_IPC_FLAG_FIFO/RT_IPC_FLAG_PRIO.
  77:../src/os/rt-thread/src/ipc.c ****  *
  78:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
  79:../src/os/rt-thread/src/ipc.c ****  */
  80:../src/os/rt-thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_suspend(rt_list_t *list, struct rt_thread *thread, rt_uint8_t flag)
  81:../src/os/rt-thread/src/ipc.c **** {
 190              		.loc 2 81 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 24
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0098 80B5     		push	{r7, lr}
 195              	.LCFI12:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 009a 86B0     		sub	sp, sp, #24
 200              	.LCFI13:
 201              		.cfi_def_cfa_offset 32
 202 009c 00AF     		add	r7, sp, #0
 203              	.LCFI14:
 204              		.cfi_def_cfa_register 7
 205 009e F860     		str	r0, [r7, #12]
 206 00a0 B960     		str	r1, [r7, #8]
 207 00a2 1346     		mov	r3, r2
 208 00a4 FB71     		strb	r3, [r7, #7]
  82:../src/os/rt-thread/src/ipc.c **** 	/* suspend thread */
  83:../src/os/rt-thread/src/ipc.c **** 	rt_thread_suspend(thread);
 209              		.loc 2 83 0
 210 00a6 B868     		ldr	r0, [r7, #8]
 211 00a8 FFF7FEFF 		bl	rt_thread_suspend
  84:../src/os/rt-thread/src/ipc.c **** 
  85:../src/os/rt-thread/src/ipc.c **** 	switch (flag)
 212              		.loc 2 85 0
 213 00ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 214 00ae 002B     		cmp	r3, #0
 215 00b0 02D0     		beq	.L9
 216 00b2 012B     		cmp	r3, #1
 217 00b4 08D0     		beq	.L10
 218 00b6 35E0     		b	.L8
 219              	.L9:
  86:../src/os/rt-thread/src/ipc.c **** 	{
  87:../src/os/rt-thread/src/ipc.c **** 	case RT_IPC_FLAG_FIFO:
  88:../src/os/rt-thread/src/ipc.c **** 		rt_list_insert_before(list, &(thread->tlist));
 220              		.loc 2 88 0
 221 00b8 BB68     		ldr	r3, [r7, #8]
 222 00ba 03F11003 		add	r3, r3, #16
 223 00be F868     		ldr	r0, [r7, #12]
 224 00c0 1946     		mov	r1, r3
 225 00c2 FFF7ADFF 		bl	rt_list_insert_before
  89:../src/os/rt-thread/src/ipc.c **** 		break;
 226              		.loc 2 89 0
 227 00c6 2DE0     		b	.L8
 228              	.L10:
 229              	.LBB2:
  90:../src/os/rt-thread/src/ipc.c **** 
  91:../src/os/rt-thread/src/ipc.c **** 	case RT_IPC_FLAG_PRIO:
  92:../src/os/rt-thread/src/ipc.c **** 		{
  93:../src/os/rt-thread/src/ipc.c **** 			struct rt_list_node *n;
  94:../src/os/rt-thread/src/ipc.c **** 			struct rt_thread *sthread;
  95:../src/os/rt-thread/src/ipc.c **** 
  96:../src/os/rt-thread/src/ipc.c **** 			/* find a suitable position */
  97:../src/os/rt-thread/src/ipc.c **** 			for (n = list->next; n != list; n = n->next)
 230              		.loc 2 97 0
 231 00c8 FB68     		ldr	r3, [r7, #12]
 232 00ca 1B68     		ldr	r3, [r3, #0]
 233 00cc 7B61     		str	r3, [r7, #20]
 234 00ce 19E0     		b	.L11
 235              	.L14:
  98:../src/os/rt-thread/src/ipc.c **** 			{
  99:../src/os/rt-thread/src/ipc.c **** 				sthread = rt_list_entry(n, struct rt_thread, tlist);
 236              		.loc 2 99 0
 237 00d0 7B69     		ldr	r3, [r7, #20]
 238 00d2 A3F11003 		sub	r3, r3, #16
 239 00d6 3B61     		str	r3, [r7, #16]
 100:../src/os/rt-thread/src/ipc.c **** 
 101:../src/os/rt-thread/src/ipc.c **** 				/* find out */
 102:../src/os/rt-thread/src/ipc.c **** 				if (thread->current_priority < sthread->current_priority)
 240              		.loc 2 102 0
 241 00d8 BB68     		ldr	r3, [r7, #8]
 242 00da 93F83120 		ldrb	r2, [r3, #49]	@ zero_extendqisi2
 243 00de 3B69     		ldr	r3, [r7, #16]
 244 00e0 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 245 00e4 9A42     		cmp	r2, r3
 246 00e6 0AD2     		bcs	.L12
 103:../src/os/rt-thread/src/ipc.c **** 				{
 104:../src/os/rt-thread/src/ipc.c **** 					/* insert this thread before the sthread */
 105:../src/os/rt-thread/src/ipc.c **** 					rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 247              		.loc 2 105 0
 248 00e8 3B69     		ldr	r3, [r7, #16]
 249 00ea 03F11002 		add	r2, r3, #16
 250 00ee BB68     		ldr	r3, [r7, #8]
 251 00f0 03F11003 		add	r3, r3, #16
 252 00f4 1046     		mov	r0, r2
 253 00f6 1946     		mov	r1, r3
 254 00f8 FFF792FF 		bl	rt_list_insert_before
 106:../src/os/rt-thread/src/ipc.c **** 					break;
 255              		.loc 2 106 0
 256 00fc 06E0     		b	.L13
 257              	.L12:
  97:../src/os/rt-thread/src/ipc.c **** 			for (n = list->next; n != list; n = n->next)
 258              		.loc 2 97 0
 259 00fe 7B69     		ldr	r3, [r7, #20]
 260 0100 1B68     		ldr	r3, [r3, #0]
 261 0102 7B61     		str	r3, [r7, #20]
 262              	.L11:
  97:../src/os/rt-thread/src/ipc.c **** 			for (n = list->next; n != list; n = n->next)
 263              		.loc 2 97 0 is_stmt 0 discriminator 1
 264 0104 7A69     		ldr	r2, [r7, #20]
 265 0106 FB68     		ldr	r3, [r7, #12]
 266 0108 9A42     		cmp	r2, r3
 267 010a E1D1     		bne	.L14
 268              	.L13:
 107:../src/os/rt-thread/src/ipc.c **** 				}
 108:../src/os/rt-thread/src/ipc.c **** 			}
 109:../src/os/rt-thread/src/ipc.c **** 
 110:../src/os/rt-thread/src/ipc.c **** 			/* not found a suitable position, append to the end of suspend_thread list */
 111:../src/os/rt-thread/src/ipc.c **** 			if (n == list)
 269              		.loc 2 111 0 is_stmt 1
 270 010c 7A69     		ldr	r2, [r7, #20]
 271 010e FB68     		ldr	r3, [r7, #12]
 272 0110 9A42     		cmp	r2, r3
 273 0112 06D1     		bne	.L17
 112:../src/os/rt-thread/src/ipc.c **** 				rt_list_insert_before(list, &(thread->tlist));
 274              		.loc 2 112 0
 275 0114 BB68     		ldr	r3, [r7, #8]
 276 0116 03F11003 		add	r3, r3, #16
 277 011a F868     		ldr	r0, [r7, #12]
 278 011c 1946     		mov	r1, r3
 279 011e FFF77FFF 		bl	rt_list_insert_before
 280              	.L17:
 281              	.LBE2:
 113:../src/os/rt-thread/src/ipc.c **** 		}
 114:../src/os/rt-thread/src/ipc.c **** 		break;
 282              		.loc 2 114 0
 283 0122 00BF     		nop
 284              	.L8:
 115:../src/os/rt-thread/src/ipc.c **** 	}
 116:../src/os/rt-thread/src/ipc.c **** 
 117:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 285              		.loc 2 117 0
 286 0124 4FF00003 		mov	r3, #0
 118:../src/os/rt-thread/src/ipc.c **** }
 287              		.loc 2 118 0
 288 0128 1846     		mov	r0, r3
 289 012a 07F11807 		add	r7, r7, #24
 290 012e BD46     		mov	sp, r7
 291 0130 80BD     		pop	{r7, pc}
 292              		.cfi_endproc
 293              	.LFE6:
 295 0132 00BF     		.align	2
 296              		.thumb
 297              		.thumb_func
 299              	rt_ipc_list_resume:
 300              	.LFB7:
 119:../src/os/rt-thread/src/ipc.c **** 
 120:../src/os/rt-thread/src/ipc.c **** /**
 121:../src/os/rt-thread/src/ipc.c ****  * This function will resume the first thread in the list of a IPC object:
 122:../src/os/rt-thread/src/ipc.c ****  * - remove the thread from suspend queue of IPC object
 123:../src/os/rt-thread/src/ipc.c ****  * - put the thread into system ready queue
 124:../src/os/rt-thread/src/ipc.c ****  *
 125:../src/os/rt-thread/src/ipc.c ****  * @param list the thread list
 126:../src/os/rt-thread/src/ipc.c ****  *
 127:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 128:../src/os/rt-thread/src/ipc.c ****  */
 129:../src/os/rt-thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_resume(rt_list_t *list)
 130:../src/os/rt-thread/src/ipc.c **** {
 301              		.loc 2 130 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 16
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305 0134 80B5     		push	{r7, lr}
 306              	.LCFI15:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0136 84B0     		sub	sp, sp, #16
 311              	.LCFI16:
 312              		.cfi_def_cfa_offset 24
 313 0138 00AF     		add	r7, sp, #0
 314              	.LCFI17:
 315              		.cfi_def_cfa_register 7
 316 013a 7860     		str	r0, [r7, #4]
 131:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 132:../src/os/rt-thread/src/ipc.c **** 
 133:../src/os/rt-thread/src/ipc.c **** 	/* get thread entry */
 134:../src/os/rt-thread/src/ipc.c **** 	thread = rt_list_entry(list->next, struct rt_thread, tlist);
 317              		.loc 2 134 0
 318 013c 7B68     		ldr	r3, [r7, #4]
 319 013e 1B68     		ldr	r3, [r3, #0]
 320 0140 A3F11003 		sub	r3, r3, #16
 321 0144 FB60     		str	r3, [r7, #12]
 135:../src/os/rt-thread/src/ipc.c **** 
 136:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));
 137:../src/os/rt-thread/src/ipc.c **** 
 138:../src/os/rt-thread/src/ipc.c **** 	/* resume it */
 139:../src/os/rt-thread/src/ipc.c **** 	rt_thread_resume(thread);
 322              		.loc 2 139 0
 323 0146 F868     		ldr	r0, [r7, #12]
 324 0148 FFF7FEFF 		bl	rt_thread_resume
 140:../src/os/rt-thread/src/ipc.c **** 
 141:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 325              		.loc 2 141 0
 326 014c 4FF00003 		mov	r3, #0
 142:../src/os/rt-thread/src/ipc.c **** }
 327              		.loc 2 142 0
 328 0150 1846     		mov	r0, r3
 329 0152 07F11007 		add	r7, r7, #16
 330 0156 BD46     		mov	sp, r7
 331 0158 80BD     		pop	{r7, pc}
 332              		.cfi_endproc
 333              	.LFE7:
 335 015a 00BF     		.align	2
 336              		.thumb
 337              		.thumb_func
 339              	rt_ipc_list_resume_all:
 340              	.LFB8:
 143:../src/os/rt-thread/src/ipc.c **** 
 144:../src/os/rt-thread/src/ipc.c **** /**
 145:../src/os/rt-thread/src/ipc.c ****  * This function will resume all suspended threads in a list, including
 146:../src/os/rt-thread/src/ipc.c ****  * suspend list of IPC object and private list of mailbox etc.
 147:../src/os/rt-thread/src/ipc.c ****  *
 148:../src/os/rt-thread/src/ipc.c ****  * @param list of the threads to resume
 149:../src/os/rt-thread/src/ipc.c ****  *
 150:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 151:../src/os/rt-thread/src/ipc.c ****  */
 152:../src/os/rt-thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_resume_all(rt_list_t *list)
 153:../src/os/rt-thread/src/ipc.c **** {
 341              		.loc 2 153 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 16
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345 015c 90B5     		push	{r4, r7, lr}
 346              	.LCFI18:
 347              		.cfi_def_cfa_offset 12
 348              		.cfi_offset 4, -12
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 015e 85B0     		sub	sp, sp, #20
 352              	.LCFI19:
 353              		.cfi_def_cfa_offset 32
 354 0160 00AF     		add	r7, sp, #0
 355              	.LCFI20:
 356              		.cfi_def_cfa_register 7
 357 0162 7860     		str	r0, [r7, #4]
 154:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 155:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
 156:../src/os/rt-thread/src/ipc.c **** 
 157:../src/os/rt-thread/src/ipc.c **** 	/* wakeup all suspend threads */
 158:../src/os/rt-thread/src/ipc.c **** 	while (!rt_list_isempty(list))
 358              		.loc 2 158 0
 359 0164 13E0     		b	.L21
 360              	.L22:
 159:../src/os/rt-thread/src/ipc.c **** 	{
 160:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
 161:../src/os/rt-thread/src/ipc.c **** 		temp = rt_hw_interrupt_disable();
 361              		.loc 2 161 0
 362 0166 FFF7FEFF 		bl	rt_hw_interrupt_disable
 363 016a 0346     		mov	r3, r0
 364 016c 1C46     		mov	r4, r3
 162:../src/os/rt-thread/src/ipc.c **** 
 163:../src/os/rt-thread/src/ipc.c **** 		/* get next suspend thread */
 164:../src/os/rt-thread/src/ipc.c **** 		thread = rt_list_entry(list->next, struct rt_thread, tlist);
 365              		.loc 2 164 0
 366 016e 7B68     		ldr	r3, [r7, #4]
 367 0170 1B68     		ldr	r3, [r3, #0]
 368 0172 A3F11003 		sub	r3, r3, #16
 369 0176 FB60     		str	r3, [r7, #12]
 165:../src/os/rt-thread/src/ipc.c **** 		/* set error code to RT_ERROR */
 166:../src/os/rt-thread/src/ipc.c **** 		thread->error = -RT_ERROR;
 370              		.loc 2 166 0
 371 0178 FB68     		ldr	r3, [r7, #12]
 372 017a 4FF0FF32 		mov	r2, #-1
 373 017e DA62     		str	r2, [r3, #44]
 167:../src/os/rt-thread/src/ipc.c **** 
 168:../src/os/rt-thread/src/ipc.c **** 		/*
 169:../src/os/rt-thread/src/ipc.c **** 		 * resume thread
 170:../src/os/rt-thread/src/ipc.c **** 		 * In rt_thread_resume function, it will remove current thread from
 171:../src/os/rt-thread/src/ipc.c **** 		 * suspend list
 172:../src/os/rt-thread/src/ipc.c **** 		 */
 173:../src/os/rt-thread/src/ipc.c **** 		rt_thread_resume(thread);
 374              		.loc 2 173 0
 375 0180 F868     		ldr	r0, [r7, #12]
 376 0182 FFF7FEFF 		bl	rt_thread_resume
 174:../src/os/rt-thread/src/ipc.c **** 
 175:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
 176:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 377              		.loc 2 176 0
 378 0186 2346     		mov	r3, r4
 379 0188 1846     		mov	r0, r3
 380 018a FFF7FEFF 		bl	rt_hw_interrupt_enable
 381              	.L21:
 158:../src/os/rt-thread/src/ipc.c **** 	while (!rt_list_isempty(list))
 382              		.loc 2 158 0 discriminator 1
 383 018e 7868     		ldr	r0, [r7, #4]
 384 0190 FFF75EFF 		bl	rt_list_isempty
 385 0194 0346     		mov	r3, r0
 386 0196 002B     		cmp	r3, #0
 387 0198 E5D0     		beq	.L22
 177:../src/os/rt-thread/src/ipc.c **** 	}
 178:../src/os/rt-thread/src/ipc.c **** 
 179:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 388              		.loc 2 179 0
 389 019a 4FF00003 		mov	r3, #0
 180:../src/os/rt-thread/src/ipc.c **** }
 390              		.loc 2 180 0
 391 019e 1846     		mov	r0, r3
 392 01a0 07F11407 		add	r7, r7, #20
 393 01a4 BD46     		mov	sp, r7
 394 01a6 90BD     		pop	{r4, r7, pc}
 395              		.cfi_endproc
 396              	.LFE8:
 398              		.section	.rodata
 399              		.align	2
 400              	.LC0:
 401 0000 28257329 		.ascii	"(%s) assert failed at %s:%d \012\000"
 401      20617373 
 401      65727420 
 401      6661696C 
 401      65642061 
 402 001e 0000     		.align	2
 403              	.LC1:
 404 0020 73656D20 		.ascii	"sem != RT_NULL\000"
 404      213D2052 
 404      545F4E55 
 404      4C4C00
 405              		.text
 406              		.align	2
 407              		.global	rt_sem_init
 408              		.thumb
 409              		.thumb_func
 411              	rt_sem_init:
 412              	.LFB9:
 181:../src/os/rt-thread/src/ipc.c **** 
 182:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_SEMAPHORE
 183:../src/os/rt-thread/src/ipc.c **** /**
 184:../src/os/rt-thread/src/ipc.c ****  * This function will initialize a semaphore and put it under control of resource
 185:../src/os/rt-thread/src/ipc.c ****  * management.
 186:../src/os/rt-thread/src/ipc.c ****  *
 187:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 188:../src/os/rt-thread/src/ipc.c ****  * @param name the name of semaphore
 189:../src/os/rt-thread/src/ipc.c ****  * @param value the init value of semaphore
 190:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of semaphore
 191:../src/os/rt-thread/src/ipc.c ****  *
 192:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 193:../src/os/rt-thread/src/ipc.c ****  */
 194:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_init(rt_sem_t sem, const char *name, rt_uint32_t value, rt_uint8_t flag)
 195:../src/os/rt-thread/src/ipc.c **** {
 413              		.loc 2 195 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 24
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417 01a8 80B5     		push	{r7, lr}
 418              	.LCFI21:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 01aa 86B0     		sub	sp, sp, #24
 423              	.LCFI22:
 424              		.cfi_def_cfa_offset 32
 425 01ac 00AF     		add	r7, sp, #0
 426              	.LCFI23:
 427              		.cfi_def_cfa_register 7
 428 01ae F860     		str	r0, [r7, #12]
 429 01b0 B960     		str	r1, [r7, #8]
 430 01b2 7A60     		str	r2, [r7, #4]
 431 01b4 FB70     		strb	r3, [r7, #3]
 196:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(sem != RT_NULL);
 432              		.loc 2 196 0
 433 01b6 FB68     		ldr	r3, [r7, #12]
 434 01b8 002B     		cmp	r3, #0
 435 01ba 0DD1     		bne	.L25
 436              	.LBB3:
 437              		.loc 2 196 0 is_stmt 0 discriminator 1
 438 01bc 4FF00003 		mov	r3, #0
 439 01c0 FB75     		strb	r3, [r7, #23]
 440 01c2 1248     		ldr	r0, .L28
 441 01c4 1249     		ldr	r1, .L28+4
 442 01c6 134A     		ldr	r2, .L28+8
 443 01c8 4FF0C403 		mov	r3, #196
 444 01cc FFF7FEFF 		bl	rt_kprintf
 445              	.L26:
 446              		.loc 2 196 0 discriminator 2
 447 01d0 FB7D     		ldrb	r3, [r7, #23]
 448 01d2 DBB2     		uxtb	r3, r3
 449 01d4 002B     		cmp	r3, #0
 450 01d6 FBD0     		beq	.L26
 451              	.L25:
 452              	.LBE3:
 197:../src/os/rt-thread/src/ipc.c **** 
 198:../src/os/rt-thread/src/ipc.c **** 	/* init object */
 199:../src/os/rt-thread/src/ipc.c **** 	rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
 453              		.loc 2 199 0 is_stmt 1
 454 01d8 FB68     		ldr	r3, [r7, #12]
 455 01da 1846     		mov	r0, r3
 456 01dc 4FF00101 		mov	r1, #1
 457 01e0 BA68     		ldr	r2, [r7, #8]
 458 01e2 FFF7FEFF 		bl	rt_object_init
 200:../src/os/rt-thread/src/ipc.c **** 
 201:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 202:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(sem->parent));
 459              		.loc 2 202 0
 460 01e6 FB68     		ldr	r3, [r7, #12]
 461 01e8 1846     		mov	r0, r3
 462 01ea FFF743FF 		bl	rt_ipc_object_init
 203:../src/os/rt-thread/src/ipc.c **** 
 204:../src/os/rt-thread/src/ipc.c **** 	/* set init value */
 205:../src/os/rt-thread/src/ipc.c **** 	sem->value = value;
 463              		.loc 2 205 0
 464 01ee 7B68     		ldr	r3, [r7, #4]
 465 01f0 9AB2     		uxth	r2, r3
 466 01f2 FB68     		ldr	r3, [r7, #12]
 467 01f4 1A83     		strh	r2, [r3, #24]	@ movhi
 206:../src/os/rt-thread/src/ipc.c **** 
 207:../src/os/rt-thread/src/ipc.c **** 	/* set parent */
 208:../src/os/rt-thread/src/ipc.c **** 	sem->parent.parent.flag = flag;
 468              		.loc 2 208 0
 469 01f6 FB68     		ldr	r3, [r7, #12]
 470 01f8 FA78     		ldrb	r2, [r7, #3]
 471 01fa DA71     		strb	r2, [r3, #7]
 209:../src/os/rt-thread/src/ipc.c **** 
 210:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 472              		.loc 2 210 0
 473 01fc 4FF00003 		mov	r3, #0
 211:../src/os/rt-thread/src/ipc.c **** }
 474              		.loc 2 211 0
 475 0200 1846     		mov	r0, r3
 476 0202 07F11807 		add	r7, r7, #24
 477 0206 BD46     		mov	sp, r7
 478 0208 80BD     		pop	{r7, pc}
 479              	.L29:
 480 020a 00BF     		.align	2
 481              	.L28:
 482 020c 00000000 		.word	.LC0
 483 0210 20000000 		.word	.LC1
 484 0214 AC020000 		.word	__FUNCTION__.4878
 485              		.cfi_endproc
 486              	.LFE9:
 488              		.align	2
 489              		.global	rt_sem_detach
 490              		.thumb
 491              		.thumb_func
 493              	rt_sem_detach:
 494              	.LFB10:
 212:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_init);
 213:../src/os/rt-thread/src/ipc.c **** 
 214:../src/os/rt-thread/src/ipc.c **** /**
 215:../src/os/rt-thread/src/ipc.c ****  * This function will detach a semaphore from resource management
 216:../src/os/rt-thread/src/ipc.c ****  *
 217:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 218:../src/os/rt-thread/src/ipc.c ****  *
 219:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 220:../src/os/rt-thread/src/ipc.c ****  *
 221:../src/os/rt-thread/src/ipc.c ****  * @see rt_sem_delete
 222:../src/os/rt-thread/src/ipc.c ****  */
 223:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_detach(rt_sem_t sem)
 224:../src/os/rt-thread/src/ipc.c **** {
 495              		.loc 2 224 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 16
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0218 80B5     		push	{r7, lr}
 500              	.LCFI24:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 7, -8
 503              		.cfi_offset 14, -4
 504 021a 84B0     		sub	sp, sp, #16
 505              	.LCFI25:
 506              		.cfi_def_cfa_offset 24
 507 021c 00AF     		add	r7, sp, #0
 508              	.LCFI26:
 509              		.cfi_def_cfa_register 7
 510 021e 7860     		str	r0, [r7, #4]
 225:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(sem != RT_NULL);
 511              		.loc 2 225 0
 512 0220 7B68     		ldr	r3, [r7, #4]
 513 0222 002B     		cmp	r3, #0
 514 0224 0DD1     		bne	.L31
 515              	.LBB4:
 516              		.loc 2 225 0 is_stmt 0 discriminator 1
 517 0226 4FF00003 		mov	r3, #0
 518 022a FB73     		strb	r3, [r7, #15]
 519 022c 0D48     		ldr	r0, .L34
 520 022e 0E49     		ldr	r1, .L34+4
 521 0230 0E4A     		ldr	r2, .L34+8
 522 0232 4FF0E103 		mov	r3, #225
 523 0236 FFF7FEFF 		bl	rt_kprintf
 524              	.L32:
 525              		.loc 2 225 0 discriminator 2
 526 023a FB7B     		ldrb	r3, [r7, #15]
 527 023c DBB2     		uxtb	r3, r3
 528 023e 002B     		cmp	r3, #0
 529 0240 FBD0     		beq	.L32
 530              	.L31:
 531              	.LBE4:
 226:../src/os/rt-thread/src/ipc.c **** 
 227:../src/os/rt-thread/src/ipc.c **** 	/* wakeup all suspend threads */
 228:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(sem->parent.suspend_thread));
 532              		.loc 2 228 0 is_stmt 1
 533 0242 7B68     		ldr	r3, [r7, #4]
 534 0244 03F11003 		add	r3, r3, #16
 535 0248 1846     		mov	r0, r3
 536 024a FFF787FF 		bl	rt_ipc_list_resume_all
 229:../src/os/rt-thread/src/ipc.c **** 
 230:../src/os/rt-thread/src/ipc.c **** 	/* detach semaphore object */
 231:../src/os/rt-thread/src/ipc.c **** 	rt_object_detach(&(sem->parent.parent));
 537              		.loc 2 231 0
 538 024e 7B68     		ldr	r3, [r7, #4]
 539 0250 1846     		mov	r0, r3
 540 0252 FFF7FEFF 		bl	rt_object_detach
 232:../src/os/rt-thread/src/ipc.c **** 
 233:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 541              		.loc 2 233 0
 542 0256 4FF00003 		mov	r3, #0
 234:../src/os/rt-thread/src/ipc.c **** }
 543              		.loc 2 234 0
 544 025a 1846     		mov	r0, r3
 545 025c 07F11007 		add	r7, r7, #16
 546 0260 BD46     		mov	sp, r7
 547 0262 80BD     		pop	{r7, pc}
 548              	.L35:
 549              		.align	2
 550              	.L34:
 551 0264 00000000 		.word	.LC0
 552 0268 20000000 		.word	.LC1
 553 026c 9C020000 		.word	__FUNCTION__.4886
 554              		.cfi_endproc
 555              	.LFE10:
 557              		.section	.rodata
 558 002f 00       		.align	2
 559              	.LC2:
 560 0030 46756E63 		.ascii	"Function[%s] shall not used in ISR\012\000"
 560      74696F6E 
 560      5B25735D 
 560      20736861 
 560      6C6C206E 
 561              		.align	2
 562              	.LC3:
 563 0054 3000     		.ascii	"0\000"
 564              		.text
 565              		.align	2
 566              		.global	rt_sem_create
 567              		.thumb
 568              		.thumb_func
 570              	rt_sem_create:
 571              	.LFB11:
 235:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_detach);
 236:../src/os/rt-thread/src/ipc.c **** 
 237:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HEAP
 238:../src/os/rt-thread/src/ipc.c **** /**
 239:../src/os/rt-thread/src/ipc.c ****  * This function will create a semaphore from system resource
 240:../src/os/rt-thread/src/ipc.c ****  *
 241:../src/os/rt-thread/src/ipc.c ****  * @param name the name of semaphore
 242:../src/os/rt-thread/src/ipc.c ****  * @param value the init value of semaphore
 243:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of semaphore
 244:../src/os/rt-thread/src/ipc.c ****  *
 245:../src/os/rt-thread/src/ipc.c ****  * @return the created semaphore, RT_NULL on error happen
 246:../src/os/rt-thread/src/ipc.c ****  *
 247:../src/os/rt-thread/src/ipc.c ****  * @see rt_sem_init
 248:../src/os/rt-thread/src/ipc.c ****  */
 249:../src/os/rt-thread/src/ipc.c **** rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
 250:../src/os/rt-thread/src/ipc.c **** {
 572              		.loc 2 250 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 32
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0270 80B5     		push	{r7, lr}
 577              	.LCFI27:
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 0272 88B0     		sub	sp, sp, #32
 582              	.LCFI28:
 583              		.cfi_def_cfa_offset 40
 584 0274 00AF     		add	r7, sp, #0
 585              	.LCFI29:
 586              		.cfi_def_cfa_register 7
 587 0276 F860     		str	r0, [r7, #12]
 588 0278 B960     		str	r1, [r7, #8]
 589 027a 1346     		mov	r3, r2
 590 027c FB71     		strb	r3, [r7, #7]
 591              	.LBB5:
 251:../src/os/rt-thread/src/ipc.c **** 	rt_sem_t sem;
 252:../src/os/rt-thread/src/ipc.c **** 
 253:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 592              		.loc 2 253 0
 593 027e FFF7FEFF 		bl	rt_hw_interrupt_disable
 594 0282 F861     		str	r0, [r7, #28]
 595 0284 FFF7FEFF 		bl	rt_interrupt_get_nest
 596 0288 0346     		mov	r3, r0
 597 028a 002B     		cmp	r3, #0
 598 028c 11D0     		beq	.L37
 599              		.loc 2 253 0 is_stmt 0 discriminator 1
 600 028e 1848     		ldr	r0, .L41
 601 0290 1849     		ldr	r1, .L41+4
 602 0292 FFF7FEFF 		bl	rt_kprintf
 603              	.LBB6:
 604 0296 4FF00003 		mov	r3, #0
 605 029a FB75     		strb	r3, [r7, #23]
 606 029c 1648     		ldr	r0, .L41+8
 607 029e 1749     		ldr	r1, .L41+12
 608 02a0 144A     		ldr	r2, .L41+4
 609 02a2 4FF0FD03 		mov	r3, #253
 610 02a6 FFF7FEFF 		bl	rt_kprintf
 611              	.L38:
 612              		.loc 2 253 0 discriminator 4
 613 02aa FB7D     		ldrb	r3, [r7, #23]
 614 02ac DBB2     		uxtb	r3, r3
 615 02ae 002B     		cmp	r3, #0
 616 02b0 FBD0     		beq	.L38
 617              	.L37:
 618              	.LBE6:
 619              		.loc 2 253 0 discriminator 2
 620 02b2 F869     		ldr	r0, [r7, #28]
 621 02b4 FFF7FEFF 		bl	rt_hw_interrupt_enable
 622              	.LBE5:
 254:../src/os/rt-thread/src/ipc.c **** 
 255:../src/os/rt-thread/src/ipc.c **** 	/* allocate object */
 256:../src/os/rt-thread/src/ipc.c **** 	sem = (rt_sem_t)rt_object_allocate(RT_Object_Class_Semaphore, name);
 623              		.loc 2 256 0 is_stmt 1 discriminator 2
 624 02b8 4FF00100 		mov	r0, #1
 625 02bc F968     		ldr	r1, [r7, #12]
 626 02be FFF7FEFF 		bl	rt_object_allocate
 627 02c2 B861     		str	r0, [r7, #24]
 257:../src/os/rt-thread/src/ipc.c **** 	if (sem == RT_NULL)
 628              		.loc 2 257 0 discriminator 2
 629 02c4 BB69     		ldr	r3, [r7, #24]
 630 02c6 002B     		cmp	r3, #0
 631 02c8 01D1     		bne	.L39
 258:../src/os/rt-thread/src/ipc.c **** 		return sem;
 632              		.loc 2 258 0
 633 02ca BB69     		ldr	r3, [r7, #24]
 634 02cc 0BE0     		b	.L40
 635              	.L39:
 259:../src/os/rt-thread/src/ipc.c **** 
 260:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 261:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(sem->parent));
 636              		.loc 2 261 0
 637 02ce BB69     		ldr	r3, [r7, #24]
 638 02d0 1846     		mov	r0, r3
 639 02d2 FFF7CFFE 		bl	rt_ipc_object_init
 262:../src/os/rt-thread/src/ipc.c **** 
 263:../src/os/rt-thread/src/ipc.c **** 	/* set init value */
 264:../src/os/rt-thread/src/ipc.c **** 	sem->value = value;
 640              		.loc 2 264 0
 641 02d6 BB68     		ldr	r3, [r7, #8]
 642 02d8 9AB2     		uxth	r2, r3
 643 02da BB69     		ldr	r3, [r7, #24]
 644 02dc 1A83     		strh	r2, [r3, #24]	@ movhi
 265:../src/os/rt-thread/src/ipc.c **** 
 266:../src/os/rt-thread/src/ipc.c **** 	/* set parent */
 267:../src/os/rt-thread/src/ipc.c **** 	sem->parent.parent.flag = flag;
 645              		.loc 2 267 0
 646 02de BB69     		ldr	r3, [r7, #24]
 647 02e0 FA79     		ldrb	r2, [r7, #7]
 648 02e2 DA71     		strb	r2, [r3, #7]
 268:../src/os/rt-thread/src/ipc.c **** 
 269:../src/os/rt-thread/src/ipc.c **** 	return sem;
 649              		.loc 2 269 0
 650 02e4 BB69     		ldr	r3, [r7, #24]
 651              	.L40:
 270:../src/os/rt-thread/src/ipc.c **** }
 652              		.loc 2 270 0
 653 02e6 1846     		mov	r0, r3
 654 02e8 07F12007 		add	r7, r7, #32
 655 02ec BD46     		mov	sp, r7
 656 02ee 80BD     		pop	{r7, pc}
 657              	.L42:
 658              		.align	2
 659              	.L41:
 660 02f0 30000000 		.word	.LC2
 661 02f4 8C020000 		.word	__FUNCTION__.4897
 662 02f8 00000000 		.word	.LC0
 663 02fc 54000000 		.word	.LC3
 664              		.cfi_endproc
 665              	.LFE11:
 667              		.align	2
 668              		.global	rt_sem_delete
 669              		.thumb
 670              		.thumb_func
 672              	rt_sem_delete:
 673              	.LFB12:
 271:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_create);
 272:../src/os/rt-thread/src/ipc.c **** 
 273:../src/os/rt-thread/src/ipc.c **** /**
 274:../src/os/rt-thread/src/ipc.c ****  * This function will delete a semaphore object and release the memory
 275:../src/os/rt-thread/src/ipc.c ****  *
 276:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 277:../src/os/rt-thread/src/ipc.c ****  *
 278:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 279:../src/os/rt-thread/src/ipc.c ****  *
 280:../src/os/rt-thread/src/ipc.c ****  * @see rt_sem_detach
 281:../src/os/rt-thread/src/ipc.c ****  */
 282:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_delete(rt_sem_t sem)
 283:../src/os/rt-thread/src/ipc.c **** {
 674              		.loc 2 283 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678 0300 80B5     		push	{r7, lr}
 679              	.LCFI30:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0302 84B0     		sub	sp, sp, #16
 684              	.LCFI31:
 685              		.cfi_def_cfa_offset 24
 686 0304 00AF     		add	r7, sp, #0
 687              	.LCFI32:
 688              		.cfi_def_cfa_register 7
 689 0306 7860     		str	r0, [r7, #4]
 690              	.LBB7:
 284:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 691              		.loc 2 284 0
 692 0308 FFF7FEFF 		bl	rt_hw_interrupt_disable
 693 030c F860     		str	r0, [r7, #12]
 694 030e FFF7FEFF 		bl	rt_interrupt_get_nest
 695 0312 0346     		mov	r3, r0
 696 0314 002B     		cmp	r3, #0
 697 0316 11D0     		beq	.L44
 698              		.loc 2 284 0 is_stmt 0 discriminator 1
 699 0318 1B48     		ldr	r0, .L49
 700 031a 1C49     		ldr	r1, .L49+4
 701 031c FFF7FEFF 		bl	rt_kprintf
 702              	.LBB8:
 703 0320 4FF00003 		mov	r3, #0
 704 0324 FB72     		strb	r3, [r7, #11]
 705 0326 1A48     		ldr	r0, .L49+8
 706 0328 1A49     		ldr	r1, .L49+12
 707 032a 184A     		ldr	r2, .L49+4
 708 032c 4FF48E73 		mov	r3, #284
 709 0330 FFF7FEFF 		bl	rt_kprintf
 710              	.L45:
 711              		.loc 2 284 0 discriminator 4
 712 0334 FB7A     		ldrb	r3, [r7, #11]
 713 0336 DBB2     		uxtb	r3, r3
 714 0338 002B     		cmp	r3, #0
 715 033a FBD0     		beq	.L45
 716              	.L44:
 717              	.LBE8:
 718              		.loc 2 284 0 discriminator 2
 719 033c F868     		ldr	r0, [r7, #12]
 720 033e FFF7FEFF 		bl	rt_hw_interrupt_enable
 721              	.LBE7:
 285:../src/os/rt-thread/src/ipc.c **** 
 286:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(sem != RT_NULL);
 722              		.loc 2 286 0 is_stmt 1 discriminator 2
 723 0342 7B68     		ldr	r3, [r7, #4]
 724 0344 002B     		cmp	r3, #0
 725 0346 0DD1     		bne	.L46
 726              	.LBB9:
 727              		.loc 2 286 0 is_stmt 0 discriminator 1
 728 0348 4FF00003 		mov	r3, #0
 729 034c BB72     		strb	r3, [r7, #10]
 730 034e 1048     		ldr	r0, .L49+8
 731 0350 1149     		ldr	r1, .L49+16
 732 0352 0E4A     		ldr	r2, .L49+4
 733 0354 4FF48F73 		mov	r3, #286
 734 0358 FFF7FEFF 		bl	rt_kprintf
 735              	.L47:
 736              		.loc 2 286 0 discriminator 2
 737 035c BB7A     		ldrb	r3, [r7, #10]
 738 035e DBB2     		uxtb	r3, r3
 739 0360 002B     		cmp	r3, #0
 740 0362 FBD0     		beq	.L47
 741              	.L46:
 742              	.LBE9:
 287:../src/os/rt-thread/src/ipc.c **** 
 288:../src/os/rt-thread/src/ipc.c **** 	/* wakeup all suspend threads */
 289:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(sem->parent.suspend_thread));
 743              		.loc 2 289 0 is_stmt 1
 744 0364 7B68     		ldr	r3, [r7, #4]
 745 0366 03F11003 		add	r3, r3, #16
 746 036a 1846     		mov	r0, r3
 747 036c FFF7F6FE 		bl	rt_ipc_list_resume_all
 290:../src/os/rt-thread/src/ipc.c **** 
 291:../src/os/rt-thread/src/ipc.c **** 	/* delete semaphore object */
 292:../src/os/rt-thread/src/ipc.c **** 	rt_object_delete(&(sem->parent.parent));
 748              		.loc 2 292 0
 749 0370 7B68     		ldr	r3, [r7, #4]
 750 0372 1846     		mov	r0, r3
 751 0374 FFF7FEFF 		bl	rt_object_delete
 293:../src/os/rt-thread/src/ipc.c **** 
 294:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 752              		.loc 2 294 0
 753 0378 4FF00003 		mov	r3, #0
 295:../src/os/rt-thread/src/ipc.c **** }
 754              		.loc 2 295 0
 755 037c 1846     		mov	r0, r3
 756 037e 07F11007 		add	r7, r7, #16
 757 0382 BD46     		mov	sp, r7
 758 0384 80BD     		pop	{r7, pc}
 759              	.L50:
 760 0386 00BF     		.align	2
 761              	.L49:
 762 0388 30000000 		.word	.LC2
 763 038c 7C020000 		.word	__FUNCTION__.4906
 764 0390 00000000 		.word	.LC0
 765 0394 54000000 		.word	.LC3
 766 0398 20000000 		.word	.LC1
 767              		.cfi_endproc
 768              	.LFE12:
 770              		.align	2
 771              		.global	rt_sem_take
 772              		.thumb
 773              		.thumb_func
 775              	rt_sem_take:
 776              	.LFB13:
 296:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_delete);
 297:../src/os/rt-thread/src/ipc.c **** #endif
 298:../src/os/rt-thread/src/ipc.c **** 
 299:../src/os/rt-thread/src/ipc.c **** /**
 300:../src/os/rt-thread/src/ipc.c ****  * This function will take a semaphore, if the semaphore is unavailable, the
 301:../src/os/rt-thread/src/ipc.c ****  * thread shall wait for a specified time.
 302:../src/os/rt-thread/src/ipc.c ****  *
 303:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 304:../src/os/rt-thread/src/ipc.c ****  * @param time the waiting time
 305:../src/os/rt-thread/src/ipc.c ****  *
 306:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 307:../src/os/rt-thread/src/ipc.c ****  */
 308:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
 309:../src/os/rt-thread/src/ipc.c **** {
 777              		.loc 2 309 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 24
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781 039c 90B5     		push	{r4, r7, lr}
 782              	.LCFI33:
 783              		.cfi_def_cfa_offset 12
 784              		.cfi_offset 4, -12
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 039e 87B0     		sub	sp, sp, #28
 788              	.LCFI34:
 789              		.cfi_def_cfa_offset 40
 790 03a0 00AF     		add	r7, sp, #0
 791              	.LCFI35:
 792              		.cfi_def_cfa_register 7
 793 03a2 7860     		str	r0, [r7, #4]
 794 03a4 3960     		str	r1, [r7, #0]
 310:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
 311:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 312:../src/os/rt-thread/src/ipc.c **** 
 313:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(sem != RT_NULL);
 795              		.loc 2 313 0
 796 03a6 7B68     		ldr	r3, [r7, #4]
 797 03a8 002B     		cmp	r3, #0
 798 03aa 0DD1     		bne	.L52
 799              	.LBB10:
 800              		.loc 2 313 0 is_stmt 0 discriminator 1
 801 03ac 4FF00003 		mov	r3, #0
 802 03b0 FB73     		strb	r3, [r7, #15]
 803 03b2 4648     		ldr	r0, .L63
 804 03b4 4649     		ldr	r1, .L63+4
 805 03b6 474A     		ldr	r2, .L63+8
 806 03b8 40F23913 		movw	r3, #313
 807 03bc FFF7FEFF 		bl	rt_kprintf
 808              	.L53:
 809              		.loc 2 313 0 discriminator 2
 810 03c0 FB7B     		ldrb	r3, [r7, #15]
 811 03c2 DBB2     		uxtb	r3, r3
 812 03c4 002B     		cmp	r3, #0
 813 03c6 FBD0     		beq	.L53
 814              	.L52:
 815              	.LBE10:
 314:../src/os/rt-thread/src/ipc.c **** 
 315:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
 816              		.loc 2 315 0 is_stmt 1
 817 03c8 434B     		ldr	r3, .L63+12
 818 03ca 1B68     		ldr	r3, [r3, #0]
 819 03cc 002B     		cmp	r3, #0
 820 03ce 04D0     		beq	.L54
 821              		.loc 2 315 0 is_stmt 0 discriminator 1
 822 03d0 414B     		ldr	r3, .L63+12
 823 03d2 1B68     		ldr	r3, [r3, #0]
 824 03d4 7A68     		ldr	r2, [r7, #4]
 825 03d6 1046     		mov	r0, r2
 826 03d8 9847     		blx	r3
 827              	.L54:
 316:../src/os/rt-thread/src/ipc.c **** 
 317:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
 318:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 828              		.loc 2 318 0 is_stmt 1
 829 03da FFF7FEFF 		bl	rt_hw_interrupt_disable
 830 03de 0446     		mov	r4, r0
 319:../src/os/rt-thread/src/ipc.c **** 
 320:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_LOG(RT_DEBUG_IPC,
 321:../src/os/rt-thread/src/ipc.c **** 		("thread %s take sem:%s, which value is: %d\n", rt_thread_self()->name,
 322:../src/os/rt-thread/src/ipc.c **** 		((struct rt_object *)sem)->name, sem->value));
 323:../src/os/rt-thread/src/ipc.c **** 
 324:../src/os/rt-thread/src/ipc.c **** 	if (sem->value > 0)
 831              		.loc 2 324 0
 832 03e0 7B68     		ldr	r3, [r7, #4]
 833 03e2 1B8B     		ldrh	r3, [r3, #24]
 834 03e4 002B     		cmp	r3, #0
 835 03e6 0AD0     		beq	.L55
 325:../src/os/rt-thread/src/ipc.c **** 	{
 326:../src/os/rt-thread/src/ipc.c **** 		/* semaphore is available */
 327:../src/os/rt-thread/src/ipc.c **** 		sem->value --;
 836              		.loc 2 327 0
 837 03e8 7B68     		ldr	r3, [r7, #4]
 838 03ea 1B8B     		ldrh	r3, [r3, #24]
 839 03ec 03F1FF33 		add	r3, r3, #-1
 840 03f0 9AB2     		uxth	r2, r3
 841 03f2 7B68     		ldr	r3, [r7, #4]
 842 03f4 1A83     		strh	r2, [r3, #24]	@ movhi
 328:../src/os/rt-thread/src/ipc.c **** 
 329:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
 330:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 843              		.loc 2 330 0
 844 03f6 2046     		mov	r0, r4
 845 03f8 FFF7FEFF 		bl	rt_hw_interrupt_enable
 846 03fc 55E0     		b	.L56
 847              	.L55:
 331:../src/os/rt-thread/src/ipc.c **** 	}
 332:../src/os/rt-thread/src/ipc.c **** 	else
 333:../src/os/rt-thread/src/ipc.c **** 	{
 334:../src/os/rt-thread/src/ipc.c **** 		/* no waiting, return with timeout */
 335:../src/os/rt-thread/src/ipc.c **** 		if (time == 0)
 848              		.loc 2 335 0
 849 03fe 3B68     		ldr	r3, [r7, #0]
 850 0400 002B     		cmp	r3, #0
 851 0402 05D1     		bne	.L57
 336:../src/os/rt-thread/src/ipc.c **** 		{
 337:../src/os/rt-thread/src/ipc.c **** 			rt_hw_interrupt_enable(temp);
 852              		.loc 2 337 0
 853 0404 2046     		mov	r0, r4
 854 0406 FFF7FEFF 		bl	rt_hw_interrupt_enable
 338:../src/os/rt-thread/src/ipc.c **** 
 339:../src/os/rt-thread/src/ipc.c **** 			return -RT_ETIMEOUT;
 855              		.loc 2 339 0
 856 040a 6FF00103 		mvn	r3, #1
 857 040e 57E0     		b	.L58
 858              	.L57:
 859              	.LBB11:
 340:../src/os/rt-thread/src/ipc.c **** 		}
 341:../src/os/rt-thread/src/ipc.c **** 		else
 342:../src/os/rt-thread/src/ipc.c **** 		{
 343:../src/os/rt-thread/src/ipc.c **** 			/* current context checking */
 344:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_NOT_IN_INTERRUPT;
 860              		.loc 2 344 0
 861 0410 FFF7FEFF 		bl	rt_hw_interrupt_disable
 862 0414 7861     		str	r0, [r7, #20]
 863 0416 FFF7FEFF 		bl	rt_interrupt_get_nest
 864 041a 0346     		mov	r3, r0
 865 041c 002B     		cmp	r3, #0
 866 041e 11D0     		beq	.L59
 867              		.loc 2 344 0 is_stmt 0 discriminator 1
 868 0420 2E48     		ldr	r0, .L63+16
 869 0422 2C49     		ldr	r1, .L63+8
 870 0424 FFF7FEFF 		bl	rt_kprintf
 871              	.LBB12:
 872 0428 4FF00003 		mov	r3, #0
 873 042c BB73     		strb	r3, [r7, #14]
 874 042e 2748     		ldr	r0, .L63
 875 0430 2B49     		ldr	r1, .L63+20
 876 0432 284A     		ldr	r2, .L63+8
 877 0434 4FF4AC73 		mov	r3, #344
 878 0438 FFF7FEFF 		bl	rt_kprintf
 879              	.L60:
 880              		.loc 2 344 0 discriminator 4
 881 043c BB7B     		ldrb	r3, [r7, #14]
 882 043e DBB2     		uxtb	r3, r3
 883 0440 002B     		cmp	r3, #0
 884 0442 FBD0     		beq	.L60
 885              	.L59:
 886              	.LBE12:
 887              		.loc 2 344 0 discriminator 2
 888 0444 7869     		ldr	r0, [r7, #20]
 889 0446 FFF7FEFF 		bl	rt_hw_interrupt_enable
 890              	.LBE11:
 345:../src/os/rt-thread/src/ipc.c **** 
 346:../src/os/rt-thread/src/ipc.c **** 			/* semaphore is unavailable, push to suspend list */
 347:../src/os/rt-thread/src/ipc.c **** 			/* get current thread */
 348:../src/os/rt-thread/src/ipc.c **** 			thread = rt_thread_self();
 891              		.loc 2 348 0 is_stmt 1 discriminator 2
 892 044a FFF7FEFF 		bl	rt_thread_self
 893 044e 3861     		str	r0, [r7, #16]
 349:../src/os/rt-thread/src/ipc.c **** 
 350:../src/os/rt-thread/src/ipc.c **** 			/* reset thread error number */
 351:../src/os/rt-thread/src/ipc.c **** 			thread->error = RT_EOK;
 894              		.loc 2 351 0 discriminator 2
 895 0450 3B69     		ldr	r3, [r7, #16]
 896 0452 4FF00002 		mov	r2, #0
 897 0456 DA62     		str	r2, [r3, #44]
 352:../src/os/rt-thread/src/ipc.c **** 
 353:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n", thread->name));
 354:../src/os/rt-thread/src/ipc.c **** 
 355:../src/os/rt-thread/src/ipc.c **** 			/* suspend thread */
 356:../src/os/rt-thread/src/ipc.c **** 			rt_ipc_list_suspend(&(sem->parent.suspend_thread),
 898              		.loc 2 356 0 discriminator 2
 899 0458 7B68     		ldr	r3, [r7, #4]
 900 045a 03F11002 		add	r2, r3, #16
 357:../src/os/rt-thread/src/ipc.c **** 				thread, sem->parent.parent.flag);
 901              		.loc 2 357 0 discriminator 2
 902 045e 7B68     		ldr	r3, [r7, #4]
 356:../src/os/rt-thread/src/ipc.c **** 			rt_ipc_list_suspend(&(sem->parent.suspend_thread),
 903              		.loc 2 356 0 discriminator 2
 904 0460 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 905 0462 1046     		mov	r0, r2
 906 0464 3969     		ldr	r1, [r7, #16]
 907 0466 1A46     		mov	r2, r3
 908 0468 FFF716FE 		bl	rt_ipc_list_suspend
 358:../src/os/rt-thread/src/ipc.c **** 
 359:../src/os/rt-thread/src/ipc.c **** 			/* has waiting time, start thread timer */
 360:../src/os/rt-thread/src/ipc.c **** 			if (time > 0)
 909              		.loc 2 360 0 discriminator 2
 910 046c 3B68     		ldr	r3, [r7, #0]
 911 046e 002B     		cmp	r3, #0
 912 0470 0FDD     		ble	.L61
 361:../src/os/rt-thread/src/ipc.c **** 			{
 362:../src/os/rt-thread/src/ipc.c **** 				RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n", thread->name));
 363:../src/os/rt-thread/src/ipc.c **** 
 364:../src/os/rt-thread/src/ipc.c **** 				/* reset the timeout of thread timer and start it */
 365:../src/os/rt-thread/src/ipc.c **** 				rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &time);
 913              		.loc 2 365 0
 914 0472 3B69     		ldr	r3, [r7, #16]
 915 0474 03F14802 		add	r2, r3, #72
 916 0478 3B46     		mov	r3, r7
 917 047a 1046     		mov	r0, r2
 918 047c 4FF00001 		mov	r1, #0
 919 0480 1A46     		mov	r2, r3
 920 0482 FFF7FEFF 		bl	rt_timer_control
 366:../src/os/rt-thread/src/ipc.c **** 				rt_timer_start(&(thread->thread_timer));
 921              		.loc 2 366 0
 922 0486 3B69     		ldr	r3, [r7, #16]
 923 0488 03F14803 		add	r3, r3, #72
 924 048c 1846     		mov	r0, r3
 925 048e FFF7FEFF 		bl	rt_timer_start
 926              	.L61:
 367:../src/os/rt-thread/src/ipc.c **** 			}
 368:../src/os/rt-thread/src/ipc.c **** 
 369:../src/os/rt-thread/src/ipc.c **** 			/* enable interrupt */
 370:../src/os/rt-thread/src/ipc.c **** 			rt_hw_interrupt_enable(temp);
 927              		.loc 2 370 0
 928 0492 2046     		mov	r0, r4
 929 0494 FFF7FEFF 		bl	rt_hw_interrupt_enable
 371:../src/os/rt-thread/src/ipc.c **** 
 372:../src/os/rt-thread/src/ipc.c **** 			/* do schedule */
 373:../src/os/rt-thread/src/ipc.c **** 			rt_schedule();
 930              		.loc 2 373 0
 931 0498 FFF7FEFF 		bl	rt_schedule
 374:../src/os/rt-thread/src/ipc.c **** 
 375:../src/os/rt-thread/src/ipc.c **** 			if (thread->error != RT_EOK)
 932              		.loc 2 375 0
 933 049c 3B69     		ldr	r3, [r7, #16]
 934 049e DB6A     		ldr	r3, [r3, #44]
 935 04a0 002B     		cmp	r3, #0
 936 04a2 02D0     		beq	.L56
 376:../src/os/rt-thread/src/ipc.c **** 			{
 377:../src/os/rt-thread/src/ipc.c **** 				return thread->error;
 937              		.loc 2 377 0
 938 04a4 3B69     		ldr	r3, [r7, #16]
 939 04a6 DB6A     		ldr	r3, [r3, #44]
 940 04a8 0AE0     		b	.L58
 941              	.L56:
 378:../src/os/rt-thread/src/ipc.c **** 			}
 379:../src/os/rt-thread/src/ipc.c **** 		}
 380:../src/os/rt-thread/src/ipc.c **** 	}
 381:../src/os/rt-thread/src/ipc.c **** 
 382:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
 942              		.loc 2 382 0
 943 04aa 0E4B     		ldr	r3, .L63+24
 944 04ac 1B68     		ldr	r3, [r3, #0]
 945 04ae 002B     		cmp	r3, #0
 946 04b0 04D0     		beq	.L62
 947              		.loc 2 382 0 is_stmt 0 discriminator 1
 948 04b2 0C4B     		ldr	r3, .L63+24
 949 04b4 1B68     		ldr	r3, [r3, #0]
 950 04b6 7A68     		ldr	r2, [r7, #4]
 951 04b8 1046     		mov	r0, r2
 952 04ba 9847     		blx	r3
 953              	.L62:
 383:../src/os/rt-thread/src/ipc.c **** 
 384:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 954              		.loc 2 384 0 is_stmt 1
 955 04bc 4FF00003 		mov	r3, #0
 956              	.L58:
 385:../src/os/rt-thread/src/ipc.c **** }
 957              		.loc 2 385 0
 958 04c0 1846     		mov	r0, r3
 959 04c2 07F11C07 		add	r7, r7, #28
 960 04c6 BD46     		mov	sp, r7
 961 04c8 90BD     		pop	{r4, r7, pc}
 962              	.L64:
 963 04ca 00BF     		.align	2
 964              	.L63:
 965 04cc 00000000 		.word	.LC0
 966 04d0 20000000 		.word	.LC1
 967 04d4 70020000 		.word	__FUNCTION__.4922
 968 04d8 00000000 		.word	rt_object_trytake_hook
 969 04dc 30000000 		.word	.LC2
 970 04e0 54000000 		.word	.LC3
 971 04e4 00000000 		.word	rt_object_take_hook
 972              		.cfi_endproc
 973              	.LFE13:
 975              		.align	2
 976              		.global	rt_sem_trytake
 977              		.thumb
 978              		.thumb_func
 980              	rt_sem_trytake:
 981              	.LFB14:
 386:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_take);
 387:../src/os/rt-thread/src/ipc.c **** 
 388:../src/os/rt-thread/src/ipc.c **** /**
 389:../src/os/rt-thread/src/ipc.c ****  * This function will try to take a semaphore and immediately return
 390:../src/os/rt-thread/src/ipc.c ****  *
 391:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 392:../src/os/rt-thread/src/ipc.c ****  *
 393:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 394:../src/os/rt-thread/src/ipc.c ****  */
 395:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_trytake(rt_sem_t sem)
 396:../src/os/rt-thread/src/ipc.c **** {
 982              		.loc 2 396 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 8
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986 04e8 80B5     		push	{r7, lr}
 987              	.LCFI36:
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 04ea 82B0     		sub	sp, sp, #8
 992              	.LCFI37:
 993              		.cfi_def_cfa_offset 16
 994 04ec 00AF     		add	r7, sp, #0
 995              	.LCFI38:
 996              		.cfi_def_cfa_register 7
 997 04ee 7860     		str	r0, [r7, #4]
 397:../src/os/rt-thread/src/ipc.c **** 	return rt_sem_take(sem, 0);
 998              		.loc 2 397 0
 999 04f0 7868     		ldr	r0, [r7, #4]
 1000 04f2 4FF00001 		mov	r1, #0
 1001 04f6 FFF7FEFF 		bl	rt_sem_take
 1002 04fa 0346     		mov	r3, r0
 398:../src/os/rt-thread/src/ipc.c **** }
 1003              		.loc 2 398 0
 1004 04fc 1846     		mov	r0, r3
 1005 04fe 07F10807 		add	r7, r7, #8
 1006 0502 BD46     		mov	sp, r7
 1007 0504 80BD     		pop	{r7, pc}
 1008              		.cfi_endproc
 1009              	.LFE14:
 1011 0506 00BF     		.align	2
 1012              		.global	rt_sem_release
 1013              		.thumb
 1014              		.thumb_func
 1016              	rt_sem_release:
 1017              	.LFB15:
 399:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_trytake);
 400:../src/os/rt-thread/src/ipc.c **** 
 401:../src/os/rt-thread/src/ipc.c **** /**
 402:../src/os/rt-thread/src/ipc.c ****  * This function will release a semaphore, if there are threads suspended on
 403:../src/os/rt-thread/src/ipc.c ****  * semaphore, it will be waked up.
 404:../src/os/rt-thread/src/ipc.c ****  *
 405:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 406:../src/os/rt-thread/src/ipc.c ****  *
 407:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 408:../src/os/rt-thread/src/ipc.c ****  */
 409:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_release(rt_sem_t sem)
 410:../src/os/rt-thread/src/ipc.c **** {
 1018              		.loc 2 410 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 8
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022 0508 B0B5     		push	{r4, r5, r7, lr}
 1023              	.LCFI39:
 1024              		.cfi_def_cfa_offset 16
 1025              		.cfi_offset 4, -16
 1026              		.cfi_offset 5, -12
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029 050a 82B0     		sub	sp, sp, #8
 1030              	.LCFI40:
 1031              		.cfi_def_cfa_offset 24
 1032 050c 00AF     		add	r7, sp, #0
 1033              	.LCFI41:
 1034              		.cfi_def_cfa_register 7
 1035 050e 7860     		str	r0, [r7, #4]
 411:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
 412:../src/os/rt-thread/src/ipc.c **** 	register rt_bool_t need_schedule;
 413:../src/os/rt-thread/src/ipc.c **** 
 414:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
 1036              		.loc 2 414 0
 1037 0510 1A4B     		ldr	r3, .L73
 1038 0512 1B68     		ldr	r3, [r3, #0]
 1039 0514 002B     		cmp	r3, #0
 1040 0516 04D0     		beq	.L68
 1041              		.loc 2 414 0 is_stmt 0 discriminator 1
 1042 0518 184B     		ldr	r3, .L73
 1043 051a 1B68     		ldr	r3, [r3, #0]
 1044 051c 7A68     		ldr	r2, [r7, #4]
 1045 051e 1046     		mov	r0, r2
 1046 0520 9847     		blx	r3
 1047              	.L68:
 415:../src/os/rt-thread/src/ipc.c **** 
 416:../src/os/rt-thread/src/ipc.c **** 	need_schedule = RT_FALSE;
 1048              		.loc 2 416 0 is_stmt 1
 1049 0522 4FF00004 		mov	r4, #0
 417:../src/os/rt-thread/src/ipc.c **** 
 418:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
 419:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 1050              		.loc 2 419 0
 1051 0526 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1052 052a 0546     		mov	r5, r0
 420:../src/os/rt-thread/src/ipc.c **** 
 421:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_LOG(RT_DEBUG_IPC,
 422:../src/os/rt-thread/src/ipc.c **** 		("thread %s releases sem:%s, which value is: %d\n", rt_thread_self()->name,
 423:../src/os/rt-thread/src/ipc.c **** 		((struct rt_object *)sem)->name, sem->value));
 424:../src/os/rt-thread/src/ipc.c **** 
 425:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&sem->parent.suspend_thread))
 1053              		.loc 2 425 0
 1054 052c 7B68     		ldr	r3, [r7, #4]
 1055 052e 03F11003 		add	r3, r3, #16
 1056 0532 1846     		mov	r0, r3
 1057 0534 FFF78CFD 		bl	rt_list_isempty
 1058 0538 0346     		mov	r3, r0
 1059 053a 002B     		cmp	r3, #0
 1060 053c 08D1     		bne	.L69
 426:../src/os/rt-thread/src/ipc.c **** 	{
 427:../src/os/rt-thread/src/ipc.c **** 		/* resume the suspended thread */
 428:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume(&(sem->parent.suspend_thread));
 1061              		.loc 2 428 0
 1062 053e 7B68     		ldr	r3, [r7, #4]
 1063 0540 03F11003 		add	r3, r3, #16
 1064 0544 1846     		mov	r0, r3
 1065 0546 FFF7F5FD 		bl	rt_ipc_list_resume
 429:../src/os/rt-thread/src/ipc.c **** 		need_schedule = RT_TRUE;
 1066              		.loc 2 429 0
 1067 054a 4FF00104 		mov	r4, #1
 1068 054e 06E0     		b	.L70
 1069              	.L69:
 430:../src/os/rt-thread/src/ipc.c **** 	}
 431:../src/os/rt-thread/src/ipc.c **** 	else
 432:../src/os/rt-thread/src/ipc.c **** 		sem->value ++; /* increase value */
 1070              		.loc 2 432 0
 1071 0550 7B68     		ldr	r3, [r7, #4]
 1072 0552 1B8B     		ldrh	r3, [r3, #24]
 1073 0554 03F10103 		add	r3, r3, #1
 1074 0558 9AB2     		uxth	r2, r3
 1075 055a 7B68     		ldr	r3, [r7, #4]
 1076 055c 1A83     		strh	r2, [r3, #24]	@ movhi
 1077              	.L70:
 433:../src/os/rt-thread/src/ipc.c **** 
 434:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
 435:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 1078              		.loc 2 435 0
 1079 055e 2846     		mov	r0, r5
 1080 0560 FFF7FEFF 		bl	rt_hw_interrupt_enable
 436:../src/os/rt-thread/src/ipc.c **** 
 437:../src/os/rt-thread/src/ipc.c **** 	/* resume a thread, re-schedule */
 438:../src/os/rt-thread/src/ipc.c **** 	if (need_schedule == RT_TRUE)
 1081              		.loc 2 438 0
 1082 0564 012C     		cmp	r4, #1
 1083 0566 01D1     		bne	.L71
 439:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 1084              		.loc 2 439 0
 1085 0568 FFF7FEFF 		bl	rt_schedule
 1086              	.L71:
 440:../src/os/rt-thread/src/ipc.c **** 
 441:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 1087              		.loc 2 441 0
 1088 056c 4FF00003 		mov	r3, #0
 442:../src/os/rt-thread/src/ipc.c **** }
 1089              		.loc 2 442 0
 1090 0570 1846     		mov	r0, r3
 1091 0572 07F10807 		add	r7, r7, #8
 1092 0576 BD46     		mov	sp, r7
 1093 0578 B0BD     		pop	{r4, r5, r7, pc}
 1094              	.L74:
 1095 057a 00BF     		.align	2
 1096              	.L73:
 1097 057c 00000000 		.word	rt_object_put_hook
 1098              		.cfi_endproc
 1099              	.LFE15:
 1101              		.align	2
 1102              		.global	rt_sem_control
 1103              		.thumb
 1104              		.thumb_func
 1106              	rt_sem_control:
 1107              	.LFB16:
 443:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_release);
 444:../src/os/rt-thread/src/ipc.c **** 
 445:../src/os/rt-thread/src/ipc.c **** /**
 446:../src/os/rt-thread/src/ipc.c ****  * This function can get or set some extra attributions of a semaphore object.
 447:../src/os/rt-thread/src/ipc.c ****  *
 448:../src/os/rt-thread/src/ipc.c ****  * @param sem the semaphore object
 449:../src/os/rt-thread/src/ipc.c ****  * @param cmd the execution command
 450:../src/os/rt-thread/src/ipc.c ****  * @param arg the execution argument
 451:../src/os/rt-thread/src/ipc.c ****  *
 452:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 453:../src/os/rt-thread/src/ipc.c ****  */
 454:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_sem_control(rt_sem_t sem, rt_uint8_t cmd, void *arg)
 455:../src/os/rt-thread/src/ipc.c **** {
 1108              		.loc 2 455 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 32
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112 0580 80B5     		push	{r7, lr}
 1113              	.LCFI42:
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 7, -8
 1116              		.cfi_offset 14, -4
 1117 0582 88B0     		sub	sp, sp, #32
 1118              	.LCFI43:
 1119              		.cfi_def_cfa_offset 40
 1120 0584 00AF     		add	r7, sp, #0
 1121              	.LCFI44:
 1122              		.cfi_def_cfa_register 7
 1123 0586 F860     		str	r0, [r7, #12]
 1124 0588 0B46     		mov	r3, r1
 1125 058a 7A60     		str	r2, [r7, #4]
 1126 058c FB72     		strb	r3, [r7, #11]
 456:../src/os/rt-thread/src/ipc.c **** 	rt_ubase_t level;
 457:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(sem != RT_NULL);
 1127              		.loc 2 457 0
 1128 058e FB68     		ldr	r3, [r7, #12]
 1129 0590 002B     		cmp	r3, #0
 1130 0592 0DD1     		bne	.L76
 1131              	.LBB13:
 1132              		.loc 2 457 0 is_stmt 0 discriminator 1
 1133 0594 4FF00003 		mov	r3, #0
 1134 0598 FB75     		strb	r3, [r7, #23]
 1135 059a 1748     		ldr	r0, .L80
 1136 059c 1749     		ldr	r1, .L80+4
 1137 059e 184A     		ldr	r2, .L80+8
 1138 05a0 40F2C913 		movw	r3, #457
 1139 05a4 FFF7FEFF 		bl	rt_kprintf
 1140              	.L77:
 1141              		.loc 2 457 0 discriminator 2
 1142 05a8 FB7D     		ldrb	r3, [r7, #23]
 1143 05aa DBB2     		uxtb	r3, r3
 1144 05ac 002B     		cmp	r3, #0
 1145 05ae FBD0     		beq	.L77
 1146              	.L76:
 1147              	.LBE13:
 458:../src/os/rt-thread/src/ipc.c **** 
 459:../src/os/rt-thread/src/ipc.c **** 	if (cmd == RT_IPC_CMD_RESET)
 1148              		.loc 2 459 0 is_stmt 1
 1149 05b0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1150 05b2 012B     		cmp	r3, #1
 1151 05b4 18D1     		bne	.L78
 1152              	.LBB14:
 460:../src/os/rt-thread/src/ipc.c **** 	{
 461:../src/os/rt-thread/src/ipc.c **** 		rt_uint32_t value;
 462:../src/os/rt-thread/src/ipc.c **** 
 463:../src/os/rt-thread/src/ipc.c **** 		/* get value */
 464:../src/os/rt-thread/src/ipc.c **** 		value = (rt_uint32_t)arg;
 1153              		.loc 2 464 0
 1154 05b6 7B68     		ldr	r3, [r7, #4]
 1155 05b8 FB61     		str	r3, [r7, #28]
 465:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
 466:../src/os/rt-thread/src/ipc.c **** 		level = rt_hw_interrupt_disable();
 1156              		.loc 2 466 0
 1157 05ba FFF7FEFF 		bl	rt_hw_interrupt_disable
 1158 05be 0346     		mov	r3, r0
 1159 05c0 BB61     		str	r3, [r7, #24]
 467:../src/os/rt-thread/src/ipc.c **** 
 468:../src/os/rt-thread/src/ipc.c **** 		/* resume all waiting thread */
 469:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume_all(&sem->parent.suspend_thread);
 1160              		.loc 2 469 0
 1161 05c2 FB68     		ldr	r3, [r7, #12]
 1162 05c4 03F11003 		add	r3, r3, #16
 1163 05c8 1846     		mov	r0, r3
 1164 05ca FFF7C7FD 		bl	rt_ipc_list_resume_all
 470:../src/os/rt-thread/src/ipc.c **** 
 471:../src/os/rt-thread/src/ipc.c **** 		/* set new value */
 472:../src/os/rt-thread/src/ipc.c **** 		sem->value = (rt_uint16_t)value;
 1165              		.loc 2 472 0
 1166 05ce FB69     		ldr	r3, [r7, #28]
 1167 05d0 9AB2     		uxth	r2, r3
 1168 05d2 FB68     		ldr	r3, [r7, #12]
 1169 05d4 1A83     		strh	r2, [r3, #24]	@ movhi
 473:../src/os/rt-thread/src/ipc.c **** 
 474:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
 475:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(level);
 1170              		.loc 2 475 0
 1171 05d6 BB69     		ldr	r3, [r7, #24]
 1172 05d8 1846     		mov	r0, r3
 1173 05da FFF7FEFF 		bl	rt_hw_interrupt_enable
 476:../src/os/rt-thread/src/ipc.c **** 
 477:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 1174              		.loc 2 477 0
 1175 05de FFF7FEFF 		bl	rt_schedule
 478:../src/os/rt-thread/src/ipc.c **** 
 479:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 1176              		.loc 2 479 0
 1177 05e2 4FF00003 		mov	r3, #0
 1178 05e6 01E0     		b	.L79
 1179              	.L78:
 1180              	.LBE14:
 480:../src/os/rt-thread/src/ipc.c **** 	}
 481:../src/os/rt-thread/src/ipc.c **** 
 482:../src/os/rt-thread/src/ipc.c **** 	return -RT_ERROR;
 1181              		.loc 2 482 0
 1182 05e8 4FF0FF33 		mov	r3, #-1
 1183              	.L79:
 483:../src/os/rt-thread/src/ipc.c **** }
 1184              		.loc 2 483 0
 1185 05ec 1846     		mov	r0, r3
 1186 05ee 07F12007 		add	r7, r7, #32
 1187 05f2 BD46     		mov	sp, r7
 1188 05f4 80BD     		pop	{r7, pc}
 1189              	.L81:
 1190 05f6 00BF     		.align	2
 1191              	.L80:
 1192 05f8 00000000 		.word	.LC0
 1193 05fc 20000000 		.word	.LC1
 1194 0600 60020000 		.word	__FUNCTION__.4946
 1195              		.cfi_endproc
 1196              	.LFE16:
 1198              		.section	.rodata
 1199 0056 0000     		.align	2
 1200              	.LC4:
 1201 0058 6D757465 		.ascii	"mutex != RT_NULL\000"
 1201      7820213D 
 1201      2052545F 
 1201      4E554C4C 
 1201      00
 1202              		.text
 1203              		.align	2
 1204              		.global	rt_mutex_init
 1205              		.thumb
 1206              		.thumb_func
 1208              	rt_mutex_init:
 1209              	.LFB17:
 484:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_sem_control);
 485:../src/os/rt-thread/src/ipc.c **** #endif /* end of RT_USING_SEMAPHORE */
 486:../src/os/rt-thread/src/ipc.c **** 
 487:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_MUTEX
 488:../src/os/rt-thread/src/ipc.c **** /**
 489:../src/os/rt-thread/src/ipc.c ****  * This function will initialize a mutex and put it under control of resource
 490:../src/os/rt-thread/src/ipc.c ****  * management.
 491:../src/os/rt-thread/src/ipc.c ****  *
 492:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 493:../src/os/rt-thread/src/ipc.c ****  * @param name the name of mutex
 494:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of mutex
 495:../src/os/rt-thread/src/ipc.c ****  *
 496:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 497:../src/os/rt-thread/src/ipc.c ****  */
 498:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
 499:../src/os/rt-thread/src/ipc.c **** {
 1210              		.loc 2 499 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 24
 1213              		@ frame_needed = 1, uses_anonymous_args = 0
 1214 0604 80B5     		push	{r7, lr}
 1215              	.LCFI45:
 1216              		.cfi_def_cfa_offset 8
 1217              		.cfi_offset 7, -8
 1218              		.cfi_offset 14, -4
 1219 0606 86B0     		sub	sp, sp, #24
 1220              	.LCFI46:
 1221              		.cfi_def_cfa_offset 32
 1222 0608 00AF     		add	r7, sp, #0
 1223              	.LCFI47:
 1224              		.cfi_def_cfa_register 7
 1225 060a F860     		str	r0, [r7, #12]
 1226 060c B960     		str	r1, [r7, #8]
 1227 060e 1346     		mov	r3, r2
 1228 0610 FB71     		strb	r3, [r7, #7]
 500:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mutex != RT_NULL);
 1229              		.loc 2 500 0
 1230 0612 FB68     		ldr	r3, [r7, #12]
 1231 0614 002B     		cmp	r3, #0
 1232 0616 0DD1     		bne	.L83
 1233              	.LBB15:
 1234              		.loc 2 500 0 is_stmt 0 discriminator 1
 1235 0618 4FF00003 		mov	r3, #0
 1236 061c FB75     		strb	r3, [r7, #23]
 1237 061e 1848     		ldr	r0, .L86
 1238 0620 1849     		ldr	r1, .L86+4
 1239 0622 194A     		ldr	r2, .L86+8
 1240 0624 4FF4FA73 		mov	r3, #500
 1241 0628 FFF7FEFF 		bl	rt_kprintf
 1242              	.L84:
 1243              		.loc 2 500 0 discriminator 2
 1244 062c FB7D     		ldrb	r3, [r7, #23]
 1245 062e DBB2     		uxtb	r3, r3
 1246 0630 002B     		cmp	r3, #0
 1247 0632 FBD0     		beq	.L84
 1248              	.L83:
 1249              	.LBE15:
 501:../src/os/rt-thread/src/ipc.c **** 
 502:../src/os/rt-thread/src/ipc.c **** 	/* init object */
 503:../src/os/rt-thread/src/ipc.c **** 	rt_object_init(&(mutex->parent.parent), RT_Object_Class_Mutex, name);
 1250              		.loc 2 503 0 is_stmt 1
 1251 0634 FB68     		ldr	r3, [r7, #12]
 1252 0636 1846     		mov	r0, r3
 1253 0638 4FF00201 		mov	r1, #2
 1254 063c BA68     		ldr	r2, [r7, #8]
 1255 063e FFF7FEFF 		bl	rt_object_init
 504:../src/os/rt-thread/src/ipc.c **** 
 505:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 506:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mutex->parent));
 1256              		.loc 2 506 0
 1257 0642 FB68     		ldr	r3, [r7, #12]
 1258 0644 1846     		mov	r0, r3
 1259 0646 FFF715FD 		bl	rt_ipc_object_init
 507:../src/os/rt-thread/src/ipc.c **** 
 508:../src/os/rt-thread/src/ipc.c **** 	mutex->value = 1;
 1260              		.loc 2 508 0
 1261 064a FB68     		ldr	r3, [r7, #12]
 1262 064c 4FF00102 		mov	r2, #1
 1263 0650 1A83     		strh	r2, [r3, #24]	@ movhi
 509:../src/os/rt-thread/src/ipc.c **** 	mutex->owner = RT_NULL;
 1264              		.loc 2 509 0
 1265 0652 FB68     		ldr	r3, [r7, #12]
 1266 0654 4FF00002 		mov	r2, #0
 1267 0658 DA61     		str	r2, [r3, #28]
 510:../src/os/rt-thread/src/ipc.c **** 	mutex->original_priority = 0xFF;
 1268              		.loc 2 510 0
 1269 065a FB68     		ldr	r3, [r7, #12]
 1270 065c 4FF0FF02 		mov	r2, #255
 1271 0660 9A76     		strb	r2, [r3, #26]
 511:../src/os/rt-thread/src/ipc.c **** 	mutex->hold  = 0;
 1272              		.loc 2 511 0
 1273 0662 FB68     		ldr	r3, [r7, #12]
 1274 0664 4FF00002 		mov	r2, #0
 1275 0668 DA76     		strb	r2, [r3, #27]
 512:../src/os/rt-thread/src/ipc.c **** 
 513:../src/os/rt-thread/src/ipc.c **** 	/* set flag */
 514:../src/os/rt-thread/src/ipc.c **** 	mutex->parent.parent.flag = flag;
 1276              		.loc 2 514 0
 1277 066a FB68     		ldr	r3, [r7, #12]
 1278 066c FA79     		ldrb	r2, [r7, #7]
 1279 066e DA71     		strb	r2, [r3, #7]
 515:../src/os/rt-thread/src/ipc.c **** 
 516:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 1280              		.loc 2 516 0
 1281 0670 4FF00003 		mov	r3, #0
 517:../src/os/rt-thread/src/ipc.c **** }
 1282              		.loc 2 517 0
 1283 0674 1846     		mov	r0, r3
 1284 0676 07F11807 		add	r7, r7, #24
 1285 067a BD46     		mov	sp, r7
 1286 067c 80BD     		pop	{r7, pc}
 1287              	.L87:
 1288 067e 00BF     		.align	2
 1289              	.L86:
 1290 0680 00000000 		.word	.LC0
 1291 0684 58000000 		.word	.LC4
 1292 0688 50020000 		.word	__FUNCTION__.4957
 1293              		.cfi_endproc
 1294              	.LFE17:
 1296              		.align	2
 1297              		.global	rt_mutex_detach
 1298              		.thumb
 1299              		.thumb_func
 1301              	rt_mutex_detach:
 1302              	.LFB18:
 518:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_init);
 519:../src/os/rt-thread/src/ipc.c **** 
 520:../src/os/rt-thread/src/ipc.c **** /**
 521:../src/os/rt-thread/src/ipc.c ****  * This function will detach a mutex from resource management
 522:../src/os/rt-thread/src/ipc.c ****  *
 523:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 524:../src/os/rt-thread/src/ipc.c ****  *
 525:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 526:../src/os/rt-thread/src/ipc.c ****  *
 527:../src/os/rt-thread/src/ipc.c ****  * @see rt_mutex_delete
 528:../src/os/rt-thread/src/ipc.c ****  */
 529:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_detach(rt_mutex_t mutex)
 530:../src/os/rt-thread/src/ipc.c **** {
 1303              		.loc 2 530 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 16
 1306              		@ frame_needed = 1, uses_anonymous_args = 0
 1307 068c 80B5     		push	{r7, lr}
 1308              	.LCFI48:
 1309              		.cfi_def_cfa_offset 8
 1310              		.cfi_offset 7, -8
 1311              		.cfi_offset 14, -4
 1312 068e 84B0     		sub	sp, sp, #16
 1313              	.LCFI49:
 1314              		.cfi_def_cfa_offset 24
 1315 0690 00AF     		add	r7, sp, #0
 1316              	.LCFI50:
 1317              		.cfi_def_cfa_register 7
 1318 0692 7860     		str	r0, [r7, #4]
 531:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mutex != RT_NULL);
 1319              		.loc 2 531 0
 1320 0694 7B68     		ldr	r3, [r7, #4]
 1321 0696 002B     		cmp	r3, #0
 1322 0698 0DD1     		bne	.L89
 1323              	.LBB16:
 1324              		.loc 2 531 0 is_stmt 0 discriminator 1
 1325 069a 4FF00003 		mov	r3, #0
 1326 069e FB73     		strb	r3, [r7, #15]
 1327 06a0 0D48     		ldr	r0, .L92
 1328 06a2 0E49     		ldr	r1, .L92+4
 1329 06a4 0E4A     		ldr	r2, .L92+8
 1330 06a6 40F21323 		movw	r3, #531
 1331 06aa FFF7FEFF 		bl	rt_kprintf
 1332              	.L90:
 1333              		.loc 2 531 0 discriminator 2
 1334 06ae FB7B     		ldrb	r3, [r7, #15]
 1335 06b0 DBB2     		uxtb	r3, r3
 1336 06b2 002B     		cmp	r3, #0
 1337 06b4 FBD0     		beq	.L90
 1338              	.L89:
 1339              	.LBE16:
 532:../src/os/rt-thread/src/ipc.c **** 
 533:../src/os/rt-thread/src/ipc.c **** 	/* wakeup all suspend threads */
 534:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mutex->parent.suspend_thread));
 1340              		.loc 2 534 0 is_stmt 1
 1341 06b6 7B68     		ldr	r3, [r7, #4]
 1342 06b8 03F11003 		add	r3, r3, #16
 1343 06bc 1846     		mov	r0, r3
 1344 06be FFF74DFD 		bl	rt_ipc_list_resume_all
 535:../src/os/rt-thread/src/ipc.c **** 
 536:../src/os/rt-thread/src/ipc.c **** 	/* detach semaphore object */
 537:../src/os/rt-thread/src/ipc.c **** 	rt_object_detach(&(mutex->parent.parent));
 1345              		.loc 2 537 0
 1346 06c2 7B68     		ldr	r3, [r7, #4]
 1347 06c4 1846     		mov	r0, r3
 1348 06c6 FFF7FEFF 		bl	rt_object_detach
 538:../src/os/rt-thread/src/ipc.c **** 
 539:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 1349              		.loc 2 539 0
 1350 06ca 4FF00003 		mov	r3, #0
 540:../src/os/rt-thread/src/ipc.c **** }
 1351              		.loc 2 540 0
 1352 06ce 1846     		mov	r0, r3
 1353 06d0 07F11007 		add	r7, r7, #16
 1354 06d4 BD46     		mov	sp, r7
 1355 06d6 80BD     		pop	{r7, pc}
 1356              	.L93:
 1357              		.align	2
 1358              	.L92:
 1359 06d8 00000000 		.word	.LC0
 1360 06dc 58000000 		.word	.LC4
 1361 06e0 40020000 		.word	__FUNCTION__.4965
 1362              		.cfi_endproc
 1363              	.LFE18:
 1365              		.align	2
 1366              		.global	rt_mutex_create
 1367              		.thumb
 1368              		.thumb_func
 1370              	rt_mutex_create:
 1371              	.LFB19:
 541:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_detach);
 542:../src/os/rt-thread/src/ipc.c **** 
 543:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HEAP
 544:../src/os/rt-thread/src/ipc.c **** /**
 545:../src/os/rt-thread/src/ipc.c ****  * This function will create a mutex from system resource
 546:../src/os/rt-thread/src/ipc.c ****  *
 547:../src/os/rt-thread/src/ipc.c ****  * @param name the name of mutex
 548:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of mutex
 549:../src/os/rt-thread/src/ipc.c ****  *
 550:../src/os/rt-thread/src/ipc.c ****  * @return the created mutex, RT_NULL on error happen
 551:../src/os/rt-thread/src/ipc.c ****  *
 552:../src/os/rt-thread/src/ipc.c ****  * @see rt_mutex_init
 553:../src/os/rt-thread/src/ipc.c ****  */
 554:../src/os/rt-thread/src/ipc.c **** rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
 555:../src/os/rt-thread/src/ipc.c **** {
 1372              		.loc 2 555 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 24
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376 06e4 80B5     		push	{r7, lr}
 1377              	.LCFI51:
 1378              		.cfi_def_cfa_offset 8
 1379              		.cfi_offset 7, -8
 1380              		.cfi_offset 14, -4
 1381 06e6 86B0     		sub	sp, sp, #24
 1382              	.LCFI52:
 1383              		.cfi_def_cfa_offset 32
 1384 06e8 00AF     		add	r7, sp, #0
 1385              	.LCFI53:
 1386              		.cfi_def_cfa_register 7
 1387 06ea 7860     		str	r0, [r7, #4]
 1388 06ec 0B46     		mov	r3, r1
 1389 06ee FB70     		strb	r3, [r7, #3]
 1390              	.LBB17:
 556:../src/os/rt-thread/src/ipc.c **** 	struct rt_mutex *mutex;
 557:../src/os/rt-thread/src/ipc.c **** 
 558:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 1391              		.loc 2 558 0
 1392 06f0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1393 06f4 7861     		str	r0, [r7, #20]
 1394 06f6 FFF7FEFF 		bl	rt_interrupt_get_nest
 1395 06fa 0346     		mov	r3, r0
 1396 06fc 002B     		cmp	r3, #0
 1397 06fe 11D0     		beq	.L95
 1398              		.loc 2 558 0 is_stmt 0 discriminator 1
 1399 0700 1E48     		ldr	r0, .L99
 1400 0702 1F49     		ldr	r1, .L99+4
 1401 0704 FFF7FEFF 		bl	rt_kprintf
 1402              	.LBB18:
 1403 0708 4FF00003 		mov	r3, #0
 1404 070c FB73     		strb	r3, [r7, #15]
 1405 070e 1D48     		ldr	r0, .L99+8
 1406 0710 1D49     		ldr	r1, .L99+12
 1407 0712 1B4A     		ldr	r2, .L99+4
 1408 0714 40F22E23 		movw	r3, #558
 1409 0718 FFF7FEFF 		bl	rt_kprintf
 1410              	.L96:
 1411              		.loc 2 558 0 discriminator 4
 1412 071c FB7B     		ldrb	r3, [r7, #15]
 1413 071e DBB2     		uxtb	r3, r3
 1414 0720 002B     		cmp	r3, #0
 1415 0722 FBD0     		beq	.L96
 1416              	.L95:
 1417              	.LBE18:
 1418              		.loc 2 558 0 discriminator 2
 1419 0724 7869     		ldr	r0, [r7, #20]
 1420 0726 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1421              	.LBE17:
 559:../src/os/rt-thread/src/ipc.c **** 
 560:../src/os/rt-thread/src/ipc.c **** 	/* allocate object */
 561:../src/os/rt-thread/src/ipc.c **** 	mutex = (rt_mutex_t)rt_object_allocate(RT_Object_Class_Mutex, name);
 1422              		.loc 2 561 0 is_stmt 1 discriminator 2
 1423 072a 4FF00200 		mov	r0, #2
 1424 072e 7968     		ldr	r1, [r7, #4]
 1425 0730 FFF7FEFF 		bl	rt_object_allocate
 1426 0734 3861     		str	r0, [r7, #16]
 562:../src/os/rt-thread/src/ipc.c **** 	if (mutex == RT_NULL)
 1427              		.loc 2 562 0 discriminator 2
 1428 0736 3B69     		ldr	r3, [r7, #16]
 1429 0738 002B     		cmp	r3, #0
 1430 073a 01D1     		bne	.L97
 563:../src/os/rt-thread/src/ipc.c **** 		return mutex;
 1431              		.loc 2 563 0
 1432 073c 3B69     		ldr	r3, [r7, #16]
 1433 073e 17E0     		b	.L98
 1434              	.L97:
 564:../src/os/rt-thread/src/ipc.c **** 
 565:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 566:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mutex->parent));
 1435              		.loc 2 566 0
 1436 0740 3B69     		ldr	r3, [r7, #16]
 1437 0742 1846     		mov	r0, r3
 1438 0744 FFF796FC 		bl	rt_ipc_object_init
 567:../src/os/rt-thread/src/ipc.c **** 
 568:../src/os/rt-thread/src/ipc.c **** 	mutex->value = 1;
 1439              		.loc 2 568 0
 1440 0748 3B69     		ldr	r3, [r7, #16]
 1441 074a 4FF00102 		mov	r2, #1
 1442 074e 1A83     		strh	r2, [r3, #24]	@ movhi
 569:../src/os/rt-thread/src/ipc.c **** 	mutex->owner = RT_NULL;
 1443              		.loc 2 569 0
 1444 0750 3B69     		ldr	r3, [r7, #16]
 1445 0752 4FF00002 		mov	r2, #0
 1446 0756 DA61     		str	r2, [r3, #28]
 570:../src/os/rt-thread/src/ipc.c **** 	mutex->original_priority = 0xFF;
 1447              		.loc 2 570 0
 1448 0758 3B69     		ldr	r3, [r7, #16]
 1449 075a 4FF0FF02 		mov	r2, #255
 1450 075e 9A76     		strb	r2, [r3, #26]
 571:../src/os/rt-thread/src/ipc.c **** 	mutex->hold  = 0;
 1451              		.loc 2 571 0
 1452 0760 3B69     		ldr	r3, [r7, #16]
 1453 0762 4FF00002 		mov	r2, #0
 1454 0766 DA76     		strb	r2, [r3, #27]
 572:../src/os/rt-thread/src/ipc.c **** 
 573:../src/os/rt-thread/src/ipc.c **** 	/* set flag */
 574:../src/os/rt-thread/src/ipc.c **** 	mutex->parent.parent.flag = flag;
 1455              		.loc 2 574 0
 1456 0768 3B69     		ldr	r3, [r7, #16]
 1457 076a FA78     		ldrb	r2, [r7, #3]
 1458 076c DA71     		strb	r2, [r3, #7]
 575:../src/os/rt-thread/src/ipc.c **** 
 576:../src/os/rt-thread/src/ipc.c **** 	return mutex;
 1459              		.loc 2 576 0
 1460 076e 3B69     		ldr	r3, [r7, #16]
 1461              	.L98:
 577:../src/os/rt-thread/src/ipc.c **** }
 1462              		.loc 2 577 0
 1463 0770 1846     		mov	r0, r3
 1464 0772 07F11807 		add	r7, r7, #24
 1465 0776 BD46     		mov	sp, r7
 1466 0778 80BD     		pop	{r7, pc}
 1467              	.L100:
 1468 077a 00BF     		.align	2
 1469              	.L99:
 1470 077c 30000000 		.word	.LC2
 1471 0780 30020000 		.word	__FUNCTION__.4975
 1472 0784 00000000 		.word	.LC0
 1473 0788 54000000 		.word	.LC3
 1474              		.cfi_endproc
 1475              	.LFE19:
 1477              		.align	2
 1478              		.global	rt_mutex_delete
 1479              		.thumb
 1480              		.thumb_func
 1482              	rt_mutex_delete:
 1483              	.LFB20:
 578:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_create);
 579:../src/os/rt-thread/src/ipc.c **** 
 580:../src/os/rt-thread/src/ipc.c **** /**
 581:../src/os/rt-thread/src/ipc.c ****  * This function will delete a mutex object and release the memory
 582:../src/os/rt-thread/src/ipc.c ****  *
 583:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 584:../src/os/rt-thread/src/ipc.c ****  *
 585:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 586:../src/os/rt-thread/src/ipc.c ****  *
 587:../src/os/rt-thread/src/ipc.c ****  * @see rt_mutex_detach
 588:../src/os/rt-thread/src/ipc.c ****  */
 589:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_delete(rt_mutex_t mutex)
 590:../src/os/rt-thread/src/ipc.c **** {
 1484              		.loc 2 590 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 16
 1487              		@ frame_needed = 1, uses_anonymous_args = 0
 1488 078c 80B5     		push	{r7, lr}
 1489              	.LCFI54:
 1490              		.cfi_def_cfa_offset 8
 1491              		.cfi_offset 7, -8
 1492              		.cfi_offset 14, -4
 1493 078e 84B0     		sub	sp, sp, #16
 1494              	.LCFI55:
 1495              		.cfi_def_cfa_offset 24
 1496 0790 00AF     		add	r7, sp, #0
 1497              	.LCFI56:
 1498              		.cfi_def_cfa_register 7
 1499 0792 7860     		str	r0, [r7, #4]
 1500              	.LBB19:
 591:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 1501              		.loc 2 591 0
 1502 0794 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1503 0798 F860     		str	r0, [r7, #12]
 1504 079a FFF7FEFF 		bl	rt_interrupt_get_nest
 1505 079e 0346     		mov	r3, r0
 1506 07a0 002B     		cmp	r3, #0
 1507 07a2 11D0     		beq	.L102
 1508              		.loc 2 591 0 is_stmt 0 discriminator 1
 1509 07a4 1B48     		ldr	r0, .L107
 1510 07a6 1C49     		ldr	r1, .L107+4
 1511 07a8 FFF7FEFF 		bl	rt_kprintf
 1512              	.LBB20:
 1513 07ac 4FF00003 		mov	r3, #0
 1514 07b0 FB72     		strb	r3, [r7, #11]
 1515 07b2 1A48     		ldr	r0, .L107+8
 1516 07b4 1A49     		ldr	r1, .L107+12
 1517 07b6 184A     		ldr	r2, .L107+4
 1518 07b8 40F24F23 		movw	r3, #591
 1519 07bc FFF7FEFF 		bl	rt_kprintf
 1520              	.L103:
 1521              		.loc 2 591 0 discriminator 4
 1522 07c0 FB7A     		ldrb	r3, [r7, #11]
 1523 07c2 DBB2     		uxtb	r3, r3
 1524 07c4 002B     		cmp	r3, #0
 1525 07c6 FBD0     		beq	.L103
 1526              	.L102:
 1527              	.LBE20:
 1528              		.loc 2 591 0 discriminator 2
 1529 07c8 F868     		ldr	r0, [r7, #12]
 1530 07ca FFF7FEFF 		bl	rt_hw_interrupt_enable
 1531              	.LBE19:
 592:../src/os/rt-thread/src/ipc.c **** 
 593:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mutex != RT_NULL);
 1532              		.loc 2 593 0 is_stmt 1 discriminator 2
 1533 07ce 7B68     		ldr	r3, [r7, #4]
 1534 07d0 002B     		cmp	r3, #0
 1535 07d2 0DD1     		bne	.L104
 1536              	.LBB21:
 1537              		.loc 2 593 0 is_stmt 0 discriminator 1
 1538 07d4 4FF00003 		mov	r3, #0
 1539 07d8 BB72     		strb	r3, [r7, #10]
 1540 07da 1048     		ldr	r0, .L107+8
 1541 07dc 1149     		ldr	r1, .L107+16
 1542 07de 0E4A     		ldr	r2, .L107+4
 1543 07e0 40F25123 		movw	r3, #593
 1544 07e4 FFF7FEFF 		bl	rt_kprintf
 1545              	.L105:
 1546              		.loc 2 593 0 discriminator 2
 1547 07e8 BB7A     		ldrb	r3, [r7, #10]
 1548 07ea DBB2     		uxtb	r3, r3
 1549 07ec 002B     		cmp	r3, #0
 1550 07ee FBD0     		beq	.L105
 1551              	.L104:
 1552              	.LBE21:
 594:../src/os/rt-thread/src/ipc.c **** 
 595:../src/os/rt-thread/src/ipc.c **** 	/* wakeup all suspend threads */
 596:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mutex->parent.suspend_thread));
 1553              		.loc 2 596 0 is_stmt 1
 1554 07f0 7B68     		ldr	r3, [r7, #4]
 1555 07f2 03F11003 		add	r3, r3, #16
 1556 07f6 1846     		mov	r0, r3
 1557 07f8 FFF7B0FC 		bl	rt_ipc_list_resume_all
 597:../src/os/rt-thread/src/ipc.c **** 
 598:../src/os/rt-thread/src/ipc.c **** 	/* delete semaphore object */
 599:../src/os/rt-thread/src/ipc.c **** 	rt_object_delete(&(mutex->parent.parent));
 1558              		.loc 2 599 0
 1559 07fc 7B68     		ldr	r3, [r7, #4]
 1560 07fe 1846     		mov	r0, r3
 1561 0800 FFF7FEFF 		bl	rt_object_delete
 600:../src/os/rt-thread/src/ipc.c **** 
 601:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 1562              		.loc 2 601 0
 1563 0804 4FF00003 		mov	r3, #0
 602:../src/os/rt-thread/src/ipc.c **** }
 1564              		.loc 2 602 0
 1565 0808 1846     		mov	r0, r3
 1566 080a 07F11007 		add	r7, r7, #16
 1567 080e BD46     		mov	sp, r7
 1568 0810 80BD     		pop	{r7, pc}
 1569              	.L108:
 1570 0812 00BF     		.align	2
 1571              	.L107:
 1572 0814 30000000 		.word	.LC2
 1573 0818 20020000 		.word	__FUNCTION__.4984
 1574 081c 00000000 		.word	.LC0
 1575 0820 54000000 		.word	.LC3
 1576 0824 58000000 		.word	.LC4
 1577              		.cfi_endproc
 1578              	.LFE20:
 1580              		.align	2
 1581              		.global	rt_mutex_take
 1582              		.thumb
 1583              		.thumb_func
 1585              	rt_mutex_take:
 1586              	.LFB21:
 603:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_delete);
 604:../src/os/rt-thread/src/ipc.c **** #endif
 605:../src/os/rt-thread/src/ipc.c **** 
 606:../src/os/rt-thread/src/ipc.c **** /**
 607:../src/os/rt-thread/src/ipc.c ****  * This function will take a mutex, if the mutex is unavailable, the
 608:../src/os/rt-thread/src/ipc.c ****  * thread shall wait for a specified time.
 609:../src/os/rt-thread/src/ipc.c ****  *
 610:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 611:../src/os/rt-thread/src/ipc.c ****  * @param time the waiting time
 612:../src/os/rt-thread/src/ipc.c ****  *
 613:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 614:../src/os/rt-thread/src/ipc.c ****  */
 615:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
 616:../src/os/rt-thread/src/ipc.c **** {
 1587              		.loc 2 616 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 24
 1590              		@ frame_needed = 1, uses_anonymous_args = 0
 1591 0828 90B5     		push	{r4, r7, lr}
 1592              	.LCFI57:
 1593              		.cfi_def_cfa_offset 12
 1594              		.cfi_offset 4, -12
 1595              		.cfi_offset 7, -8
 1596              		.cfi_offset 14, -4
 1597 082a 87B0     		sub	sp, sp, #28
 1598              	.LCFI58:
 1599              		.cfi_def_cfa_offset 40
 1600 082c 00AF     		add	r7, sp, #0
 1601              	.LCFI59:
 1602              		.cfi_def_cfa_register 7
 1603 082e 7860     		str	r0, [r7, #4]
 1604 0830 3960     		str	r1, [r7, #0]
 1605              	.LBB22:
 617:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
 618:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 619:../src/os/rt-thread/src/ipc.c **** 
 620:../src/os/rt-thread/src/ipc.c **** 	/* this function must not be used in interrupt even if time = 0 */
 621:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 1606              		.loc 2 621 0
 1607 0832 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1608 0836 7861     		str	r0, [r7, #20]
 1609 0838 FFF7FEFF 		bl	rt_interrupt_get_nest
 1610 083c 0346     		mov	r3, r0
 1611 083e 002B     		cmp	r3, #0
 1612 0840 11D0     		beq	.L110
 1613              		.loc 2 621 0 is_stmt 0 discriminator 1
 1614 0842 6048     		ldr	r0, .L124
 1615 0844 6049     		ldr	r1, .L124+4
 1616 0846 FFF7FEFF 		bl	rt_kprintf
 1617              	.LBB23:
 1618 084a 4FF00003 		mov	r3, #0
 1619 084e FB73     		strb	r3, [r7, #15]
 1620 0850 5E48     		ldr	r0, .L124+8
 1621 0852 5F49     		ldr	r1, .L124+12
 1622 0854 5C4A     		ldr	r2, .L124+4
 1623 0856 40F26D23 		movw	r3, #621
 1624 085a FFF7FEFF 		bl	rt_kprintf
 1625              	.L111:
 1626              		.loc 2 621 0 discriminator 4
 1627 085e FB7B     		ldrb	r3, [r7, #15]
 1628 0860 DBB2     		uxtb	r3, r3
 1629 0862 002B     		cmp	r3, #0
 1630 0864 FBD0     		beq	.L111
 1631              	.L110:
 1632              	.LBE23:
 1633              		.loc 2 621 0 discriminator 2
 1634 0866 7869     		ldr	r0, [r7, #20]
 1635 0868 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1636              	.LBE22:
 622:../src/os/rt-thread/src/ipc.c **** 
 623:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mutex != RT_NULL);
 1637              		.loc 2 623 0 is_stmt 1 discriminator 2
 1638 086c 7B68     		ldr	r3, [r7, #4]
 1639 086e 002B     		cmp	r3, #0
 1640 0870 0DD1     		bne	.L112
 1641              	.LBB24:
 1642              		.loc 2 623 0 is_stmt 0 discriminator 1
 1643 0872 4FF00003 		mov	r3, #0
 1644 0876 BB73     		strb	r3, [r7, #14]
 1645 0878 5448     		ldr	r0, .L124+8
 1646 087a 5649     		ldr	r1, .L124+16
 1647 087c 524A     		ldr	r2, .L124+4
 1648 087e 40F26F23 		movw	r3, #623
 1649 0882 FFF7FEFF 		bl	rt_kprintf
 1650              	.L113:
 1651              		.loc 2 623 0 discriminator 2
 1652 0886 BB7B     		ldrb	r3, [r7, #14]
 1653 0888 DBB2     		uxtb	r3, r3
 1654 088a 002B     		cmp	r3, #0
 1655 088c FBD0     		beq	.L113
 1656              	.L112:
 1657              	.LBE24:
 624:../src/os/rt-thread/src/ipc.c **** 
 625:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
 626:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 1658              		.loc 2 626 0 is_stmt 1
 1659 088e FFF7FEFF 		bl	rt_hw_interrupt_disable
 1660 0892 0446     		mov	r4, r0
 627:../src/os/rt-thread/src/ipc.c **** 
 628:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
 629:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 1661              		.loc 2 629 0
 1662 0894 FFF7FEFF 		bl	rt_thread_self
 1663 0898 3861     		str	r0, [r7, #16]
 630:../src/os/rt-thread/src/ipc.c **** 
 631:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mutex->parent.parent)));
 1664              		.loc 2 631 0
 1665 089a 4F4B     		ldr	r3, .L124+20
 1666 089c 1B68     		ldr	r3, [r3, #0]
 1667 089e 002B     		cmp	r3, #0
 1668 08a0 04D0     		beq	.L114
 1669              		.loc 2 631 0 is_stmt 0 discriminator 1
 1670 08a2 4D4B     		ldr	r3, .L124+20
 1671 08a4 1B68     		ldr	r3, [r3, #0]
 1672 08a6 7A68     		ldr	r2, [r7, #4]
 1673 08a8 1046     		mov	r0, r2
 1674 08aa 9847     		blx	r3
 1675              	.L114:
 632:../src/os/rt-thread/src/ipc.c **** 
 633:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_LOG(RT_DEBUG_IPC,
 634:../src/os/rt-thread/src/ipc.c **** 		("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
 635:../src/os/rt-thread/src/ipc.c **** 		thread->name, mutex->value, mutex->hold));
 636:../src/os/rt-thread/src/ipc.c **** 
 637:../src/os/rt-thread/src/ipc.c **** 	/* reset thread error */
 638:../src/os/rt-thread/src/ipc.c **** 	thread->error = RT_EOK;
 1676              		.loc 2 638 0 is_stmt 1
 1677 08ac 3B69     		ldr	r3, [r7, #16]
 1678 08ae 4FF00002 		mov	r2, #0
 1679 08b2 DA62     		str	r2, [r3, #44]
 639:../src/os/rt-thread/src/ipc.c **** 
 640:../src/os/rt-thread/src/ipc.c **** 	if (mutex->owner == thread)
 1680              		.loc 2 640 0
 1681 08b4 7B68     		ldr	r3, [r7, #4]
 1682 08b6 DA69     		ldr	r2, [r3, #28]
 1683 08b8 3B69     		ldr	r3, [r7, #16]
 1684 08ba 9A42     		cmp	r2, r3
 1685 08bc 07D1     		bne	.L115
 641:../src/os/rt-thread/src/ipc.c **** 	{
 642:../src/os/rt-thread/src/ipc.c **** 		/* it's the same thread */
 643:../src/os/rt-thread/src/ipc.c **** 		mutex->hold ++;
 1686              		.loc 2 643 0
 1687 08be 7B68     		ldr	r3, [r7, #4]
 1688 08c0 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 1689 08c2 03F10103 		add	r3, r3, #1
 1690 08c6 DAB2     		uxtb	r2, r3
 1691 08c8 7B68     		ldr	r3, [r7, #4]
 1692 08ca DA76     		strb	r2, [r3, #27]
 1693 08cc 67E0     		b	.L116
 1694              	.L115:
 644:../src/os/rt-thread/src/ipc.c **** 	}
 645:../src/os/rt-thread/src/ipc.c **** 	else
 646:../src/os/rt-thread/src/ipc.c **** 	{
 647:../src/os/rt-thread/src/ipc.c **** 		/* The value of mutex is 1 in initial status. Therefore, if the
 648:../src/os/rt-thread/src/ipc.c **** 		 * value is great than 0, it indicates the mutex is avaible.
 649:../src/os/rt-thread/src/ipc.c **** 		 */
 650:../src/os/rt-thread/src/ipc.c **** 		if (mutex->value > 0)
 1695              		.loc 2 650 0
 1696 08ce 7B68     		ldr	r3, [r7, #4]
 1697 08d0 1B8B     		ldrh	r3, [r3, #24]
 1698 08d2 002B     		cmp	r3, #0
 1699 08d4 16D0     		beq	.L117
 651:../src/os/rt-thread/src/ipc.c **** 		{
 652:../src/os/rt-thread/src/ipc.c **** 			/* mutex is available */
 653:../src/os/rt-thread/src/ipc.c **** 			mutex->value --;
 1700              		.loc 2 653 0
 1701 08d6 7B68     		ldr	r3, [r7, #4]
 1702 08d8 1B8B     		ldrh	r3, [r3, #24]
 1703 08da 03F1FF33 		add	r3, r3, #-1
 1704 08de 9AB2     		uxth	r2, r3
 1705 08e0 7B68     		ldr	r3, [r7, #4]
 1706 08e2 1A83     		strh	r2, [r3, #24]	@ movhi
 654:../src/os/rt-thread/src/ipc.c **** 
 655:../src/os/rt-thread/src/ipc.c **** 			/* set mutex owner and original priority */
 656:../src/os/rt-thread/src/ipc.c **** 			mutex->owner = thread;
 1707              		.loc 2 656 0
 1708 08e4 7B68     		ldr	r3, [r7, #4]
 1709 08e6 3A69     		ldr	r2, [r7, #16]
 1710 08e8 DA61     		str	r2, [r3, #28]
 657:../src/os/rt-thread/src/ipc.c **** 			mutex->original_priority = thread->current_priority;
 1711              		.loc 2 657 0
 1712 08ea 3B69     		ldr	r3, [r7, #16]
 1713 08ec 93F83120 		ldrb	r2, [r3, #49]	@ zero_extendqisi2
 1714 08f0 7B68     		ldr	r3, [r7, #4]
 1715 08f2 9A76     		strb	r2, [r3, #26]
 658:../src/os/rt-thread/src/ipc.c **** 			mutex->hold ++;
 1716              		.loc 2 658 0
 1717 08f4 7B68     		ldr	r3, [r7, #4]
 1718 08f6 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 1719 08f8 03F10103 		add	r3, r3, #1
 1720 08fc DAB2     		uxtb	r2, r3
 1721 08fe 7B68     		ldr	r3, [r7, #4]
 1722 0900 DA76     		strb	r2, [r3, #27]
 1723 0902 4CE0     		b	.L116
 1724              	.L117:
 659:../src/os/rt-thread/src/ipc.c **** 		}
 660:../src/os/rt-thread/src/ipc.c **** 		else
 661:../src/os/rt-thread/src/ipc.c **** 		{
 662:../src/os/rt-thread/src/ipc.c **** 			/* no waiting, return with timeout */
 663:../src/os/rt-thread/src/ipc.c **** 			if (time == 0)
 1725              		.loc 2 663 0
 1726 0904 3B68     		ldr	r3, [r7, #0]
 1727 0906 002B     		cmp	r3, #0
 1728 0908 09D1     		bne	.L118
 664:../src/os/rt-thread/src/ipc.c **** 			{
 665:../src/os/rt-thread/src/ipc.c **** 				/* set error as timeout */
 666:../src/os/rt-thread/src/ipc.c **** 				thread->error = -RT_ETIMEOUT;
 1729              		.loc 2 666 0
 1730 090a 3B69     		ldr	r3, [r7, #16]
 1731 090c 6FF00102 		mvn	r2, #1
 1732 0910 DA62     		str	r2, [r3, #44]
 667:../src/os/rt-thread/src/ipc.c **** 
 668:../src/os/rt-thread/src/ipc.c **** 				/* enable interrupt */
 669:../src/os/rt-thread/src/ipc.c **** 				rt_hw_interrupt_enable(temp);
 1733              		.loc 2 669 0
 1734 0912 2046     		mov	r0, r4
 1735 0914 FFF7FEFF 		bl	rt_hw_interrupt_enable
 670:../src/os/rt-thread/src/ipc.c **** 
 671:../src/os/rt-thread/src/ipc.c **** 				return -RT_ETIMEOUT;
 1736              		.loc 2 671 0
 1737 0918 6FF00103 		mvn	r3, #1
 1738 091c 4DE0     		b	.L119
 1739              	.L118:
 672:../src/os/rt-thread/src/ipc.c **** 			}
 673:../src/os/rt-thread/src/ipc.c **** 			else
 674:../src/os/rt-thread/src/ipc.c **** 			{
 675:../src/os/rt-thread/src/ipc.c **** 				/* mutex is unavailable, push to suspend list */
 676:../src/os/rt-thread/src/ipc.c **** 				RT_DEBUG_LOG(RT_DEBUG_IPC,
 677:../src/os/rt-thread/src/ipc.c **** 					("mutex_take: suspend thread: %s\n", thread->name));
 678:../src/os/rt-thread/src/ipc.c **** 
 679:../src/os/rt-thread/src/ipc.c **** 				/* change the owner thread priority of mutex */
 680:../src/os/rt-thread/src/ipc.c **** 				if (thread->current_priority < mutex->owner->current_priority)
 1740              		.loc 2 680 0
 1741 091e 3B69     		ldr	r3, [r7, #16]
 1742 0920 93F83120 		ldrb	r2, [r3, #49]	@ zero_extendqisi2
 1743 0924 7B68     		ldr	r3, [r7, #4]
 1744 0926 DB69     		ldr	r3, [r3, #28]
 1745 0928 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1746 092c 9A42     		cmp	r2, r3
 1747 092e 0AD2     		bcs	.L120
 681:../src/os/rt-thread/src/ipc.c **** 				{
 682:../src/os/rt-thread/src/ipc.c **** 					/* change the owner thread priority */
 683:../src/os/rt-thread/src/ipc.c **** 					rt_thread_control(mutex->owner, RT_THREAD_CTRL_CHANGE_PRIORITY,
 1748              		.loc 2 683 0
 1749 0930 7B68     		ldr	r3, [r7, #4]
 1750 0932 DA69     		ldr	r2, [r3, #28]
 684:../src/os/rt-thread/src/ipc.c **** 						&thread->current_priority);
 1751              		.loc 2 684 0
 1752 0934 3B69     		ldr	r3, [r7, #16]
 1753 0936 03F13103 		add	r3, r3, #49
 683:../src/os/rt-thread/src/ipc.c **** 					rt_thread_control(mutex->owner, RT_THREAD_CTRL_CHANGE_PRIORITY,
 1754              		.loc 2 683 0
 1755 093a 1046     		mov	r0, r2
 1756 093c 4FF00201 		mov	r1, #2
 1757 0940 1A46     		mov	r2, r3
 1758 0942 FFF7FEFF 		bl	rt_thread_control
 1759              	.L120:
 685:../src/os/rt-thread/src/ipc.c **** 				}
 686:../src/os/rt-thread/src/ipc.c **** 
 687:../src/os/rt-thread/src/ipc.c **** 				/* suspend current thread */
 688:../src/os/rt-thread/src/ipc.c **** 				rt_ipc_list_suspend(&(mutex->parent.suspend_thread),
 1760              		.loc 2 688 0
 1761 0946 7B68     		ldr	r3, [r7, #4]
 1762 0948 03F11002 		add	r2, r3, #16
 689:../src/os/rt-thread/src/ipc.c **** 				thread, mutex->parent.parent.flag);
 1763              		.loc 2 689 0
 1764 094c 7B68     		ldr	r3, [r7, #4]
 688:../src/os/rt-thread/src/ipc.c **** 				rt_ipc_list_suspend(&(mutex->parent.suspend_thread),
 1765              		.loc 2 688 0
 1766 094e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1767 0950 1046     		mov	r0, r2
 1768 0952 3969     		ldr	r1, [r7, #16]
 1769 0954 1A46     		mov	r2, r3
 1770 0956 FFF79FFB 		bl	rt_ipc_list_suspend
 690:../src/os/rt-thread/src/ipc.c **** 
 691:../src/os/rt-thread/src/ipc.c **** 				/* has waiting time, start thread timer */
 692:../src/os/rt-thread/src/ipc.c **** 				if (time > 0)
 1771              		.loc 2 692 0
 1772 095a 3B68     		ldr	r3, [r7, #0]
 1773 095c 002B     		cmp	r3, #0
 1774 095e 0FDD     		ble	.L121
 693:../src/os/rt-thread/src/ipc.c **** 				{
 694:../src/os/rt-thread/src/ipc.c **** 					RT_DEBUG_LOG(RT_DEBUG_IPC,
 695:../src/os/rt-thread/src/ipc.c **** 						("mutex_take: start the timer of thread:%s\n", thread->name));
 696:../src/os/rt-thread/src/ipc.c **** 
 697:../src/os/rt-thread/src/ipc.c **** 					/* reset the timeout of thread timer and start it */
 698:../src/os/rt-thread/src/ipc.c **** 					rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &time);
 1775              		.loc 2 698 0
 1776 0960 3B69     		ldr	r3, [r7, #16]
 1777 0962 03F14802 		add	r2, r3, #72
 1778 0966 3B46     		mov	r3, r7
 1779 0968 1046     		mov	r0, r2
 1780 096a 4FF00001 		mov	r1, #0
 1781 096e 1A46     		mov	r2, r3
 1782 0970 FFF7FEFF 		bl	rt_timer_control
 699:../src/os/rt-thread/src/ipc.c **** 					rt_timer_start(&(thread->thread_timer));
 1783              		.loc 2 699 0
 1784 0974 3B69     		ldr	r3, [r7, #16]
 1785 0976 03F14803 		add	r3, r3, #72
 1786 097a 1846     		mov	r0, r3
 1787 097c FFF7FEFF 		bl	rt_timer_start
 1788              	.L121:
 700:../src/os/rt-thread/src/ipc.c **** 				}
 701:../src/os/rt-thread/src/ipc.c **** 
 702:../src/os/rt-thread/src/ipc.c **** 				/* enable interrupt */
 703:../src/os/rt-thread/src/ipc.c **** 				rt_hw_interrupt_enable(temp);
 1789              		.loc 2 703 0
 1790 0980 2046     		mov	r0, r4
 1791 0982 FFF7FEFF 		bl	rt_hw_interrupt_enable
 704:../src/os/rt-thread/src/ipc.c **** 
 705:../src/os/rt-thread/src/ipc.c **** 				/* do schedule */
 706:../src/os/rt-thread/src/ipc.c **** 				rt_schedule();
 1792              		.loc 2 706 0
 1793 0986 FFF7FEFF 		bl	rt_schedule
 707:../src/os/rt-thread/src/ipc.c **** 
 708:../src/os/rt-thread/src/ipc.c **** 				if (thread->error != RT_EOK)
 1794              		.loc 2 708 0
 1795 098a 3B69     		ldr	r3, [r7, #16]
 1796 098c DB6A     		ldr	r3, [r3, #44]
 1797 098e 002B     		cmp	r3, #0
 1798 0990 02D0     		beq	.L122
 709:../src/os/rt-thread/src/ipc.c **** 				{
 710:../src/os/rt-thread/src/ipc.c **** 					/* return error */
 711:../src/os/rt-thread/src/ipc.c **** 					return thread->error;
 1799              		.loc 2 711 0
 1800 0992 3B69     		ldr	r3, [r7, #16]
 1801 0994 DB6A     		ldr	r3, [r3, #44]
 1802 0996 10E0     		b	.L119
 1803              	.L122:
 712:../src/os/rt-thread/src/ipc.c **** 				}
 713:../src/os/rt-thread/src/ipc.c **** 				else
 714:../src/os/rt-thread/src/ipc.c **** 				{
 715:../src/os/rt-thread/src/ipc.c **** 					/* the mutex is taken successfully. */
 716:../src/os/rt-thread/src/ipc.c **** 					/* disable interrupt */
 717:../src/os/rt-thread/src/ipc.c **** 					temp = rt_hw_interrupt_disable();
 1804              		.loc 2 717 0
 1805 0998 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1806 099c 0446     		mov	r4, r0
 1807              	.L116:
 718:../src/os/rt-thread/src/ipc.c **** 				}
 719:../src/os/rt-thread/src/ipc.c **** 			}
 720:../src/os/rt-thread/src/ipc.c **** 		}
 721:../src/os/rt-thread/src/ipc.c **** 	}
 722:../src/os/rt-thread/src/ipc.c **** 
 723:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
 724:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 1808              		.loc 2 724 0
 1809 099e 2046     		mov	r0, r4
 1810 09a0 FFF7FEFF 		bl	rt_hw_interrupt_enable
 725:../src/os/rt-thread/src/ipc.c **** 
 726:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));
 1811              		.loc 2 726 0
 1812 09a4 0D4B     		ldr	r3, .L124+24
 1813 09a6 1B68     		ldr	r3, [r3, #0]
 1814 09a8 002B     		cmp	r3, #0
 1815 09aa 04D0     		beq	.L123
 1816              		.loc 2 726 0 is_stmt 0 discriminator 1
 1817 09ac 0B4B     		ldr	r3, .L124+24
 1818 09ae 1B68     		ldr	r3, [r3, #0]
 1819 09b0 7A68     		ldr	r2, [r7, #4]
 1820 09b2 1046     		mov	r0, r2
 1821 09b4 9847     		blx	r3
 1822              	.L123:
 727:../src/os/rt-thread/src/ipc.c **** 
 728:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 1823              		.loc 2 728 0 is_stmt 1
 1824 09b6 4FF00003 		mov	r3, #0
 1825              	.L119:
 729:../src/os/rt-thread/src/ipc.c **** }
 1826              		.loc 2 729 0
 1827 09ba 1846     		mov	r0, r3
 1828 09bc 07F11C07 		add	r7, r7, #28
 1829 09c0 BD46     		mov	sp, r7
 1830 09c2 90BD     		pop	{r4, r7, pc}
 1831              	.L125:
 1832              		.align	2
 1833              	.L124:
 1834 09c4 30000000 		.word	.LC2
 1835 09c8 10020000 		.word	__FUNCTION__.5000
 1836 09cc 00000000 		.word	.LC0
 1837 09d0 54000000 		.word	.LC3
 1838 09d4 58000000 		.word	.LC4
 1839 09d8 00000000 		.word	rt_object_trytake_hook
 1840 09dc 00000000 		.word	rt_object_take_hook
 1841              		.cfi_endproc
 1842              	.LFE21:
 1844              		.align	2
 1845              		.global	rt_mutex_release
 1846              		.thumb
 1847              		.thumb_func
 1849              	rt_mutex_release:
 1850              	.LFB22:
 730:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_take);
 731:../src/os/rt-thread/src/ipc.c **** 
 732:../src/os/rt-thread/src/ipc.c **** /**
 733:../src/os/rt-thread/src/ipc.c ****  * This function will release a mutex, if there are threads suspended on mutex,
 734:../src/os/rt-thread/src/ipc.c ****  * it will be waked up.
 735:../src/os/rt-thread/src/ipc.c ****  *
 736:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 737:../src/os/rt-thread/src/ipc.c ****  *
 738:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 739:../src/os/rt-thread/src/ipc.c ****  */
 740:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_release(rt_mutex_t mutex)
 741:../src/os/rt-thread/src/ipc.c **** {
 1851              		.loc 2 741 0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 16
 1854              		@ frame_needed = 1, uses_anonymous_args = 0
 1855 09e0 90B5     		push	{r4, r7, lr}
 1856              	.LCFI60:
 1857              		.cfi_def_cfa_offset 12
 1858              		.cfi_offset 4, -12
 1859              		.cfi_offset 7, -8
 1860              		.cfi_offset 14, -4
 1861 09e2 85B0     		sub	sp, sp, #20
 1862              	.LCFI61:
 1863              		.cfi_def_cfa_offset 32
 1864 09e4 00AF     		add	r7, sp, #0
 1865              	.LCFI62:
 1866              		.cfi_def_cfa_register 7
 1867 09e6 7860     		str	r0, [r7, #4]
 742:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
 743:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 744:../src/os/rt-thread/src/ipc.c **** 	rt_bool_t need_schedule;
 745:../src/os/rt-thread/src/ipc.c **** 
 746:../src/os/rt-thread/src/ipc.c **** 	need_schedule = RT_FALSE;
 1868              		.loc 2 746 0
 1869 09e8 4FF00003 		mov	r3, #0
 1870 09ec FB60     		str	r3, [r7, #12]
 747:../src/os/rt-thread/src/ipc.c **** 
 748:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
 749:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 1871              		.loc 2 749 0
 1872 09ee FFF7FEFF 		bl	rt_thread_self
 1873 09f2 B860     		str	r0, [r7, #8]
 750:../src/os/rt-thread/src/ipc.c **** 
 751:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
 752:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 1874              		.loc 2 752 0
 1875 09f4 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1876 09f8 0446     		mov	r4, r0
 753:../src/os/rt-thread/src/ipc.c **** 
 754:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_LOG(RT_DEBUG_IPC,
 755:../src/os/rt-thread/src/ipc.c **** 		("mutex_release:current thread %s, mutex value: %d, hold: %d\n",
 756:../src/os/rt-thread/src/ipc.c **** 		thread->name, mutex->value, mutex->hold));
 757:../src/os/rt-thread/src/ipc.c **** 
 758:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));
 1877              		.loc 2 758 0
 1878 09fa 3D4B     		ldr	r3, .L134
 1879 09fc 1B68     		ldr	r3, [r3, #0]
 1880 09fe 002B     		cmp	r3, #0
 1881 0a00 04D0     		beq	.L127
 1882              		.loc 2 758 0 is_stmt 0 discriminator 1
 1883 0a02 3B4B     		ldr	r3, .L134
 1884 0a04 1B68     		ldr	r3, [r3, #0]
 1885 0a06 7A68     		ldr	r2, [r7, #4]
 1886 0a08 1046     		mov	r0, r2
 1887 0a0a 9847     		blx	r3
 1888              	.L127:
 759:../src/os/rt-thread/src/ipc.c **** 
 760:../src/os/rt-thread/src/ipc.c **** 	/* mutex only can be released by owner */
 761:../src/os/rt-thread/src/ipc.c **** 	if (thread != mutex->owner)
 1889              		.loc 2 761 0 is_stmt 1
 1890 0a0c 7B68     		ldr	r3, [r7, #4]
 1891 0a0e DA69     		ldr	r2, [r3, #28]
 1892 0a10 BB68     		ldr	r3, [r7, #8]
 1893 0a12 9A42     		cmp	r2, r3
 1894 0a14 09D0     		beq	.L128
 762:../src/os/rt-thread/src/ipc.c **** 	{
 763:../src/os/rt-thread/src/ipc.c **** 		thread->error = -RT_ERROR;
 1895              		.loc 2 763 0
 1896 0a16 BB68     		ldr	r3, [r7, #8]
 1897 0a18 4FF0FF32 		mov	r2, #-1
 1898 0a1c DA62     		str	r2, [r3, #44]
 764:../src/os/rt-thread/src/ipc.c **** 
 765:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
 766:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 1899              		.loc 2 766 0
 1900 0a1e 2046     		mov	r0, r4
 1901 0a20 FFF7FEFF 		bl	rt_hw_interrupt_enable
 767:../src/os/rt-thread/src/ipc.c **** 
 768:../src/os/rt-thread/src/ipc.c **** 		return -RT_ERROR;
 1902              		.loc 2 768 0
 1903 0a24 4FF0FF33 		mov	r3, #-1
 1904 0a28 5DE0     		b	.L129
 1905              	.L128:
 769:../src/os/rt-thread/src/ipc.c **** 	}
 770:../src/os/rt-thread/src/ipc.c **** 
 771:../src/os/rt-thread/src/ipc.c **** 	/* decrease hold */
 772:../src/os/rt-thread/src/ipc.c **** 	mutex->hold --;
 1906              		.loc 2 772 0
 1907 0a2a 7B68     		ldr	r3, [r7, #4]
 1908 0a2c DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 1909 0a2e 03F1FF33 		add	r3, r3, #-1
 1910 0a32 DAB2     		uxtb	r2, r3
 1911 0a34 7B68     		ldr	r3, [r7, #4]
 1912 0a36 DA76     		strb	r2, [r3, #27]
 773:../src/os/rt-thread/src/ipc.c **** 	/* if no hold */
 774:../src/os/rt-thread/src/ipc.c **** 	if (mutex->hold == 0)
 1913              		.loc 2 774 0
 1914 0a38 7B68     		ldr	r3, [r7, #4]
 1915 0a3a DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 1916 0a3c 002B     		cmp	r3, #0
 1917 0a3e 48D1     		bne	.L130
 775:../src/os/rt-thread/src/ipc.c **** 	{
 776:../src/os/rt-thread/src/ipc.c **** 		/* change the owner thread to original priority */
 777:../src/os/rt-thread/src/ipc.c **** 		if (mutex->original_priority != mutex->owner->current_priority)
 1918              		.loc 2 777 0
 1919 0a40 7B68     		ldr	r3, [r7, #4]
 1920 0a42 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
 1921 0a44 7B68     		ldr	r3, [r7, #4]
 1922 0a46 DB69     		ldr	r3, [r3, #28]
 1923 0a48 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1924 0a4c 9A42     		cmp	r2, r3
 1925 0a4e 0AD0     		beq	.L131
 778:../src/os/rt-thread/src/ipc.c **** 		{
 779:../src/os/rt-thread/src/ipc.c **** 			rt_thread_control(mutex->owner, RT_THREAD_CTRL_CHANGE_PRIORITY,
 1926              		.loc 2 779 0
 1927 0a50 7B68     		ldr	r3, [r7, #4]
 1928 0a52 DA69     		ldr	r2, [r3, #28]
 780:../src/os/rt-thread/src/ipc.c **** 				&(mutex->original_priority));
 1929              		.loc 2 780 0
 1930 0a54 7B68     		ldr	r3, [r7, #4]
 1931 0a56 03F11A03 		add	r3, r3, #26
 779:../src/os/rt-thread/src/ipc.c **** 			rt_thread_control(mutex->owner, RT_THREAD_CTRL_CHANGE_PRIORITY,
 1932              		.loc 2 779 0
 1933 0a5a 1046     		mov	r0, r2
 1934 0a5c 4FF00201 		mov	r1, #2
 1935 0a60 1A46     		mov	r2, r3
 1936 0a62 FFF7FEFF 		bl	rt_thread_control
 1937              	.L131:
 781:../src/os/rt-thread/src/ipc.c **** 		}
 782:../src/os/rt-thread/src/ipc.c **** 
 783:../src/os/rt-thread/src/ipc.c **** 		/* wakeup suspended thread */
 784:../src/os/rt-thread/src/ipc.c **** 		if (!rt_list_isempty(&mutex->parent.suspend_thread))
 1938              		.loc 2 784 0
 1939 0a66 7B68     		ldr	r3, [r7, #4]
 1940 0a68 03F11003 		add	r3, r3, #16
 1941 0a6c 1846     		mov	r0, r3
 1942 0a6e FFF7EFFA 		bl	rt_list_isempty
 1943 0a72 0346     		mov	r3, r0
 1944 0a74 002B     		cmp	r3, #0
 1945 0a76 1DD1     		bne	.L132
 785:../src/os/rt-thread/src/ipc.c **** 		{
 786:../src/os/rt-thread/src/ipc.c **** 			/* get suspended thread */
 787:../src/os/rt-thread/src/ipc.c **** 			thread = rt_list_entry(mutex->parent.suspend_thread.next, struct rt_thread, tlist);
 1946              		.loc 2 787 0
 1947 0a78 7B68     		ldr	r3, [r7, #4]
 1948 0a7a 1B69     		ldr	r3, [r3, #16]
 1949 0a7c A3F11003 		sub	r3, r3, #16
 1950 0a80 BB60     		str	r3, [r7, #8]
 788:../src/os/rt-thread/src/ipc.c **** 
 789:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n", thread->name));
 790:../src/os/rt-thread/src/ipc.c **** 
 791:../src/os/rt-thread/src/ipc.c **** 			/* set new owner and priority */
 792:../src/os/rt-thread/src/ipc.c **** 			mutex->owner = thread;
 1951              		.loc 2 792 0
 1952 0a82 7B68     		ldr	r3, [r7, #4]
 1953 0a84 BA68     		ldr	r2, [r7, #8]
 1954 0a86 DA61     		str	r2, [r3, #28]
 793:../src/os/rt-thread/src/ipc.c **** 			mutex->original_priority = thread->current_priority;
 1955              		.loc 2 793 0
 1956 0a88 BB68     		ldr	r3, [r7, #8]
 1957 0a8a 93F83120 		ldrb	r2, [r3, #49]	@ zero_extendqisi2
 1958 0a8e 7B68     		ldr	r3, [r7, #4]
 1959 0a90 9A76     		strb	r2, [r3, #26]
 794:../src/os/rt-thread/src/ipc.c **** 			mutex->hold ++;
 1960              		.loc 2 794 0
 1961 0a92 7B68     		ldr	r3, [r7, #4]
 1962 0a94 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 1963 0a96 03F10103 		add	r3, r3, #1
 1964 0a9a DAB2     		uxtb	r2, r3
 1965 0a9c 7B68     		ldr	r3, [r7, #4]
 1966 0a9e DA76     		strb	r2, [r3, #27]
 795:../src/os/rt-thread/src/ipc.c **** 
 796:../src/os/rt-thread/src/ipc.c **** 			/* resume thread */
 797:../src/os/rt-thread/src/ipc.c **** 			rt_ipc_list_resume(&(mutex->parent.suspend_thread));
 1967              		.loc 2 797 0
 1968 0aa0 7B68     		ldr	r3, [r7, #4]
 1969 0aa2 03F11003 		add	r3, r3, #16
 1970 0aa6 1846     		mov	r0, r3
 1971 0aa8 FFF744FB 		bl	rt_ipc_list_resume
 798:../src/os/rt-thread/src/ipc.c **** 
 799:../src/os/rt-thread/src/ipc.c **** 			need_schedule = RT_TRUE;
 1972              		.loc 2 799 0
 1973 0aac 4FF00103 		mov	r3, #1
 1974 0ab0 FB60     		str	r3, [r7, #12]
 1975 0ab2 0EE0     		b	.L130
 1976              	.L132:
 800:../src/os/rt-thread/src/ipc.c **** 		}
 801:../src/os/rt-thread/src/ipc.c **** 		else
 802:../src/os/rt-thread/src/ipc.c **** 		{
 803:../src/os/rt-thread/src/ipc.c **** 			/* increase value */
 804:../src/os/rt-thread/src/ipc.c **** 			mutex->value ++;
 1977              		.loc 2 804 0
 1978 0ab4 7B68     		ldr	r3, [r7, #4]
 1979 0ab6 1B8B     		ldrh	r3, [r3, #24]
 1980 0ab8 03F10103 		add	r3, r3, #1
 1981 0abc 9AB2     		uxth	r2, r3
 1982 0abe 7B68     		ldr	r3, [r7, #4]
 1983 0ac0 1A83     		strh	r2, [r3, #24]	@ movhi
 805:../src/os/rt-thread/src/ipc.c **** 
 806:../src/os/rt-thread/src/ipc.c **** 			/* clear owner */
 807:../src/os/rt-thread/src/ipc.c **** 			mutex->owner = RT_NULL;
 1984              		.loc 2 807 0
 1985 0ac2 7B68     		ldr	r3, [r7, #4]
 1986 0ac4 4FF00002 		mov	r2, #0
 1987 0ac8 DA61     		str	r2, [r3, #28]
 808:../src/os/rt-thread/src/ipc.c **** 			mutex->original_priority = 0xff;
 1988              		.loc 2 808 0
 1989 0aca 7B68     		ldr	r3, [r7, #4]
 1990 0acc 4FF0FF02 		mov	r2, #255
 1991 0ad0 9A76     		strb	r2, [r3, #26]
 1992              	.L130:
 809:../src/os/rt-thread/src/ipc.c **** 		}
 810:../src/os/rt-thread/src/ipc.c **** 	}
 811:../src/os/rt-thread/src/ipc.c **** 
 812:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
 813:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 1993              		.loc 2 813 0
 1994 0ad2 2046     		mov	r0, r4
 1995 0ad4 FFF7FEFF 		bl	rt_hw_interrupt_enable
 814:../src/os/rt-thread/src/ipc.c **** 
 815:../src/os/rt-thread/src/ipc.c **** 	/* perform a schedule */
 816:../src/os/rt-thread/src/ipc.c **** 	if (need_schedule == RT_TRUE)
 1996              		.loc 2 816 0
 1997 0ad8 FB68     		ldr	r3, [r7, #12]
 1998 0ada 012B     		cmp	r3, #1
 1999 0adc 01D1     		bne	.L133
 817:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 2000              		.loc 2 817 0
 2001 0ade FFF7FEFF 		bl	rt_schedule
 2002              	.L133:
 818:../src/os/rt-thread/src/ipc.c **** 
 819:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 2003              		.loc 2 819 0
 2004 0ae2 4FF00003 		mov	r3, #0
 2005              	.L129:
 820:../src/os/rt-thread/src/ipc.c **** }
 2006              		.loc 2 820 0
 2007 0ae6 1846     		mov	r0, r3
 2008 0ae8 07F11407 		add	r7, r7, #20
 2009 0aec BD46     		mov	sp, r7
 2010 0aee 90BD     		pop	{r4, r7, pc}
 2011              	.L135:
 2012              		.align	2
 2013              	.L134:
 2014 0af0 00000000 		.word	rt_object_put_hook
 2015              		.cfi_endproc
 2016              	.LFE22:
 2018              		.align	2
 2019              		.global	rt_mutex_control
 2020              		.thumb
 2021              		.thumb_func
 2023              	rt_mutex_control:
 2024              	.LFB23:
 821:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_release);
 822:../src/os/rt-thread/src/ipc.c **** 
 823:../src/os/rt-thread/src/ipc.c **** /**
 824:../src/os/rt-thread/src/ipc.c ****  * This function can get or set some extra attributions of a mutex object.
 825:../src/os/rt-thread/src/ipc.c ****  *
 826:../src/os/rt-thread/src/ipc.c ****  * @param mutex the mutex object
 827:../src/os/rt-thread/src/ipc.c ****  * @param cmd the execution command
 828:../src/os/rt-thread/src/ipc.c ****  * @param arg the execution argument
 829:../src/os/rt-thread/src/ipc.c ****  *
 830:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 831:../src/os/rt-thread/src/ipc.c ****  */
 832:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mutex_control(rt_mutex_t mutex, rt_uint8_t cmd, void *arg)
 833:../src/os/rt-thread/src/ipc.c **** {
 2025              		.loc 2 833 0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 16
 2028              		@ frame_needed = 1, uses_anonymous_args = 0
 2029              		@ link register save eliminated.
 2030 0af4 80B4     		push	{r7}
 2031              	.LCFI63:
 2032              		.cfi_def_cfa_offset 4
 2033              		.cfi_offset 7, -4
 2034 0af6 85B0     		sub	sp, sp, #20
 2035              	.LCFI64:
 2036              		.cfi_def_cfa_offset 24
 2037 0af8 00AF     		add	r7, sp, #0
 2038              	.LCFI65:
 2039              		.cfi_def_cfa_register 7
 2040 0afa F860     		str	r0, [r7, #12]
 2041 0afc 0B46     		mov	r3, r1
 2042 0afe 7A60     		str	r2, [r7, #4]
 2043 0b00 FB72     		strb	r3, [r7, #11]
 834:../src/os/rt-thread/src/ipc.c **** 	return -RT_ERROR;
 2044              		.loc 2 834 0
 2045 0b02 4FF0FF33 		mov	r3, #-1
 835:../src/os/rt-thread/src/ipc.c **** }
 2046              		.loc 2 835 0
 2047 0b06 1846     		mov	r0, r3
 2048 0b08 07F11407 		add	r7, r7, #20
 2049 0b0c BD46     		mov	sp, r7
 2050 0b0e 80BC     		pop	{r7}
 2051 0b10 7047     		bx	lr
 2052              		.cfi_endproc
 2053              	.LFE23:
 2055              		.section	.rodata
 2056 0069 000000   		.align	2
 2057              	.LC5:
 2058 006c 6576656E 		.ascii	"event != RT_NULL\000"
 2058      7420213D 
 2058      2052545F 
 2058      4E554C4C 
 2058      00
 2059              		.text
 2060 0b12 00BF     		.align	2
 2061              		.global	rt_event_init
 2062              		.thumb
 2063              		.thumb_func
 2065              	rt_event_init:
 2066              	.LFB24:
 836:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mutex_control);
 837:../src/os/rt-thread/src/ipc.c **** #endif /* end of RT_USING_MUTEX */
 838:../src/os/rt-thread/src/ipc.c **** 
 839:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_EVENT
 840:../src/os/rt-thread/src/ipc.c **** /**
 841:../src/os/rt-thread/src/ipc.c ****  * This function will initialize an event and put it under control of resource
 842:../src/os/rt-thread/src/ipc.c ****  * management.
 843:../src/os/rt-thread/src/ipc.c ****  *
 844:../src/os/rt-thread/src/ipc.c ****  * @param event the event object
 845:../src/os/rt-thread/src/ipc.c ****  * @param name the name of event
 846:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of event
 847:../src/os/rt-thread/src/ipc.c ****  *
 848:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 849:../src/os/rt-thread/src/ipc.c ****  */
 850:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
 851:../src/os/rt-thread/src/ipc.c **** {
 2067              		.loc 2 851 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 24
 2070              		@ frame_needed = 1, uses_anonymous_args = 0
 2071 0b14 80B5     		push	{r7, lr}
 2072              	.LCFI66:
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 0b16 86B0     		sub	sp, sp, #24
 2077              	.LCFI67:
 2078              		.cfi_def_cfa_offset 32
 2079 0b18 00AF     		add	r7, sp, #0
 2080              	.LCFI68:
 2081              		.cfi_def_cfa_register 7
 2082 0b1a F860     		str	r0, [r7, #12]
 2083 0b1c B960     		str	r1, [r7, #8]
 2084 0b1e 1346     		mov	r3, r2
 2085 0b20 FB71     		strb	r3, [r7, #7]
 852:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2086              		.loc 2 852 0
 2087 0b22 FB68     		ldr	r3, [r7, #12]
 2088 0b24 002B     		cmp	r3, #0
 2089 0b26 0DD1     		bne	.L139
 2090              	.LBB25:
 2091              		.loc 2 852 0 is_stmt 0 discriminator 1
 2092 0b28 4FF00003 		mov	r3, #0
 2093 0b2c FB75     		strb	r3, [r7, #23]
 2094 0b2e 1248     		ldr	r0, .L142
 2095 0b30 1249     		ldr	r1, .L142+4
 2096 0b32 134A     		ldr	r2, .L142+8
 2097 0b34 4FF45573 		mov	r3, #852
 2098 0b38 FFF7FEFF 		bl	rt_kprintf
 2099              	.L140:
 2100              		.loc 2 852 0 discriminator 2
 2101 0b3c FB7D     		ldrb	r3, [r7, #23]
 2102 0b3e DBB2     		uxtb	r3, r3
 2103 0b40 002B     		cmp	r3, #0
 2104 0b42 FBD0     		beq	.L140
 2105              	.L139:
 2106              	.LBE25:
 853:../src/os/rt-thread/src/ipc.c **** 
 854:../src/os/rt-thread/src/ipc.c **** 	/* init object */
 855:../src/os/rt-thread/src/ipc.c **** 	rt_object_init(&(event->parent.parent), RT_Object_Class_Event, name);
 2107              		.loc 2 855 0 is_stmt 1
 2108 0b44 FB68     		ldr	r3, [r7, #12]
 2109 0b46 1846     		mov	r0, r3
 2110 0b48 4FF00301 		mov	r1, #3
 2111 0b4c BA68     		ldr	r2, [r7, #8]
 2112 0b4e FFF7FEFF 		bl	rt_object_init
 856:../src/os/rt-thread/src/ipc.c **** 
 857:../src/os/rt-thread/src/ipc.c **** 	/* set parent flag */
 858:../src/os/rt-thread/src/ipc.c **** 	event->parent.parent.flag = flag;
 2113              		.loc 2 858 0
 2114 0b52 FB68     		ldr	r3, [r7, #12]
 2115 0b54 FA79     		ldrb	r2, [r7, #7]
 2116 0b56 DA71     		strb	r2, [r3, #7]
 859:../src/os/rt-thread/src/ipc.c **** 
 860:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 861:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(event->parent));
 2117              		.loc 2 861 0
 2118 0b58 FB68     		ldr	r3, [r7, #12]
 2119 0b5a 1846     		mov	r0, r3
 2120 0b5c FFF78AFA 		bl	rt_ipc_object_init
 862:../src/os/rt-thread/src/ipc.c **** 
 863:../src/os/rt-thread/src/ipc.c **** 	/* init event */
 864:../src/os/rt-thread/src/ipc.c **** 	event->set = 0;
 2121              		.loc 2 864 0
 2122 0b60 FB68     		ldr	r3, [r7, #12]
 2123 0b62 4FF00002 		mov	r2, #0
 2124 0b66 9A61     		str	r2, [r3, #24]
 865:../src/os/rt-thread/src/ipc.c **** 
 866:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 2125              		.loc 2 866 0
 2126 0b68 4FF00003 		mov	r3, #0
 867:../src/os/rt-thread/src/ipc.c **** }
 2127              		.loc 2 867 0
 2128 0b6c 1846     		mov	r0, r3
 2129 0b6e 07F11807 		add	r7, r7, #24
 2130 0b72 BD46     		mov	sp, r7
 2131 0b74 80BD     		pop	{r7, pc}
 2132              	.L143:
 2133 0b76 00BF     		.align	2
 2134              	.L142:
 2135 0b78 00000000 		.word	.LC0
 2136 0b7c 6C000000 		.word	.LC5
 2137 0b80 00020000 		.word	__FUNCTION__.5026
 2138              		.cfi_endproc
 2139              	.LFE24:
 2141              		.align	2
 2142              		.global	rt_event_detach
 2143              		.thumb
 2144              		.thumb_func
 2146              	rt_event_detach:
 2147              	.LFB25:
 868:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_init);
 869:../src/os/rt-thread/src/ipc.c **** 
 870:../src/os/rt-thread/src/ipc.c **** /**
 871:../src/os/rt-thread/src/ipc.c ****  * This function will detach an event object from resource management
 872:../src/os/rt-thread/src/ipc.c ****  *
 873:../src/os/rt-thread/src/ipc.c ****  * @param event the event object
 874:../src/os/rt-thread/src/ipc.c ****  *
 875:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 876:../src/os/rt-thread/src/ipc.c ****  */
 877:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_detach(rt_event_t event)
 878:../src/os/rt-thread/src/ipc.c **** {
 2148              		.loc 2 878 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 16
 2151              		@ frame_needed = 1, uses_anonymous_args = 0
 2152 0b84 80B5     		push	{r7, lr}
 2153              	.LCFI69:
 2154              		.cfi_def_cfa_offset 8
 2155              		.cfi_offset 7, -8
 2156              		.cfi_offset 14, -4
 2157 0b86 84B0     		sub	sp, sp, #16
 2158              	.LCFI70:
 2159              		.cfi_def_cfa_offset 24
 2160 0b88 00AF     		add	r7, sp, #0
 2161              	.LCFI71:
 2162              		.cfi_def_cfa_register 7
 2163 0b8a 7860     		str	r0, [r7, #4]
 879:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
 880:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2164              		.loc 2 880 0
 2165 0b8c 7B68     		ldr	r3, [r7, #4]
 2166 0b8e 002B     		cmp	r3, #0
 2167 0b90 0DD1     		bne	.L145
 2168              	.LBB26:
 2169              		.loc 2 880 0 is_stmt 0 discriminator 1
 2170 0b92 4FF00003 		mov	r3, #0
 2171 0b96 FB73     		strb	r3, [r7, #15]
 2172 0b98 0D48     		ldr	r0, .L148
 2173 0b9a 0E49     		ldr	r1, .L148+4
 2174 0b9c 0E4A     		ldr	r2, .L148+8
 2175 0b9e 4FF45C73 		mov	r3, #880
 2176 0ba2 FFF7FEFF 		bl	rt_kprintf
 2177              	.L146:
 2178              		.loc 2 880 0 discriminator 2
 2179 0ba6 FB7B     		ldrb	r3, [r7, #15]
 2180 0ba8 DBB2     		uxtb	r3, r3
 2181 0baa 002B     		cmp	r3, #0
 2182 0bac FBD0     		beq	.L146
 2183              	.L145:
 2184              	.LBE26:
 881:../src/os/rt-thread/src/ipc.c **** 
 882:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
 883:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(event->parent.suspend_thread));
 2185              		.loc 2 883 0 is_stmt 1
 2186 0bae 7B68     		ldr	r3, [r7, #4]
 2187 0bb0 03F11003 		add	r3, r3, #16
 2188 0bb4 1846     		mov	r0, r3
 2189 0bb6 FFF7D1FA 		bl	rt_ipc_list_resume_all
 884:../src/os/rt-thread/src/ipc.c **** 
 885:../src/os/rt-thread/src/ipc.c **** 	/* detach event object */
 886:../src/os/rt-thread/src/ipc.c **** 	rt_object_detach(&(event->parent.parent));
 2190              		.loc 2 886 0
 2191 0bba 7B68     		ldr	r3, [r7, #4]
 2192 0bbc 1846     		mov	r0, r3
 2193 0bbe FFF7FEFF 		bl	rt_object_detach
 887:../src/os/rt-thread/src/ipc.c **** 
 888:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 2194              		.loc 2 888 0
 2195 0bc2 4FF00003 		mov	r3, #0
 889:../src/os/rt-thread/src/ipc.c **** }
 2196              		.loc 2 889 0
 2197 0bc6 1846     		mov	r0, r3
 2198 0bc8 07F11007 		add	r7, r7, #16
 2199 0bcc BD46     		mov	sp, r7
 2200 0bce 80BD     		pop	{r7, pc}
 2201              	.L149:
 2202              		.align	2
 2203              	.L148:
 2204 0bd0 00000000 		.word	.LC0
 2205 0bd4 6C000000 		.word	.LC5
 2206 0bd8 F0010000 		.word	__FUNCTION__.5034
 2207              		.cfi_endproc
 2208              	.LFE25:
 2210              		.align	2
 2211              		.global	rt_event_create
 2212              		.thumb
 2213              		.thumb_func
 2215              	rt_event_create:
 2216              	.LFB26:
 890:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_detach);
 891:../src/os/rt-thread/src/ipc.c **** 
 892:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HEAP
 893:../src/os/rt-thread/src/ipc.c **** /**
 894:../src/os/rt-thread/src/ipc.c ****  * This function will create an event object from system resource
 895:../src/os/rt-thread/src/ipc.c ****  *
 896:../src/os/rt-thread/src/ipc.c ****  * @param name the name of event
 897:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of event
 898:../src/os/rt-thread/src/ipc.c ****  *
 899:../src/os/rt-thread/src/ipc.c ****  * @return the created event, RT_NULL on error happen
 900:../src/os/rt-thread/src/ipc.c ****  */
 901:../src/os/rt-thread/src/ipc.c **** rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
 902:../src/os/rt-thread/src/ipc.c **** {
 2217              		.loc 2 902 0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 24
 2220              		@ frame_needed = 1, uses_anonymous_args = 0
 2221 0bdc 80B5     		push	{r7, lr}
 2222              	.LCFI72:
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 7, -8
 2225              		.cfi_offset 14, -4
 2226 0bde 86B0     		sub	sp, sp, #24
 2227              	.LCFI73:
 2228              		.cfi_def_cfa_offset 32
 2229 0be0 00AF     		add	r7, sp, #0
 2230              	.LCFI74:
 2231              		.cfi_def_cfa_register 7
 2232 0be2 7860     		str	r0, [r7, #4]
 2233 0be4 0B46     		mov	r3, r1
 2234 0be6 FB70     		strb	r3, [r7, #3]
 2235              	.LBB27:
 903:../src/os/rt-thread/src/ipc.c **** 	rt_event_t event;
 904:../src/os/rt-thread/src/ipc.c **** 
 905:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 2236              		.loc 2 905 0
 2237 0be8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2238 0bec 7861     		str	r0, [r7, #20]
 2239 0bee FFF7FEFF 		bl	rt_interrupt_get_nest
 2240 0bf2 0346     		mov	r3, r0
 2241 0bf4 002B     		cmp	r3, #0
 2242 0bf6 11D0     		beq	.L151
 2243              		.loc 2 905 0 is_stmt 0 discriminator 1
 2244 0bf8 1848     		ldr	r0, .L155
 2245 0bfa 1949     		ldr	r1, .L155+4
 2246 0bfc FFF7FEFF 		bl	rt_kprintf
 2247              	.LBB28:
 2248 0c00 4FF00003 		mov	r3, #0
 2249 0c04 FB73     		strb	r3, [r7, #15]
 2250 0c06 1748     		ldr	r0, .L155+8
 2251 0c08 1749     		ldr	r1, .L155+12
 2252 0c0a 154A     		ldr	r2, .L155+4
 2253 0c0c 40F28933 		movw	r3, #905
 2254 0c10 FFF7FEFF 		bl	rt_kprintf
 2255              	.L152:
 2256              		.loc 2 905 0 discriminator 4
 2257 0c14 FB7B     		ldrb	r3, [r7, #15]
 2258 0c16 DBB2     		uxtb	r3, r3
 2259 0c18 002B     		cmp	r3, #0
 2260 0c1a FBD0     		beq	.L152
 2261              	.L151:
 2262              	.LBE28:
 2263              		.loc 2 905 0 discriminator 2
 2264 0c1c 7869     		ldr	r0, [r7, #20]
 2265 0c1e FFF7FEFF 		bl	rt_hw_interrupt_enable
 2266              	.LBE27:
 906:../src/os/rt-thread/src/ipc.c **** 
 907:../src/os/rt-thread/src/ipc.c **** 	/* allocate object */
 908:../src/os/rt-thread/src/ipc.c **** 	event = (rt_event_t)rt_object_allocate(RT_Object_Class_Event, name);
 2267              		.loc 2 908 0 is_stmt 1 discriminator 2
 2268 0c22 4FF00300 		mov	r0, #3
 2269 0c26 7968     		ldr	r1, [r7, #4]
 2270 0c28 FFF7FEFF 		bl	rt_object_allocate
 2271 0c2c 3861     		str	r0, [r7, #16]
 909:../src/os/rt-thread/src/ipc.c **** 	if (event == RT_NULL)
 2272              		.loc 2 909 0 discriminator 2
 2273 0c2e 3B69     		ldr	r3, [r7, #16]
 2274 0c30 002B     		cmp	r3, #0
 2275 0c32 01D1     		bne	.L153
 910:../src/os/rt-thread/src/ipc.c **** 		return event;
 2276              		.loc 2 910 0
 2277 0c34 3B69     		ldr	r3, [r7, #16]
 2278 0c36 0BE0     		b	.L154
 2279              	.L153:
 911:../src/os/rt-thread/src/ipc.c **** 
 912:../src/os/rt-thread/src/ipc.c **** 	/* set parent */
 913:../src/os/rt-thread/src/ipc.c **** 	event->parent.parent.flag = flag;
 2280              		.loc 2 913 0
 2281 0c38 3B69     		ldr	r3, [r7, #16]
 2282 0c3a FA78     		ldrb	r2, [r7, #3]
 2283 0c3c DA71     		strb	r2, [r3, #7]
 914:../src/os/rt-thread/src/ipc.c **** 
 915:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
 916:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(event->parent));
 2284              		.loc 2 916 0
 2285 0c3e 3B69     		ldr	r3, [r7, #16]
 2286 0c40 1846     		mov	r0, r3
 2287 0c42 FFF717FA 		bl	rt_ipc_object_init
 917:../src/os/rt-thread/src/ipc.c **** 
 918:../src/os/rt-thread/src/ipc.c **** 	/* init event */
 919:../src/os/rt-thread/src/ipc.c **** 	event->set = 0;
 2288              		.loc 2 919 0
 2289 0c46 3B69     		ldr	r3, [r7, #16]
 2290 0c48 4FF00002 		mov	r2, #0
 2291 0c4c 9A61     		str	r2, [r3, #24]
 920:../src/os/rt-thread/src/ipc.c **** 
 921:../src/os/rt-thread/src/ipc.c **** 	return event;
 2292              		.loc 2 921 0
 2293 0c4e 3B69     		ldr	r3, [r7, #16]
 2294              	.L154:
 922:../src/os/rt-thread/src/ipc.c **** }
 2295              		.loc 2 922 0
 2296 0c50 1846     		mov	r0, r3
 2297 0c52 07F11807 		add	r7, r7, #24
 2298 0c56 BD46     		mov	sp, r7
 2299 0c58 80BD     		pop	{r7, pc}
 2300              	.L156:
 2301 0c5a 00BF     		.align	2
 2302              	.L155:
 2303 0c5c 30000000 		.word	.LC2
 2304 0c60 E0010000 		.word	__FUNCTION__.5044
 2305 0c64 00000000 		.word	.LC0
 2306 0c68 54000000 		.word	.LC3
 2307              		.cfi_endproc
 2308              	.LFE26:
 2310              		.align	2
 2311              		.global	rt_event_delete
 2312              		.thumb
 2313              		.thumb_func
 2315              	rt_event_delete:
 2316              	.LFB27:
 923:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_create);
 924:../src/os/rt-thread/src/ipc.c **** 
 925:../src/os/rt-thread/src/ipc.c **** /**
 926:../src/os/rt-thread/src/ipc.c ****  * This function will delete an event object and release the memory
 927:../src/os/rt-thread/src/ipc.c ****  *
 928:../src/os/rt-thread/src/ipc.c ****  * @param event the event object
 929:../src/os/rt-thread/src/ipc.c ****  *
 930:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 931:../src/os/rt-thread/src/ipc.c ****  */
 932:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_delete(rt_event_t event)
 933:../src/os/rt-thread/src/ipc.c **** {
 2317              		.loc 2 933 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 16
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0c6c 80B5     		push	{r7, lr}
 2322              	.LCFI75:
 2323              		.cfi_def_cfa_offset 8
 2324              		.cfi_offset 7, -8
 2325              		.cfi_offset 14, -4
 2326 0c6e 84B0     		sub	sp, sp, #16
 2327              	.LCFI76:
 2328              		.cfi_def_cfa_offset 24
 2329 0c70 00AF     		add	r7, sp, #0
 2330              	.LCFI77:
 2331              		.cfi_def_cfa_register 7
 2332 0c72 7860     		str	r0, [r7, #4]
 934:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
 935:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2333              		.loc 2 935 0
 2334 0c74 7B68     		ldr	r3, [r7, #4]
 2335 0c76 002B     		cmp	r3, #0
 2336 0c78 0DD1     		bne	.L158
 2337              	.LBB29:
 2338              		.loc 2 935 0 is_stmt 0 discriminator 1
 2339 0c7a 4FF00003 		mov	r3, #0
 2340 0c7e FB72     		strb	r3, [r7, #11]
 2341 0c80 1C48     		ldr	r0, .L163
 2342 0c82 1D49     		ldr	r1, .L163+4
 2343 0c84 1D4A     		ldr	r2, .L163+8
 2344 0c86 40F2A733 		movw	r3, #935
 2345 0c8a FFF7FEFF 		bl	rt_kprintf
 2346              	.L159:
 2347              		.loc 2 935 0 discriminator 2
 2348 0c8e FB7A     		ldrb	r3, [r7, #11]
 2349 0c90 DBB2     		uxtb	r3, r3
 2350 0c92 002B     		cmp	r3, #0
 2351 0c94 FBD0     		beq	.L159
 2352              	.L158:
 2353              	.LBE29:
 2354              	.LBB30:
 936:../src/os/rt-thread/src/ipc.c **** 
 937:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 2355              		.loc 2 937 0 is_stmt 1
 2356 0c96 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2357 0c9a F860     		str	r0, [r7, #12]
 2358 0c9c FFF7FEFF 		bl	rt_interrupt_get_nest
 2359 0ca0 0346     		mov	r3, r0
 2360 0ca2 002B     		cmp	r3, #0
 2361 0ca4 11D0     		beq	.L160
 2362              		.loc 2 937 0 is_stmt 0 discriminator 1
 2363 0ca6 1648     		ldr	r0, .L163+12
 2364 0ca8 1449     		ldr	r1, .L163+8
 2365 0caa FFF7FEFF 		bl	rt_kprintf
 2366              	.LBB31:
 2367 0cae 4FF00003 		mov	r3, #0
 2368 0cb2 BB72     		strb	r3, [r7, #10]
 2369 0cb4 0F48     		ldr	r0, .L163
 2370 0cb6 1349     		ldr	r1, .L163+16
 2371 0cb8 104A     		ldr	r2, .L163+8
 2372 0cba 40F2A933 		movw	r3, #937
 2373 0cbe FFF7FEFF 		bl	rt_kprintf
 2374              	.L161:
 2375              		.loc 2 937 0 discriminator 4
 2376 0cc2 BB7A     		ldrb	r3, [r7, #10]
 2377 0cc4 DBB2     		uxtb	r3, r3
 2378 0cc6 002B     		cmp	r3, #0
 2379 0cc8 FBD0     		beq	.L161
 2380              	.L160:
 2381              	.LBE31:
 2382              		.loc 2 937 0 discriminator 2
 2383 0cca F868     		ldr	r0, [r7, #12]
 2384 0ccc FFF7FEFF 		bl	rt_hw_interrupt_enable
 2385              	.LBE30:
 938:../src/os/rt-thread/src/ipc.c **** 
 939:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
 940:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(event->parent.suspend_thread));
 2386              		.loc 2 940 0 is_stmt 1 discriminator 2
 2387 0cd0 7B68     		ldr	r3, [r7, #4]
 2388 0cd2 03F11003 		add	r3, r3, #16
 2389 0cd6 1846     		mov	r0, r3
 2390 0cd8 FFF740FA 		bl	rt_ipc_list_resume_all
 941:../src/os/rt-thread/src/ipc.c **** 
 942:../src/os/rt-thread/src/ipc.c **** 	/* delete event object */
 943:../src/os/rt-thread/src/ipc.c **** 	rt_object_delete(&(event->parent.parent));
 2391              		.loc 2 943 0 discriminator 2
 2392 0cdc 7B68     		ldr	r3, [r7, #4]
 2393 0cde 1846     		mov	r0, r3
 2394 0ce0 FFF7FEFF 		bl	rt_object_delete
 944:../src/os/rt-thread/src/ipc.c **** 
 945:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 2395              		.loc 2 945 0 discriminator 2
 2396 0ce4 4FF00003 		mov	r3, #0
 946:../src/os/rt-thread/src/ipc.c **** }
 2397              		.loc 2 946 0 discriminator 2
 2398 0ce8 1846     		mov	r0, r3
 2399 0cea 07F11007 		add	r7, r7, #16
 2400 0cee BD46     		mov	sp, r7
 2401 0cf0 80BD     		pop	{r7, pc}
 2402              	.L164:
 2403 0cf2 00BF     		.align	2
 2404              	.L163:
 2405 0cf4 00000000 		.word	.LC0
 2406 0cf8 6C000000 		.word	.LC5
 2407 0cfc D0010000 		.word	__FUNCTION__.5053
 2408 0d00 30000000 		.word	.LC2
 2409 0d04 54000000 		.word	.LC3
 2410              		.cfi_endproc
 2411              	.LFE27:
 2413              		.align	2
 2414              		.global	rt_event_send
 2415              		.thumb
 2416              		.thumb_func
 2418              	rt_event_send:
 2419              	.LFB28:
 947:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_delete);
 948:../src/os/rt-thread/src/ipc.c **** #endif
 949:../src/os/rt-thread/src/ipc.c **** 
 950:../src/os/rt-thread/src/ipc.c **** /**
 951:../src/os/rt-thread/src/ipc.c ****  * This function will send an event to the event object, if there are threads
 952:../src/os/rt-thread/src/ipc.c ****  * suspended on event object, it will be waked up.
 953:../src/os/rt-thread/src/ipc.c ****  *
 954:../src/os/rt-thread/src/ipc.c ****  * @param event the event object
 955:../src/os/rt-thread/src/ipc.c ****  * @param set the event set
 956:../src/os/rt-thread/src/ipc.c ****  *
 957:../src/os/rt-thread/src/ipc.c ****  * @return the error code
 958:../src/os/rt-thread/src/ipc.c ****  */
 959:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
 960:../src/os/rt-thread/src/ipc.c **** {
 2420              		.loc 2 960 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 24
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424 0d08 B0B5     		push	{r4, r5, r7, lr}
 2425              	.LCFI78:
 2426              		.cfi_def_cfa_offset 16
 2427              		.cfi_offset 4, -16
 2428              		.cfi_offset 5, -12
 2429              		.cfi_offset 7, -8
 2430              		.cfi_offset 14, -4
 2431 0d0a 86B0     		sub	sp, sp, #24
 2432              	.LCFI79:
 2433              		.cfi_def_cfa_offset 40
 2434 0d0c 00AF     		add	r7, sp, #0
 2435              	.LCFI80:
 2436              		.cfi_def_cfa_register 7
 2437 0d0e 7860     		str	r0, [r7, #4]
 2438 0d10 3960     		str	r1, [r7, #0]
 961:../src/os/rt-thread/src/ipc.c **** 	struct rt_list_node *n;
 962:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
 963:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t level;
 964:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t status;
 965:../src/os/rt-thread/src/ipc.c **** 	rt_bool_t need_schedule;
 966:../src/os/rt-thread/src/ipc.c **** 
 967:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
 968:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2439              		.loc 2 968 0
 2440 0d12 7B68     		ldr	r3, [r7, #4]
 2441 0d14 002B     		cmp	r3, #0
 2442 0d16 0DD1     		bne	.L166
 2443              	.LBB32:
 2444              		.loc 2 968 0 is_stmt 0 discriminator 1
 2445 0d18 4FF00003 		mov	r3, #0
 2446 0d1c FB72     		strb	r3, [r7, #11]
 2447 0d1e 4A48     		ldr	r0, .L178
 2448 0d20 4A49     		ldr	r1, .L178+4
 2449 0d22 4B4A     		ldr	r2, .L178+8
 2450 0d24 4FF47273 		mov	r3, #968
 2451 0d28 FFF7FEFF 		bl	rt_kprintf
 2452              	.L167:
 2453              		.loc 2 968 0 discriminator 2
 2454 0d2c FB7A     		ldrb	r3, [r7, #11]
 2455 0d2e DBB2     		uxtb	r3, r3
 2456 0d30 002B     		cmp	r3, #0
 2457 0d32 FBD0     		beq	.L167
 2458              	.L166:
 2459              	.LBE32:
 969:../src/os/rt-thread/src/ipc.c **** 	if (set == 0)
 2460              		.loc 2 969 0 is_stmt 1
 2461 0d34 3B68     		ldr	r3, [r7, #0]
 2462 0d36 002B     		cmp	r3, #0
 2463 0d38 02D1     		bne	.L168
 970:../src/os/rt-thread/src/ipc.c **** 		return -RT_ERROR;
 2464              		.loc 2 970 0
 2465 0d3a 4FF0FF33 		mov	r3, #-1
 2466 0d3e 7EE0     		b	.L169
 2467              	.L168:
 971:../src/os/rt-thread/src/ipc.c **** 
 972:../src/os/rt-thread/src/ipc.c **** 	need_schedule = RT_FALSE;
 2468              		.loc 2 972 0
 2469 0d40 4FF00003 		mov	r3, #0
 2470 0d44 3B61     		str	r3, [r7, #16]
 973:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(event->parent.parent)));
 2471              		.loc 2 973 0
 2472 0d46 434B     		ldr	r3, .L178+12
 2473 0d48 1B68     		ldr	r3, [r3, #0]
 2474 0d4a 002B     		cmp	r3, #0
 2475 0d4c 04D0     		beq	.L170
 2476              		.loc 2 973 0 is_stmt 0 discriminator 1
 2477 0d4e 414B     		ldr	r3, .L178+12
 2478 0d50 1B68     		ldr	r3, [r3, #0]
 2479 0d52 7A68     		ldr	r2, [r7, #4]
 2480 0d54 1046     		mov	r0, r2
 2481 0d56 9847     		blx	r3
 2482              	.L170:
 974:../src/os/rt-thread/src/ipc.c **** 
 975:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
 976:../src/os/rt-thread/src/ipc.c **** 	level = rt_hw_interrupt_disable();
 2483              		.loc 2 976 0 is_stmt 1
 2484 0d58 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2485 0d5c 0346     		mov	r3, r0
 2486 0d5e 1D46     		mov	r5, r3
 977:../src/os/rt-thread/src/ipc.c **** 
 978:../src/os/rt-thread/src/ipc.c **** 	/* set event */
 979:../src/os/rt-thread/src/ipc.c **** 	event->set |= set;
 2487              		.loc 2 979 0
 2488 0d60 7B68     		ldr	r3, [r7, #4]
 2489 0d62 9A69     		ldr	r2, [r3, #24]
 2490 0d64 3B68     		ldr	r3, [r7, #0]
 2491 0d66 1A43     		orrs	r2, r2, r3
 2492 0d68 7B68     		ldr	r3, [r7, #4]
 2493 0d6a 9A61     		str	r2, [r3, #24]
 980:../src/os/rt-thread/src/ipc.c **** 
 981:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&event->parent.suspend_thread))
 2494              		.loc 2 981 0
 2495 0d6c 7B68     		ldr	r3, [r7, #4]
 2496 0d6e 03F11003 		add	r3, r3, #16
 2497 0d72 1846     		mov	r0, r3
 2498 0d74 FFF76CF9 		bl	rt_list_isempty
 2499 0d78 0346     		mov	r3, r0
 2500 0d7a 002B     		cmp	r3, #0
 2501 0d7c 54D1     		bne	.L171
 982:../src/os/rt-thread/src/ipc.c **** 	{
 983:../src/os/rt-thread/src/ipc.c **** 		/* search thread list to resume thread */
 984:../src/os/rt-thread/src/ipc.c **** 		n = event->parent.suspend_thread.next;
 2502              		.loc 2 984 0
 2503 0d7e 7B68     		ldr	r3, [r7, #4]
 2504 0d80 1B69     		ldr	r3, [r3, #16]
 2505 0d82 7B61     		str	r3, [r7, #20]
 985:../src/os/rt-thread/src/ipc.c **** 		while (n != &(event->parent.suspend_thread))
 2506              		.loc 2 985 0
 2507 0d84 4AE0     		b	.L172
 2508              	.L176:
 986:../src/os/rt-thread/src/ipc.c **** 		{
 987:../src/os/rt-thread/src/ipc.c **** 			/* get thread */
 988:../src/os/rt-thread/src/ipc.c **** 			thread = rt_list_entry(n, struct rt_thread, tlist);
 2509              		.loc 2 988 0
 2510 0d86 7B69     		ldr	r3, [r7, #20]
 2511 0d88 A3F11003 		sub	r3, r3, #16
 2512 0d8c FB60     		str	r3, [r7, #12]
 989:../src/os/rt-thread/src/ipc.c **** 
 990:../src/os/rt-thread/src/ipc.c **** 			status = -RT_ERROR;
 2513              		.loc 2 990 0
 2514 0d8e 4FF0FF34 		mov	r4, #-1
 991:../src/os/rt-thread/src/ipc.c **** 			if (thread->event_info & RT_EVENT_FLAG_AND)
 2515              		.loc 2 991 0
 2516 0d92 FB68     		ldr	r3, [r7, #12]
 2517 0d94 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2518 0d98 03F00103 		and	r3, r3, #1
 2519 0d9c 002B     		cmp	r3, #0
 2520 0d9e 0BD0     		beq	.L173
 992:../src/os/rt-thread/src/ipc.c **** 			{
 993:../src/os/rt-thread/src/ipc.c **** 				if ((thread->event_set & event->set) == thread->event_set)
 2521              		.loc 2 993 0
 2522 0da0 FB68     		ldr	r3, [r7, #12]
 2523 0da2 9A6B     		ldr	r2, [r3, #56]
 2524 0da4 7B68     		ldr	r3, [r7, #4]
 2525 0da6 9B69     		ldr	r3, [r3, #24]
 2526 0da8 1A40     		ands	r2, r2, r3
 2527 0daa FB68     		ldr	r3, [r7, #12]
 2528 0dac 9B6B     		ldr	r3, [r3, #56]
 2529 0dae 9A42     		cmp	r2, r3
 2530 0db0 19D1     		bne	.L174
 994:../src/os/rt-thread/src/ipc.c **** 				{
 995:../src/os/rt-thread/src/ipc.c **** 					/* received an AND event */
 996:../src/os/rt-thread/src/ipc.c **** 					status = RT_EOK;
 2531              		.loc 2 996 0
 2532 0db2 4FF00004 		mov	r4, #0
 2533 0db6 16E0     		b	.L174
 2534              	.L173:
 997:../src/os/rt-thread/src/ipc.c **** 				}
 998:../src/os/rt-thread/src/ipc.c **** 			}
 999:../src/os/rt-thread/src/ipc.c **** 			else if (thread->event_info & RT_EVENT_FLAG_OR)
 2535              		.loc 2 999 0
 2536 0db8 FB68     		ldr	r3, [r7, #12]
 2537 0dba 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2538 0dbe 03F00203 		and	r3, r3, #2
 2539 0dc2 002B     		cmp	r3, #0
 2540 0dc4 0FD0     		beq	.L174
1000:../src/os/rt-thread/src/ipc.c **** 			{
1001:../src/os/rt-thread/src/ipc.c **** 				if (thread->event_set & event->set)
 2541              		.loc 2 1001 0
 2542 0dc6 FB68     		ldr	r3, [r7, #12]
 2543 0dc8 9A6B     		ldr	r2, [r3, #56]
 2544 0dca 7B68     		ldr	r3, [r7, #4]
 2545 0dcc 9B69     		ldr	r3, [r3, #24]
 2546 0dce 1340     		ands	r3, r3, r2
 2547 0dd0 002B     		cmp	r3, #0
 2548 0dd2 08D0     		beq	.L174
1002:../src/os/rt-thread/src/ipc.c **** 				{
1003:../src/os/rt-thread/src/ipc.c **** 					/* save recieved event set */
1004:../src/os/rt-thread/src/ipc.c **** 					thread->event_set = thread->event_set & event->set;
 2549              		.loc 2 1004 0
 2550 0dd4 FB68     		ldr	r3, [r7, #12]
 2551 0dd6 9A6B     		ldr	r2, [r3, #56]
 2552 0dd8 7B68     		ldr	r3, [r7, #4]
 2553 0dda 9B69     		ldr	r3, [r3, #24]
 2554 0ddc 1A40     		ands	r2, r2, r3
 2555 0dde FB68     		ldr	r3, [r7, #12]
 2556 0de0 9A63     		str	r2, [r3, #56]
1005:../src/os/rt-thread/src/ipc.c **** 
1006:../src/os/rt-thread/src/ipc.c **** 					/* received an OR event */
1007:../src/os/rt-thread/src/ipc.c **** 					status = RT_EOK;
 2557              		.loc 2 1007 0
 2558 0de2 4FF00004 		mov	r4, #0
 2559              	.L174:
1008:../src/os/rt-thread/src/ipc.c **** 				}
1009:../src/os/rt-thread/src/ipc.c **** 			}
1010:../src/os/rt-thread/src/ipc.c **** 
1011:../src/os/rt-thread/src/ipc.c **** 			/* move node to the next */
1012:../src/os/rt-thread/src/ipc.c **** 			n = n->next;
 2560              		.loc 2 1012 0
 2561 0de6 7B69     		ldr	r3, [r7, #20]
 2562 0de8 1B68     		ldr	r3, [r3, #0]
 2563 0dea 7B61     		str	r3, [r7, #20]
1013:../src/os/rt-thread/src/ipc.c **** 
1014:../src/os/rt-thread/src/ipc.c **** 			/* condition is satisfied, resume thread */
1015:../src/os/rt-thread/src/ipc.c **** 			if (status == RT_EOK)
 2564              		.loc 2 1015 0
 2565 0dec 002C     		cmp	r4, #0
 2566 0dee 15D1     		bne	.L172
1016:../src/os/rt-thread/src/ipc.c **** 			{
1017:../src/os/rt-thread/src/ipc.c **** 				/* clear event */
1018:../src/os/rt-thread/src/ipc.c **** 				if (thread->event_info & RT_EVENT_FLAG_CLEAR)
 2567              		.loc 2 1018 0
 2568 0df0 FB68     		ldr	r3, [r7, #12]
 2569 0df2 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2570 0df6 03F00403 		and	r3, r3, #4
 2571 0dfa 002B     		cmp	r3, #0
 2572 0dfc 08D0     		beq	.L175
1019:../src/os/rt-thread/src/ipc.c **** 					event->set &= ~thread->event_set;
 2573              		.loc 2 1019 0
 2574 0dfe 7B68     		ldr	r3, [r7, #4]
 2575 0e00 9A69     		ldr	r2, [r3, #24]
 2576 0e02 FB68     		ldr	r3, [r7, #12]
 2577 0e04 9B6B     		ldr	r3, [r3, #56]
 2578 0e06 6FEA0303 		mvn	r3, r3
 2579 0e0a 1A40     		ands	r2, r2, r3
 2580 0e0c 7B68     		ldr	r3, [r7, #4]
 2581 0e0e 9A61     		str	r2, [r3, #24]
 2582              	.L175:
1020:../src/os/rt-thread/src/ipc.c **** 
1021:../src/os/rt-thread/src/ipc.c **** 				/* resume thread, and thread list breaks out */
1022:../src/os/rt-thread/src/ipc.c **** 				rt_thread_resume(thread);
 2583              		.loc 2 1022 0
 2584 0e10 F868     		ldr	r0, [r7, #12]
 2585 0e12 FFF7FEFF 		bl	rt_thread_resume
1023:../src/os/rt-thread/src/ipc.c **** 
1024:../src/os/rt-thread/src/ipc.c **** 				/* need do a scheduling */
1025:../src/os/rt-thread/src/ipc.c **** 				need_schedule = RT_TRUE;
 2586              		.loc 2 1025 0
 2587 0e16 4FF00103 		mov	r3, #1
 2588 0e1a 3B61     		str	r3, [r7, #16]
 2589              	.L172:
 985:../src/os/rt-thread/src/ipc.c **** 		while (n != &(event->parent.suspend_thread))
 2590              		.loc 2 985 0 discriminator 1
 2591 0e1c 7B68     		ldr	r3, [r7, #4]
 2592 0e1e 03F11002 		add	r2, r3, #16
 2593 0e22 7B69     		ldr	r3, [r7, #20]
 2594 0e24 9A42     		cmp	r2, r3
 2595 0e26 AED1     		bne	.L176
 2596              	.L171:
1026:../src/os/rt-thread/src/ipc.c **** 			}
1027:../src/os/rt-thread/src/ipc.c **** 		}
1028:../src/os/rt-thread/src/ipc.c **** 	}
1029:../src/os/rt-thread/src/ipc.c **** 
1030:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1031:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(level);
 2597              		.loc 2 1031 0
 2598 0e28 2B46     		mov	r3, r5
 2599 0e2a 1846     		mov	r0, r3
 2600 0e2c FFF7FEFF 		bl	rt_hw_interrupt_enable
1032:../src/os/rt-thread/src/ipc.c **** 
1033:../src/os/rt-thread/src/ipc.c **** 	/* do a schedule */
1034:../src/os/rt-thread/src/ipc.c **** 	if (need_schedule == RT_TRUE)
 2601              		.loc 2 1034 0
 2602 0e30 3B69     		ldr	r3, [r7, #16]
 2603 0e32 012B     		cmp	r3, #1
 2604 0e34 01D1     		bne	.L177
1035:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 2605              		.loc 2 1035 0
 2606 0e36 FFF7FEFF 		bl	rt_schedule
 2607              	.L177:
1036:../src/os/rt-thread/src/ipc.c **** 
1037:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 2608              		.loc 2 1037 0
 2609 0e3a 4FF00003 		mov	r3, #0
 2610              	.L169:
1038:../src/os/rt-thread/src/ipc.c **** }
 2611              		.loc 2 1038 0
 2612 0e3e 1846     		mov	r0, r3
 2613 0e40 07F11807 		add	r7, r7, #24
 2614 0e44 BD46     		mov	sp, r7
 2615 0e46 B0BD     		pop	{r4, r5, r7, pc}
 2616              	.L179:
 2617              		.align	2
 2618              	.L178:
 2619 0e48 00000000 		.word	.LC0
 2620 0e4c 6C000000 		.word	.LC5
 2621 0e50 C0010000 		.word	__FUNCTION__.5072
 2622 0e54 00000000 		.word	rt_object_put_hook
 2623              		.cfi_endproc
 2624              	.LFE28:
 2626              		.align	2
 2627              		.global	rt_event_recv
 2628              		.thumb
 2629              		.thumb_func
 2631              	rt_event_recv:
 2632              	.LFB29:
1039:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_send);
1040:../src/os/rt-thread/src/ipc.c **** 
1041:../src/os/rt-thread/src/ipc.c **** /**
1042:../src/os/rt-thread/src/ipc.c ****  * This function will receive an event from event object, if the event is unavailable,
1043:../src/os/rt-thread/src/ipc.c ****  * the thread shall wait for a specified time.
1044:../src/os/rt-thread/src/ipc.c ****  *
1045:../src/os/rt-thread/src/ipc.c ****  * @param event the fast event object
1046:../src/os/rt-thread/src/ipc.c ****  * @param set the interested event set
1047:../src/os/rt-thread/src/ipc.c ****  * @param option the receive option
1048:../src/os/rt-thread/src/ipc.c ****  * @param timeout the waiting time
1049:../src/os/rt-thread/src/ipc.c ****  * @param recved the received event
1050:../src/os/rt-thread/src/ipc.c ****  *
1051:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1052:../src/os/rt-thread/src/ipc.c ****  */
1053:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_recv(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt
1054:../src/os/rt-thread/src/ipc.c **** {
 2633              		.loc 2 1054 0
 2634              		.cfi_startproc
 2635              		@ args = 4, pretend = 0, frame = 32
 2636              		@ frame_needed = 1, uses_anonymous_args = 0
 2637 0e58 B0B5     		push	{r4, r5, r7, lr}
 2638              	.LCFI81:
 2639              		.cfi_def_cfa_offset 16
 2640              		.cfi_offset 4, -16
 2641              		.cfi_offset 5, -12
 2642              		.cfi_offset 7, -8
 2643              		.cfi_offset 14, -4
 2644 0e5a 88B0     		sub	sp, sp, #32
 2645              	.LCFI82:
 2646              		.cfi_def_cfa_offset 48
 2647 0e5c 00AF     		add	r7, sp, #0
 2648              	.LCFI83:
 2649              		.cfi_def_cfa_register 7
 2650 0e5e F860     		str	r0, [r7, #12]
 2651 0e60 B960     		str	r1, [r7, #8]
 2652 0e62 3B60     		str	r3, [r7, #0]
 2653 0e64 1346     		mov	r3, r2
 2654 0e66 FB71     		strb	r3, [r7, #7]
 2655              	.LBB33:
1055:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
1056:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t level;
1057:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t status;
1058:../src/os/rt-thread/src/ipc.c **** 
1059:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 2656              		.loc 2 1059 0
 2657 0e68 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2658 0e6c F861     		str	r0, [r7, #28]
 2659 0e6e FFF7FEFF 		bl	rt_interrupt_get_nest
 2660 0e72 0346     		mov	r3, r0
 2661 0e74 002B     		cmp	r3, #0
 2662 0e76 11D0     		beq	.L181
 2663              		.loc 2 1059 0 is_stmt 0 discriminator 1
 2664 0e78 6448     		ldr	r0, .L196
 2665 0e7a 6549     		ldr	r1, .L196+4
 2666 0e7c FFF7FEFF 		bl	rt_kprintf
 2667              	.LBB34:
 2668 0e80 4FF00003 		mov	r3, #0
 2669 0e84 FB75     		strb	r3, [r7, #23]
 2670 0e86 6348     		ldr	r0, .L196+8
 2671 0e88 6349     		ldr	r1, .L196+12
 2672 0e8a 614A     		ldr	r2, .L196+4
 2673 0e8c 40F22343 		movw	r3, #1059
 2674 0e90 FFF7FEFF 		bl	rt_kprintf
 2675              	.L182:
 2676              		.loc 2 1059 0 discriminator 4
 2677 0e94 FB7D     		ldrb	r3, [r7, #23]
 2678 0e96 DBB2     		uxtb	r3, r3
 2679 0e98 002B     		cmp	r3, #0
 2680 0e9a FBD0     		beq	.L182
 2681              	.L181:
 2682              	.LBE34:
 2683              		.loc 2 1059 0 discriminator 2
 2684 0e9c F869     		ldr	r0, [r7, #28]
 2685 0e9e FFF7FEFF 		bl	rt_hw_interrupt_enable
 2686              	.LBE33:
1060:../src/os/rt-thread/src/ipc.c **** 
1061:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1062:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2687              		.loc 2 1062 0 is_stmt 1 discriminator 2
 2688 0ea2 FB68     		ldr	r3, [r7, #12]
 2689 0ea4 002B     		cmp	r3, #0
 2690 0ea6 0DD1     		bne	.L183
 2691              	.LBB35:
 2692              		.loc 2 1062 0 is_stmt 0 discriminator 1
 2693 0ea8 4FF00003 		mov	r3, #0
 2694 0eac BB75     		strb	r3, [r7, #22]
 2695 0eae 5948     		ldr	r0, .L196+8
 2696 0eb0 5A49     		ldr	r1, .L196+16
 2697 0eb2 574A     		ldr	r2, .L196+4
 2698 0eb4 40F22643 		movw	r3, #1062
 2699 0eb8 FFF7FEFF 		bl	rt_kprintf
 2700              	.L184:
 2701              		.loc 2 1062 0 discriminator 2
 2702 0ebc BB7D     		ldrb	r3, [r7, #22]
 2703 0ebe DBB2     		uxtb	r3, r3
 2704 0ec0 002B     		cmp	r3, #0
 2705 0ec2 FBD0     		beq	.L184
 2706              	.L183:
 2707              	.LBE35:
1063:../src/os/rt-thread/src/ipc.c **** 	if (set == 0)
 2708              		.loc 2 1063 0 is_stmt 1
 2709 0ec4 BB68     		ldr	r3, [r7, #8]
 2710 0ec6 002B     		cmp	r3, #0
 2711 0ec8 02D1     		bne	.L185
1064:../src/os/rt-thread/src/ipc.c **** 		return -RT_ERROR;
 2712              		.loc 2 1064 0
 2713 0eca 4FF0FF33 		mov	r3, #-1
 2714 0ece 97E0     		b	.L186
 2715              	.L185:
1065:../src/os/rt-thread/src/ipc.c **** 
1066:../src/os/rt-thread/src/ipc.c **** 	/* init status */
1067:../src/os/rt-thread/src/ipc.c **** 	status = -RT_ERROR;
 2716              		.loc 2 1067 0
 2717 0ed0 4FF0FF35 		mov	r5, #-1
1068:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
1069:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 2718              		.loc 2 1069 0
 2719 0ed4 FFF7FEFF 		bl	rt_thread_self
 2720 0ed8 B861     		str	r0, [r7, #24]
1070:../src/os/rt-thread/src/ipc.c **** 	/* reset thread error */
1071:../src/os/rt-thread/src/ipc.c **** 	thread->error = RT_EOK;
 2721              		.loc 2 1071 0
 2722 0eda BB69     		ldr	r3, [r7, #24]
 2723 0edc 4FF00002 		mov	r2, #0
 2724 0ee0 DA62     		str	r2, [r3, #44]
1072:../src/os/rt-thread/src/ipc.c **** 
1073:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(event->parent.parent)));
 2725              		.loc 2 1073 0
 2726 0ee2 4F4B     		ldr	r3, .L196+20
 2727 0ee4 1B68     		ldr	r3, [r3, #0]
 2728 0ee6 002B     		cmp	r3, #0
 2729 0ee8 04D0     		beq	.L187
 2730              		.loc 2 1073 0 is_stmt 0 discriminator 1
 2731 0eea 4D4B     		ldr	r3, .L196+20
 2732 0eec 1B68     		ldr	r3, [r3, #0]
 2733 0eee FA68     		ldr	r2, [r7, #12]
 2734 0ef0 1046     		mov	r0, r2
 2735 0ef2 9847     		blx	r3
 2736              	.L187:
1074:../src/os/rt-thread/src/ipc.c **** 
1075:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1076:../src/os/rt-thread/src/ipc.c **** 	level = rt_hw_interrupt_disable();
 2737              		.loc 2 1076 0 is_stmt 1
 2738 0ef4 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2739 0ef8 0346     		mov	r3, r0
 2740 0efa 1C46     		mov	r4, r3
1077:../src/os/rt-thread/src/ipc.c **** 
1078:../src/os/rt-thread/src/ipc.c **** 	/* check event set */
1079:../src/os/rt-thread/src/ipc.c **** 	if (option & RT_EVENT_FLAG_AND)
 2741              		.loc 2 1079 0
 2742 0efc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2743 0efe 03F00103 		and	r3, r3, #1
 2744 0f02 002B     		cmp	r3, #0
 2745 0f04 09D0     		beq	.L188
1080:../src/os/rt-thread/src/ipc.c **** 	{
1081:../src/os/rt-thread/src/ipc.c **** 		if ((event->set & set) == set)
 2746              		.loc 2 1081 0
 2747 0f06 FB68     		ldr	r3, [r7, #12]
 2748 0f08 9A69     		ldr	r2, [r3, #24]
 2749 0f0a BB68     		ldr	r3, [r7, #8]
 2750 0f0c 1A40     		ands	r2, r2, r3
 2751 0f0e BB68     		ldr	r3, [r7, #8]
 2752 0f10 9A42     		cmp	r2, r3
 2753 0f12 0FD1     		bne	.L189
1082:../src/os/rt-thread/src/ipc.c **** 			status = RT_EOK;
 2754              		.loc 2 1082 0
 2755 0f14 4FF00005 		mov	r5, #0
 2756 0f18 0CE0     		b	.L189
 2757              	.L188:
1083:../src/os/rt-thread/src/ipc.c **** 	}
1084:../src/os/rt-thread/src/ipc.c **** 	else if (option & RT_EVENT_FLAG_OR)
 2758              		.loc 2 1084 0
 2759 0f1a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2760 0f1c 03F00203 		and	r3, r3, #2
 2761 0f20 002B     		cmp	r3, #0
 2762 0f22 07D0     		beq	.L189
1085:../src/os/rt-thread/src/ipc.c **** 	{
1086:../src/os/rt-thread/src/ipc.c **** 		if (event->set & set)
 2763              		.loc 2 1086 0
 2764 0f24 FB68     		ldr	r3, [r7, #12]
 2765 0f26 9A69     		ldr	r2, [r3, #24]
 2766 0f28 BB68     		ldr	r3, [r7, #8]
 2767 0f2a 1340     		ands	r3, r3, r2
 2768 0f2c 002B     		cmp	r3, #0
 2769 0f2e 01D0     		beq	.L189
1087:../src/os/rt-thread/src/ipc.c **** 			status = RT_EOK;
 2770              		.loc 2 1087 0
 2771 0f30 4FF00005 		mov	r5, #0
 2772              	.L189:
1088:../src/os/rt-thread/src/ipc.c **** 	}
1089:../src/os/rt-thread/src/ipc.c **** 
1090:../src/os/rt-thread/src/ipc.c **** 	if (status == RT_EOK)
 2773              		.loc 2 1090 0
 2774 0f34 002D     		cmp	r5, #0
 2775 0f36 13D1     		bne	.L190
1091:../src/os/rt-thread/src/ipc.c **** 	{
1092:../src/os/rt-thread/src/ipc.c **** 		/* set received event */
1093:../src/os/rt-thread/src/ipc.c **** 		*recved = (event->set & set);
 2776              		.loc 2 1093 0
 2777 0f38 FB68     		ldr	r3, [r7, #12]
 2778 0f3a 9A69     		ldr	r2, [r3, #24]
 2779 0f3c BB68     		ldr	r3, [r7, #8]
 2780 0f3e 1A40     		ands	r2, r2, r3
 2781 0f40 3B6B     		ldr	r3, [r7, #48]
 2782 0f42 1A60     		str	r2, [r3, #0]
1094:../src/os/rt-thread/src/ipc.c **** 
1095:../src/os/rt-thread/src/ipc.c **** 		/* received event */
1096:../src/os/rt-thread/src/ipc.c **** 		if (option & RT_EVENT_FLAG_CLEAR)
 2783              		.loc 2 1096 0
 2784 0f44 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2785 0f46 03F00403 		and	r3, r3, #4
 2786 0f4a 002B     		cmp	r3, #0
 2787 0f4c 49D0     		beq	.L191
1097:../src/os/rt-thread/src/ipc.c **** 			event->set &= ~set;
 2788              		.loc 2 1097 0
 2789 0f4e FB68     		ldr	r3, [r7, #12]
 2790 0f50 9A69     		ldr	r2, [r3, #24]
 2791 0f52 BB68     		ldr	r3, [r7, #8]
 2792 0f54 6FEA0303 		mvn	r3, r3
 2793 0f58 1A40     		ands	r2, r2, r3
 2794 0f5a FB68     		ldr	r3, [r7, #12]
 2795 0f5c 9A61     		str	r2, [r3, #24]
 2796 0f5e 40E0     		b	.L191
 2797              	.L190:
1098:../src/os/rt-thread/src/ipc.c **** 	}
1099:../src/os/rt-thread/src/ipc.c **** 	else if (timeout == 0)
 2798              		.loc 2 1099 0
 2799 0f60 3B68     		ldr	r3, [r7, #0]
 2800 0f62 002B     		cmp	r3, #0
 2801 0f64 04D1     		bne	.L192
1100:../src/os/rt-thread/src/ipc.c **** 	{
1101:../src/os/rt-thread/src/ipc.c **** 		/* no waiting */
1102:../src/os/rt-thread/src/ipc.c **** 		thread->error = -RT_ETIMEOUT;
 2802              		.loc 2 1102 0
 2803 0f66 BB69     		ldr	r3, [r7, #24]
 2804 0f68 6FF00102 		mvn	r2, #1
 2805 0f6c DA62     		str	r2, [r3, #44]
 2806 0f6e 38E0     		b	.L191
 2807              	.L192:
1103:../src/os/rt-thread/src/ipc.c **** 	}
1104:../src/os/rt-thread/src/ipc.c **** 	else
1105:../src/os/rt-thread/src/ipc.c **** 	{
1106:../src/os/rt-thread/src/ipc.c **** 		/* fill thread event info */
1107:../src/os/rt-thread/src/ipc.c **** 		thread->event_set  = set;
 2808              		.loc 2 1107 0
 2809 0f70 BB69     		ldr	r3, [r7, #24]
 2810 0f72 BA68     		ldr	r2, [r7, #8]
 2811 0f74 9A63     		str	r2, [r3, #56]
1108:../src/os/rt-thread/src/ipc.c **** 		thread->event_info = option;
 2812              		.loc 2 1108 0
 2813 0f76 BB69     		ldr	r3, [r7, #24]
 2814 0f78 FA79     		ldrb	r2, [r7, #7]
 2815 0f7a 83F83C20 		strb	r2, [r3, #60]
1109:../src/os/rt-thread/src/ipc.c **** 
1110:../src/os/rt-thread/src/ipc.c **** 		/* put thread to suspended thread list */
1111:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_suspend(&(event->parent.suspend_thread), thread, event->parent.parent.flag);
 2816              		.loc 2 1111 0
 2817 0f7e FB68     		ldr	r3, [r7, #12]
 2818 0f80 03F11002 		add	r2, r3, #16
 2819 0f84 FB68     		ldr	r3, [r7, #12]
 2820 0f86 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2821 0f88 1046     		mov	r0, r2
 2822 0f8a B969     		ldr	r1, [r7, #24]
 2823 0f8c 1A46     		mov	r2, r3
 2824 0f8e FFF783F8 		bl	rt_ipc_list_suspend
1112:../src/os/rt-thread/src/ipc.c **** 
1113:../src/os/rt-thread/src/ipc.c **** 		/* if there is a waiting timeout, active thread timer */
1114:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 2825              		.loc 2 1114 0
 2826 0f92 3B68     		ldr	r3, [r7, #0]
 2827 0f94 002B     		cmp	r3, #0
 2828 0f96 0FDD     		ble	.L193
1115:../src/os/rt-thread/src/ipc.c **** 		{
1116:../src/os/rt-thread/src/ipc.c **** 			/* reset the timeout of thread timer and start it */
1117:../src/os/rt-thread/src/ipc.c **** 			rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &timeout);
 2829              		.loc 2 1117 0
 2830 0f98 BB69     		ldr	r3, [r7, #24]
 2831 0f9a 03F14802 		add	r2, r3, #72
 2832 0f9e 3B46     		mov	r3, r7
 2833 0fa0 1046     		mov	r0, r2
 2834 0fa2 4FF00001 		mov	r1, #0
 2835 0fa6 1A46     		mov	r2, r3
 2836 0fa8 FFF7FEFF 		bl	rt_timer_control
1118:../src/os/rt-thread/src/ipc.c **** 			rt_timer_start(&(thread->thread_timer));
 2837              		.loc 2 1118 0
 2838 0fac BB69     		ldr	r3, [r7, #24]
 2839 0fae 03F14803 		add	r3, r3, #72
 2840 0fb2 1846     		mov	r0, r3
 2841 0fb4 FFF7FEFF 		bl	rt_timer_start
 2842              	.L193:
1119:../src/os/rt-thread/src/ipc.c **** 		}
1120:../src/os/rt-thread/src/ipc.c **** 
1121:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1122:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(level);
 2843              		.loc 2 1122 0
 2844 0fb8 2346     		mov	r3, r4
 2845 0fba 1846     		mov	r0, r3
 2846 0fbc FFF7FEFF 		bl	rt_hw_interrupt_enable
1123:../src/os/rt-thread/src/ipc.c **** 
1124:../src/os/rt-thread/src/ipc.c **** 		/* do a schedule */
1125:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 2847              		.loc 2 1125 0
 2848 0fc0 FFF7FEFF 		bl	rt_schedule
1126:../src/os/rt-thread/src/ipc.c **** 
1127:../src/os/rt-thread/src/ipc.c **** 		if (thread->error != RT_EOK)
 2849              		.loc 2 1127 0
 2850 0fc4 BB69     		ldr	r3, [r7, #24]
 2851 0fc6 DB6A     		ldr	r3, [r3, #44]
 2852 0fc8 002B     		cmp	r3, #0
 2853 0fca 02D0     		beq	.L194
1128:../src/os/rt-thread/src/ipc.c **** 		{
1129:../src/os/rt-thread/src/ipc.c **** 			/* return error */
1130:../src/os/rt-thread/src/ipc.c **** 			return thread->error;
 2854              		.loc 2 1130 0
 2855 0fcc BB69     		ldr	r3, [r7, #24]
 2856 0fce DB6A     		ldr	r3, [r3, #44]
 2857 0fd0 16E0     		b	.L186
 2858              	.L194:
1131:../src/os/rt-thread/src/ipc.c **** 		}
1132:../src/os/rt-thread/src/ipc.c **** 
1133:../src/os/rt-thread/src/ipc.c **** 		/* received an event, disable interrupt to protect */
1134:../src/os/rt-thread/src/ipc.c **** 		level = rt_hw_interrupt_disable();
 2859              		.loc 2 1134 0
 2860 0fd2 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2861 0fd6 0346     		mov	r3, r0
 2862 0fd8 1C46     		mov	r4, r3
1135:../src/os/rt-thread/src/ipc.c **** 
1136:../src/os/rt-thread/src/ipc.c **** 		/* set received event */
1137:../src/os/rt-thread/src/ipc.c **** 		*recved = thread->event_set;
 2863              		.loc 2 1137 0
 2864 0fda BB69     		ldr	r3, [r7, #24]
 2865 0fdc 9A6B     		ldr	r2, [r3, #56]
 2866 0fde 3B6B     		ldr	r3, [r7, #48]
 2867 0fe0 1A60     		str	r2, [r3, #0]
 2868              	.L191:
1138:../src/os/rt-thread/src/ipc.c **** 	}
1139:../src/os/rt-thread/src/ipc.c **** 
1140:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1141:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(level);
 2869              		.loc 2 1141 0
 2870 0fe2 2346     		mov	r3, r4
 2871 0fe4 1846     		mov	r0, r3
 2872 0fe6 FFF7FEFF 		bl	rt_hw_interrupt_enable
1142:../src/os/rt-thread/src/ipc.c **** 
1143:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(event->parent.parent)));
 2873              		.loc 2 1143 0
 2874 0fea 0E4B     		ldr	r3, .L196+24
 2875 0fec 1B68     		ldr	r3, [r3, #0]
 2876 0fee 002B     		cmp	r3, #0
 2877 0ff0 04D0     		beq	.L195
 2878              		.loc 2 1143 0 is_stmt 0 discriminator 1
 2879 0ff2 0C4B     		ldr	r3, .L196+24
 2880 0ff4 1B68     		ldr	r3, [r3, #0]
 2881 0ff6 FA68     		ldr	r2, [r7, #12]
 2882 0ff8 1046     		mov	r0, r2
 2883 0ffa 9847     		blx	r3
 2884              	.L195:
1144:../src/os/rt-thread/src/ipc.c **** 
1145:../src/os/rt-thread/src/ipc.c **** 	return thread->error;
 2885              		.loc 2 1145 0 is_stmt 1
 2886 0ffc BB69     		ldr	r3, [r7, #24]
 2887 0ffe DB6A     		ldr	r3, [r3, #44]
 2888              	.L186:
1146:../src/os/rt-thread/src/ipc.c **** }
 2889              		.loc 2 1146 0
 2890 1000 1846     		mov	r0, r3
 2891 1002 07F12007 		add	r7, r7, #32
 2892 1006 BD46     		mov	sp, r7
 2893 1008 B0BD     		pop	{r4, r5, r7, pc}
 2894              	.L197:
 2895 100a 00BF     		.align	2
 2896              	.L196:
 2897 100c 30000000 		.word	.LC2
 2898 1010 B0010000 		.word	__FUNCTION__.5090
 2899 1014 00000000 		.word	.LC0
 2900 1018 54000000 		.word	.LC3
 2901 101c 6C000000 		.word	.LC5
 2902 1020 00000000 		.word	rt_object_trytake_hook
 2903 1024 00000000 		.word	rt_object_take_hook
 2904              		.cfi_endproc
 2905              	.LFE29:
 2907              		.align	2
 2908              		.global	rt_event_control
 2909              		.thumb
 2910              		.thumb_func
 2912              	rt_event_control:
 2913              	.LFB30:
1147:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_recv);
1148:../src/os/rt-thread/src/ipc.c **** 
1149:../src/os/rt-thread/src/ipc.c **** /**
1150:../src/os/rt-thread/src/ipc.c ****  * This function can get or set some extra attributions of an event object.
1151:../src/os/rt-thread/src/ipc.c ****  *
1152:../src/os/rt-thread/src/ipc.c ****  * @param event the event object
1153:../src/os/rt-thread/src/ipc.c ****  * @param cmd the execution command
1154:../src/os/rt-thread/src/ipc.c ****  * @param arg the execution argument
1155:../src/os/rt-thread/src/ipc.c ****  *
1156:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1157:../src/os/rt-thread/src/ipc.c ****  */
1158:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_event_control(rt_event_t event, rt_uint8_t cmd, void *arg)
1159:../src/os/rt-thread/src/ipc.c **** {
 2914              		.loc 2 1159 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 24
 2917              		@ frame_needed = 1, uses_anonymous_args = 0
 2918 1028 80B5     		push	{r7, lr}
 2919              	.LCFI84:
 2920              		.cfi_def_cfa_offset 8
 2921              		.cfi_offset 7, -8
 2922              		.cfi_offset 14, -4
 2923 102a 86B0     		sub	sp, sp, #24
 2924              	.LCFI85:
 2925              		.cfi_def_cfa_offset 32
 2926 102c 00AF     		add	r7, sp, #0
 2927              	.LCFI86:
 2928              		.cfi_def_cfa_register 7
 2929 102e F860     		str	r0, [r7, #12]
 2930 1030 0B46     		mov	r3, r1
 2931 1032 7A60     		str	r2, [r7, #4]
 2932 1034 FB72     		strb	r3, [r7, #11]
1160:../src/os/rt-thread/src/ipc.c **** 	rt_ubase_t level;
1161:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(event != RT_NULL);
 2933              		.loc 2 1161 0
 2934 1036 FB68     		ldr	r3, [r7, #12]
 2935 1038 002B     		cmp	r3, #0
 2936 103a 0DD1     		bne	.L199
 2937              	.LBB36:
 2938              		.loc 2 1161 0 is_stmt 0 discriminator 1
 2939 103c 4FF00003 		mov	r3, #0
 2940 1040 FB74     		strb	r3, [r7, #19]
 2941 1042 1648     		ldr	r0, .L203
 2942 1044 1649     		ldr	r1, .L203+4
 2943 1046 174A     		ldr	r2, .L203+8
 2944 1048 40F28943 		movw	r3, #1161
 2945 104c FFF7FEFF 		bl	rt_kprintf
 2946              	.L200:
 2947              		.loc 2 1161 0 discriminator 2
 2948 1050 FB7C     		ldrb	r3, [r7, #19]
 2949 1052 DBB2     		uxtb	r3, r3
 2950 1054 002B     		cmp	r3, #0
 2951 1056 FBD0     		beq	.L200
 2952              	.L199:
 2953              	.LBE36:
1162:../src/os/rt-thread/src/ipc.c **** 
1163:../src/os/rt-thread/src/ipc.c **** 	if (cmd == RT_IPC_CMD_RESET)
 2954              		.loc 2 1163 0 is_stmt 1
 2955 1058 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2956 105a 012B     		cmp	r3, #1
 2957 105c 16D1     		bne	.L201
1164:../src/os/rt-thread/src/ipc.c **** 	{
1165:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
1166:../src/os/rt-thread/src/ipc.c **** 		level = rt_hw_interrupt_disable();
 2958              		.loc 2 1166 0
 2959 105e FFF7FEFF 		bl	rt_hw_interrupt_disable
 2960 1062 0346     		mov	r3, r0
 2961 1064 7B61     		str	r3, [r7, #20]
1167:../src/os/rt-thread/src/ipc.c **** 
1168:../src/os/rt-thread/src/ipc.c **** 		/* resume all waiting thread */
1169:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume_all(&event->parent.suspend_thread);
 2962              		.loc 2 1169 0
 2963 1066 FB68     		ldr	r3, [r7, #12]
 2964 1068 03F11003 		add	r3, r3, #16
 2965 106c 1846     		mov	r0, r3
 2966 106e FFF775F8 		bl	rt_ipc_list_resume_all
1170:../src/os/rt-thread/src/ipc.c **** 
1171:../src/os/rt-thread/src/ipc.c **** 		/* init event set */
1172:../src/os/rt-thread/src/ipc.c **** 		event->set = 0;
 2967              		.loc 2 1172 0
 2968 1072 FB68     		ldr	r3, [r7, #12]
 2969 1074 4FF00002 		mov	r2, #0
 2970 1078 9A61     		str	r2, [r3, #24]
1173:../src/os/rt-thread/src/ipc.c **** 
1174:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1175:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(level);
 2971              		.loc 2 1175 0
 2972 107a 7B69     		ldr	r3, [r7, #20]
 2973 107c 1846     		mov	r0, r3
 2974 107e FFF7FEFF 		bl	rt_hw_interrupt_enable
1176:../src/os/rt-thread/src/ipc.c **** 
1177:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 2975              		.loc 2 1177 0
 2976 1082 FFF7FEFF 		bl	rt_schedule
1178:../src/os/rt-thread/src/ipc.c **** 
1179:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 2977              		.loc 2 1179 0
 2978 1086 4FF00003 		mov	r3, #0
 2979 108a 01E0     		b	.L202
 2980              	.L201:
1180:../src/os/rt-thread/src/ipc.c **** 	}
1181:../src/os/rt-thread/src/ipc.c **** 
1182:../src/os/rt-thread/src/ipc.c **** 	return -RT_ERROR;
 2981              		.loc 2 1182 0
 2982 108c 4FF0FF33 		mov	r3, #-1
 2983              	.L202:
1183:../src/os/rt-thread/src/ipc.c **** }
 2984              		.loc 2 1183 0
 2985 1090 1846     		mov	r0, r3
 2986 1092 07F11807 		add	r7, r7, #24
 2987 1096 BD46     		mov	sp, r7
 2988 1098 80BD     		pop	{r7, pc}
 2989              	.L204:
 2990 109a 00BF     		.align	2
 2991              	.L203:
 2992 109c 00000000 		.word	.LC0
 2993 10a0 6C000000 		.word	.LC5
 2994 10a4 9C010000 		.word	__FUNCTION__.5106
 2995              		.cfi_endproc
 2996              	.LFE30:
 2998              		.section	.rodata
 2999 007d 000000   		.align	2
 3000              	.LC6:
 3001 0080 6D622021 		.ascii	"mb != RT_NULL\000"
 3001      3D205254 
 3001      5F4E554C 
 3001      4C00
 3002              		.text
 3003              		.align	2
 3004              		.global	rt_mb_init
 3005              		.thumb
 3006              		.thumb_func
 3008              	rt_mb_init:
 3009              	.LFB31:
1184:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_event_control); 
1185:../src/os/rt-thread/src/ipc.c **** #endif /* end of RT_USING_EVENT */
1186:../src/os/rt-thread/src/ipc.c **** 
1187:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_MAILBOX
1188:../src/os/rt-thread/src/ipc.c **** /**
1189:../src/os/rt-thread/src/ipc.c ****  * This function will initialize a mailbox and put it under control of resource
1190:../src/os/rt-thread/src/ipc.c ****  * management.
1191:../src/os/rt-thread/src/ipc.c ****  *
1192:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1193:../src/os/rt-thread/src/ipc.c ****  * @param name the name of mailbox
1194:../src/os/rt-thread/src/ipc.c ****  * @param msgpool the begin address of buffer to save received mail
1195:../src/os/rt-thread/src/ipc.c ****  * @param size the size of mailbox
1196:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of mailbox
1197:../src/os/rt-thread/src/ipc.c ****  *
1198:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1199:../src/os/rt-thread/src/ipc.c ****  */
1200:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_init(rt_mailbox_t mb, const char *name, void *msgpool, rt_size_t size, rt_uint8_t fl
1201:../src/os/rt-thread/src/ipc.c **** {
 3010              		.loc 2 1201 0
 3011              		.cfi_startproc
 3012              		@ args = 4, pretend = 0, frame = 24
 3013              		@ frame_needed = 1, uses_anonymous_args = 0
 3014 10a8 80B5     		push	{r7, lr}
 3015              	.LCFI87:
 3016              		.cfi_def_cfa_offset 8
 3017              		.cfi_offset 7, -8
 3018              		.cfi_offset 14, -4
 3019 10aa 86B0     		sub	sp, sp, #24
 3020              	.LCFI88:
 3021              		.cfi_def_cfa_offset 32
 3022 10ac 00AF     		add	r7, sp, #0
 3023              	.LCFI89:
 3024              		.cfi_def_cfa_register 7
 3025 10ae F860     		str	r0, [r7, #12]
 3026 10b0 B960     		str	r1, [r7, #8]
 3027 10b2 7A60     		str	r2, [r7, #4]
 3028 10b4 3B60     		str	r3, [r7, #0]
1202:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 3029              		.loc 2 1202 0
 3030 10b6 FB68     		ldr	r3, [r7, #12]
 3031 10b8 002B     		cmp	r3, #0
 3032 10ba 0DD1     		bne	.L206
 3033              	.LBB37:
 3034              		.loc 2 1202 0 is_stmt 0 discriminator 1
 3035 10bc 4FF00003 		mov	r3, #0
 3036 10c0 FB75     		strb	r3, [r7, #23]
 3037 10c2 1D48     		ldr	r0, .L209
 3038 10c4 1D49     		ldr	r1, .L209+4
 3039 10c6 1E4A     		ldr	r2, .L209+8
 3040 10c8 40F2B243 		movw	r3, #1202
 3041 10cc FFF7FEFF 		bl	rt_kprintf
 3042              	.L207:
 3043              		.loc 2 1202 0 discriminator 2
 3044 10d0 FB7D     		ldrb	r3, [r7, #23]
 3045 10d2 DBB2     		uxtb	r3, r3
 3046 10d4 002B     		cmp	r3, #0
 3047 10d6 FBD0     		beq	.L207
 3048              	.L206:
 3049              	.LBE37:
1203:../src/os/rt-thread/src/ipc.c **** 
1204:../src/os/rt-thread/src/ipc.c **** 	/* init object */
1205:../src/os/rt-thread/src/ipc.c **** 	rt_object_init(&(mb->parent.parent), RT_Object_Class_MailBox, name);
 3050              		.loc 2 1205 0 is_stmt 1
 3051 10d8 FB68     		ldr	r3, [r7, #12]
 3052 10da 1846     		mov	r0, r3
 3053 10dc 4FF00401 		mov	r1, #4
 3054 10e0 BA68     		ldr	r2, [r7, #8]
 3055 10e2 FFF7FEFF 		bl	rt_object_init
1206:../src/os/rt-thread/src/ipc.c **** 
1207:../src/os/rt-thread/src/ipc.c **** 	/* set parent flag */
1208:../src/os/rt-thread/src/ipc.c **** 	mb->parent.parent.flag = flag;
 3056              		.loc 2 1208 0
 3057 10e6 FB68     		ldr	r3, [r7, #12]
 3058 10e8 97F82020 		ldrb	r2, [r7, #32]
 3059 10ec DA71     		strb	r2, [r3, #7]
1209:../src/os/rt-thread/src/ipc.c **** 
1210:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
1211:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mb->parent));
 3060              		.loc 2 1211 0
 3061 10ee FB68     		ldr	r3, [r7, #12]
 3062 10f0 1846     		mov	r0, r3
 3063 10f2 FEF7BFFF 		bl	rt_ipc_object_init
1212:../src/os/rt-thread/src/ipc.c **** 
1213:../src/os/rt-thread/src/ipc.c **** 	/* init mailbox */
1214:../src/os/rt-thread/src/ipc.c **** 	mb->msg_pool   = msgpool;
 3064              		.loc 2 1214 0
 3065 10f6 FB68     		ldr	r3, [r7, #12]
 3066 10f8 7A68     		ldr	r2, [r7, #4]
 3067 10fa 9A61     		str	r2, [r3, #24]
1215:../src/os/rt-thread/src/ipc.c **** 	mb->size       = size;
 3068              		.loc 2 1215 0
 3069 10fc 3B68     		ldr	r3, [r7, #0]
 3070 10fe 9AB2     		uxth	r2, r3
 3071 1100 FB68     		ldr	r3, [r7, #12]
 3072 1102 9A83     		strh	r2, [r3, #28]	@ movhi
1216:../src/os/rt-thread/src/ipc.c **** 	mb->entry      = 0;
 3073              		.loc 2 1216 0
 3074 1104 FB68     		ldr	r3, [r7, #12]
 3075 1106 4FF00002 		mov	r2, #0
 3076 110a DA83     		strh	r2, [r3, #30]	@ movhi
1217:../src/os/rt-thread/src/ipc.c **** 	mb->in_offset  = 0;
 3077              		.loc 2 1217 0
 3078 110c FB68     		ldr	r3, [r7, #12]
 3079 110e 4FF00002 		mov	r2, #0
 3080 1112 1A84     		strh	r2, [r3, #32]	@ movhi
1218:../src/os/rt-thread/src/ipc.c **** 	mb->out_offset = 0;
 3081              		.loc 2 1218 0
 3082 1114 FB68     		ldr	r3, [r7, #12]
 3083 1116 4FF00002 		mov	r2, #0
 3084 111a 5A84     		strh	r2, [r3, #34]	@ movhi
1219:../src/os/rt-thread/src/ipc.c **** 
1220:../src/os/rt-thread/src/ipc.c **** 	/* init an additional list of sender suspend thread */
1221:../src/os/rt-thread/src/ipc.c **** 	rt_list_init(&(mb->suspend_sender_thread));
 3085              		.loc 2 1221 0
 3086 111c FB68     		ldr	r3, [r7, #12]
 3087 111e 03F12403 		add	r3, r3, #36
 3088 1122 1846     		mov	r0, r3
 3089 1124 FEF76CFF 		bl	rt_list_init
1222:../src/os/rt-thread/src/ipc.c **** 
1223:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 3090              		.loc 2 1223 0
 3091 1128 4FF00003 		mov	r3, #0
1224:../src/os/rt-thread/src/ipc.c **** }
 3092              		.loc 2 1224 0
 3093 112c 1846     		mov	r0, r3
 3094 112e 07F11807 		add	r7, r7, #24
 3095 1132 BD46     		mov	sp, r7
 3096 1134 80BD     		pop	{r7, pc}
 3097              	.L210:
 3098 1136 00BF     		.align	2
 3099              	.L209:
 3100 1138 00000000 		.word	.LC0
 3101 113c 80000000 		.word	.LC6
 3102 1140 90010000 		.word	__FUNCTION__.5118
 3103              		.cfi_endproc
 3104              	.LFE31:
 3106              		.align	2
 3107              		.global	rt_mb_detach
 3108              		.thumb
 3109              		.thumb_func
 3111              	rt_mb_detach:
 3112              	.LFB32:
1225:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_init);
1226:../src/os/rt-thread/src/ipc.c **** 
1227:../src/os/rt-thread/src/ipc.c **** /**
1228:../src/os/rt-thread/src/ipc.c ****  * This function will detach a mailbox from resource management
1229:../src/os/rt-thread/src/ipc.c ****  *
1230:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1231:../src/os/rt-thread/src/ipc.c ****  *
1232:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1233:../src/os/rt-thread/src/ipc.c ****  */
1234:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_detach(rt_mailbox_t mb)
1235:../src/os/rt-thread/src/ipc.c **** {
 3113              		.loc 2 1235 0
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 16
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 1144 80B5     		push	{r7, lr}
 3118              	.LCFI90:
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 7, -8
 3121              		.cfi_offset 14, -4
 3122 1146 84B0     		sub	sp, sp, #16
 3123              	.LCFI91:
 3124              		.cfi_def_cfa_offset 24
 3125 1148 00AF     		add	r7, sp, #0
 3126              	.LCFI92:
 3127              		.cfi_def_cfa_register 7
 3128 114a 7860     		str	r0, [r7, #4]
1236:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1237:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 3129              		.loc 2 1237 0
 3130 114c 7B68     		ldr	r3, [r7, #4]
 3131 114e 002B     		cmp	r3, #0
 3132 1150 0DD1     		bne	.L212
 3133              	.LBB38:
 3134              		.loc 2 1237 0 is_stmt 0 discriminator 1
 3135 1152 4FF00003 		mov	r3, #0
 3136 1156 FB73     		strb	r3, [r7, #15]
 3137 1158 1048     		ldr	r0, .L215
 3138 115a 1149     		ldr	r1, .L215+4
 3139 115c 114A     		ldr	r2, .L215+8
 3140 115e 40F2D543 		movw	r3, #1237
 3141 1162 FFF7FEFF 		bl	rt_kprintf
 3142              	.L213:
 3143              		.loc 2 1237 0 discriminator 2
 3144 1166 FB7B     		ldrb	r3, [r7, #15]
 3145 1168 DBB2     		uxtb	r3, r3
 3146 116a 002B     		cmp	r3, #0
 3147 116c FBD0     		beq	.L213
 3148              	.L212:
 3149              	.LBE38:
1238:../src/os/rt-thread/src/ipc.c **** 
1239:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
1240:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 3150              		.loc 2 1240 0 is_stmt 1
 3151 116e 7B68     		ldr	r3, [r7, #4]
 3152 1170 03F11003 		add	r3, r3, #16
 3153 1174 1846     		mov	r0, r3
 3154 1176 FEF7F1FF 		bl	rt_ipc_list_resume_all
1241:../src/os/rt-thread/src/ipc.c **** 	/* also resume all mailbox private suspended thread */
1242:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 3155              		.loc 2 1242 0
 3156 117a 7B68     		ldr	r3, [r7, #4]
 3157 117c 03F12403 		add	r3, r3, #36
 3158 1180 1846     		mov	r0, r3
 3159 1182 FEF7EBFF 		bl	rt_ipc_list_resume_all
1243:../src/os/rt-thread/src/ipc.c **** 
1244:../src/os/rt-thread/src/ipc.c **** 	/* detach mailbox object */
1245:../src/os/rt-thread/src/ipc.c **** 	rt_object_detach(&(mb->parent.parent));
 3160              		.loc 2 1245 0
 3161 1186 7B68     		ldr	r3, [r7, #4]
 3162 1188 1846     		mov	r0, r3
 3163 118a FFF7FEFF 		bl	rt_object_detach
1246:../src/os/rt-thread/src/ipc.c **** 
1247:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 3164              		.loc 2 1247 0
 3165 118e 4FF00003 		mov	r3, #0
1248:../src/os/rt-thread/src/ipc.c **** }
 3166              		.loc 2 1248 0
 3167 1192 1846     		mov	r0, r3
 3168 1194 07F11007 		add	r7, r7, #16
 3169 1198 BD46     		mov	sp, r7
 3170 119a 80BD     		pop	{r7, pc}
 3171              	.L216:
 3172              		.align	2
 3173              	.L215:
 3174 119c 00000000 		.word	.LC0
 3175 11a0 80000000 		.word	.LC6
 3176 11a4 80010000 		.word	__FUNCTION__.5126
 3177              		.cfi_endproc
 3178              	.LFE32:
 3180              		.align	2
 3181              		.global	rt_mb_create
 3182              		.thumb
 3183              		.thumb_func
 3185              	rt_mb_create:
 3186              	.LFB33:
1249:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_detach);
1250:../src/os/rt-thread/src/ipc.c **** 
1251:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HEAP
1252:../src/os/rt-thread/src/ipc.c **** /**
1253:../src/os/rt-thread/src/ipc.c ****  * This function will create a mailbox object from system resource
1254:../src/os/rt-thread/src/ipc.c ****  *
1255:../src/os/rt-thread/src/ipc.c ****  * @param name the name of mailbox
1256:../src/os/rt-thread/src/ipc.c ****  * @param size the size of mailbox
1257:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of mailbox
1258:../src/os/rt-thread/src/ipc.c ****  *
1259:../src/os/rt-thread/src/ipc.c ****  * @return the created mailbox, RT_NULL on error happen
1260:../src/os/rt-thread/src/ipc.c ****  */
1261:../src/os/rt-thread/src/ipc.c **** rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
1262:../src/os/rt-thread/src/ipc.c **** {
 3187              		.loc 2 1262 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 32
 3190              		@ frame_needed = 1, uses_anonymous_args = 0
 3191 11a8 80B5     		push	{r7, lr}
 3192              	.LCFI93:
 3193              		.cfi_def_cfa_offset 8
 3194              		.cfi_offset 7, -8
 3195              		.cfi_offset 14, -4
 3196 11aa 88B0     		sub	sp, sp, #32
 3197              	.LCFI94:
 3198              		.cfi_def_cfa_offset 40
 3199 11ac 00AF     		add	r7, sp, #0
 3200              	.LCFI95:
 3201              		.cfi_def_cfa_register 7
 3202 11ae F860     		str	r0, [r7, #12]
 3203 11b0 B960     		str	r1, [r7, #8]
 3204 11b2 1346     		mov	r3, r2
 3205 11b4 FB71     		strb	r3, [r7, #7]
 3206              	.LBB39:
1263:../src/os/rt-thread/src/ipc.c **** 	rt_mailbox_t mb;
1264:../src/os/rt-thread/src/ipc.c **** 
1265:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 3207              		.loc 2 1265 0
 3208 11b6 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3209 11ba F861     		str	r0, [r7, #28]
 3210 11bc FFF7FEFF 		bl	rt_interrupt_get_nest
 3211 11c0 0346     		mov	r3, r0
 3212 11c2 002B     		cmp	r3, #0
 3213 11c4 11D0     		beq	.L218
 3214              		.loc 2 1265 0 is_stmt 0 discriminator 1
 3215 11c6 2C48     		ldr	r0, .L223
 3216 11c8 2C49     		ldr	r1, .L223+4
 3217 11ca FFF7FEFF 		bl	rt_kprintf
 3218              	.LBB40:
 3219 11ce 4FF00003 		mov	r3, #0
 3220 11d2 FB75     		strb	r3, [r7, #23]
 3221 11d4 2A48     		ldr	r0, .L223+8
 3222 11d6 2B49     		ldr	r1, .L223+12
 3223 11d8 284A     		ldr	r2, .L223+4
 3224 11da 40F2F143 		movw	r3, #1265
 3225 11de FFF7FEFF 		bl	rt_kprintf
 3226              	.L219:
 3227              		.loc 2 1265 0 discriminator 4
 3228 11e2 FB7D     		ldrb	r3, [r7, #23]
 3229 11e4 DBB2     		uxtb	r3, r3
 3230 11e6 002B     		cmp	r3, #0
 3231 11e8 FBD0     		beq	.L219
 3232              	.L218:
 3233              	.LBE40:
 3234              		.loc 2 1265 0 discriminator 2
 3235 11ea F869     		ldr	r0, [r7, #28]
 3236 11ec FFF7FEFF 		bl	rt_hw_interrupt_enable
 3237              	.LBE39:
1266:../src/os/rt-thread/src/ipc.c **** 
1267:../src/os/rt-thread/src/ipc.c **** 	/* allocate object */
1268:../src/os/rt-thread/src/ipc.c **** 	mb = (rt_mailbox_t)rt_object_allocate(RT_Object_Class_MailBox, name);
 3238              		.loc 2 1268 0 is_stmt 1 discriminator 2
 3239 11f0 4FF00400 		mov	r0, #4
 3240 11f4 F968     		ldr	r1, [r7, #12]
 3241 11f6 FFF7FEFF 		bl	rt_object_allocate
 3242 11fa B861     		str	r0, [r7, #24]
1269:../src/os/rt-thread/src/ipc.c **** 	if (mb == RT_NULL)
 3243              		.loc 2 1269 0 discriminator 2
 3244 11fc BB69     		ldr	r3, [r7, #24]
 3245 11fe 002B     		cmp	r3, #0
 3246 1200 01D1     		bne	.L220
1270:../src/os/rt-thread/src/ipc.c **** 		return mb;
 3247              		.loc 2 1270 0
 3248 1202 BB69     		ldr	r3, [r7, #24]
 3249 1204 32E0     		b	.L221
 3250              	.L220:
1271:../src/os/rt-thread/src/ipc.c **** 
1272:../src/os/rt-thread/src/ipc.c **** 	/* set parent */
1273:../src/os/rt-thread/src/ipc.c **** 	mb->parent.parent.flag = flag;
 3251              		.loc 2 1273 0
 3252 1206 BB69     		ldr	r3, [r7, #24]
 3253 1208 FA79     		ldrb	r2, [r7, #7]
 3254 120a DA71     		strb	r2, [r3, #7]
1274:../src/os/rt-thread/src/ipc.c **** 
1275:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
1276:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mb->parent));
 3255              		.loc 2 1276 0
 3256 120c BB69     		ldr	r3, [r7, #24]
 3257 120e 1846     		mov	r0, r3
 3258 1210 FEF730FF 		bl	rt_ipc_object_init
1277:../src/os/rt-thread/src/ipc.c **** 
1278:../src/os/rt-thread/src/ipc.c **** 	/* init mailbox */
1279:../src/os/rt-thread/src/ipc.c **** 	mb->size     = size;
 3259              		.loc 2 1279 0
 3260 1214 BB68     		ldr	r3, [r7, #8]
 3261 1216 9AB2     		uxth	r2, r3
 3262 1218 BB69     		ldr	r3, [r7, #24]
 3263 121a 9A83     		strh	r2, [r3, #28]	@ movhi
1280:../src/os/rt-thread/src/ipc.c **** 	mb->msg_pool = rt_malloc(mb->size * sizeof(rt_uint32_t));
 3264              		.loc 2 1280 0
 3265 121c BB69     		ldr	r3, [r7, #24]
 3266 121e 9B8B     		ldrh	r3, [r3, #28]
 3267 1220 4FEA8303 		lsl	r3, r3, #2
 3268 1224 1846     		mov	r0, r3
 3269 1226 FFF7FEFF 		bl	rt_malloc
 3270 122a 0246     		mov	r2, r0
 3271 122c BB69     		ldr	r3, [r7, #24]
 3272 122e 9A61     		str	r2, [r3, #24]
1281:../src/os/rt-thread/src/ipc.c **** 	if (mb->msg_pool == RT_NULL)
 3273              		.loc 2 1281 0
 3274 1230 BB69     		ldr	r3, [r7, #24]
 3275 1232 9B69     		ldr	r3, [r3, #24]
 3276 1234 002B     		cmp	r3, #0
 3277 1236 06D1     		bne	.L222
1282:../src/os/rt-thread/src/ipc.c **** 	{
1283:../src/os/rt-thread/src/ipc.c **** 		/* delete mailbox object */
1284:../src/os/rt-thread/src/ipc.c **** 		rt_object_delete(&(mb->parent.parent));
 3278              		.loc 2 1284 0
 3279 1238 BB69     		ldr	r3, [r7, #24]
 3280 123a 1846     		mov	r0, r3
 3281 123c FFF7FEFF 		bl	rt_object_delete
1285:../src/os/rt-thread/src/ipc.c **** 
1286:../src/os/rt-thread/src/ipc.c **** 		return RT_NULL;
 3282              		.loc 2 1286 0
 3283 1240 4FF00003 		mov	r3, #0
 3284 1244 12E0     		b	.L221
 3285              	.L222:
1287:../src/os/rt-thread/src/ipc.c **** 	}
1288:../src/os/rt-thread/src/ipc.c **** 	mb->entry      = 0;
 3286              		.loc 2 1288 0
 3287 1246 BB69     		ldr	r3, [r7, #24]
 3288 1248 4FF00002 		mov	r2, #0
 3289 124c DA83     		strh	r2, [r3, #30]	@ movhi
1289:../src/os/rt-thread/src/ipc.c **** 	mb->in_offset  = 0;
 3290              		.loc 2 1289 0
 3291 124e BB69     		ldr	r3, [r7, #24]
 3292 1250 4FF00002 		mov	r2, #0
 3293 1254 1A84     		strh	r2, [r3, #32]	@ movhi
1290:../src/os/rt-thread/src/ipc.c **** 	mb->out_offset = 0;
 3294              		.loc 2 1290 0
 3295 1256 BB69     		ldr	r3, [r7, #24]
 3296 1258 4FF00002 		mov	r2, #0
 3297 125c 5A84     		strh	r2, [r3, #34]	@ movhi
1291:../src/os/rt-thread/src/ipc.c **** 
1292:../src/os/rt-thread/src/ipc.c **** 	/* init an additional list of sender suspend thread */
1293:../src/os/rt-thread/src/ipc.c **** 	rt_list_init(&(mb->suspend_sender_thread));
 3298              		.loc 2 1293 0
 3299 125e BB69     		ldr	r3, [r7, #24]
 3300 1260 03F12403 		add	r3, r3, #36
 3301 1264 1846     		mov	r0, r3
 3302 1266 FEF7CBFE 		bl	rt_list_init
1294:../src/os/rt-thread/src/ipc.c **** 
1295:../src/os/rt-thread/src/ipc.c **** 	return mb;
 3303              		.loc 2 1295 0
 3304 126a BB69     		ldr	r3, [r7, #24]
 3305              	.L221:
1296:../src/os/rt-thread/src/ipc.c **** }
 3306              		.loc 2 1296 0
 3307 126c 1846     		mov	r0, r3
 3308 126e 07F12007 		add	r7, r7, #32
 3309 1272 BD46     		mov	sp, r7
 3310 1274 80BD     		pop	{r7, pc}
 3311              	.L224:
 3312 1276 00BF     		.align	2
 3313              	.L223:
 3314 1278 30000000 		.word	.LC2
 3315 127c 70010000 		.word	__FUNCTION__.5137
 3316 1280 00000000 		.word	.LC0
 3317 1284 54000000 		.word	.LC3
 3318              		.cfi_endproc
 3319              	.LFE33:
 3321              		.align	2
 3322              		.global	rt_mb_delete
 3323              		.thumb
 3324              		.thumb_func
 3326              	rt_mb_delete:
 3327              	.LFB34:
1297:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_create);
1298:../src/os/rt-thread/src/ipc.c **** 
1299:../src/os/rt-thread/src/ipc.c **** /**
1300:../src/os/rt-thread/src/ipc.c ****  * This function will delete a mailbox object and release the memory
1301:../src/os/rt-thread/src/ipc.c ****  *
1302:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1303:../src/os/rt-thread/src/ipc.c ****  *
1304:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1305:../src/os/rt-thread/src/ipc.c ****  */
1306:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_delete(rt_mailbox_t mb)
1307:../src/os/rt-thread/src/ipc.c **** {
 3328              		.loc 2 1307 0
 3329              		.cfi_startproc
 3330              		@ args = 0, pretend = 0, frame = 16
 3331              		@ frame_needed = 1, uses_anonymous_args = 0
 3332 1288 80B5     		push	{r7, lr}
 3333              	.LCFI96:
 3334              		.cfi_def_cfa_offset 8
 3335              		.cfi_offset 7, -8
 3336              		.cfi_offset 14, -4
 3337 128a 84B0     		sub	sp, sp, #16
 3338              	.LCFI97:
 3339              		.cfi_def_cfa_offset 24
 3340 128c 00AF     		add	r7, sp, #0
 3341              	.LCFI98:
 3342              		.cfi_def_cfa_register 7
 3343 128e 7860     		str	r0, [r7, #4]
 3344              	.LBB41:
1308:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 3345              		.loc 2 1308 0
 3346 1290 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3347 1294 F860     		str	r0, [r7, #12]
 3348 1296 FFF7FEFF 		bl	rt_interrupt_get_nest
 3349 129a 0346     		mov	r3, r0
 3350 129c 002B     		cmp	r3, #0
 3351 129e 11D0     		beq	.L226
 3352              		.loc 2 1308 0 is_stmt 0 discriminator 1
 3353 12a0 2048     		ldr	r0, .L231
 3354 12a2 2149     		ldr	r1, .L231+4
 3355 12a4 FFF7FEFF 		bl	rt_kprintf
 3356              	.LBB42:
 3357 12a8 4FF00003 		mov	r3, #0
 3358 12ac FB72     		strb	r3, [r7, #11]
 3359 12ae 1F48     		ldr	r0, .L231+8
 3360 12b0 1F49     		ldr	r1, .L231+12
 3361 12b2 1D4A     		ldr	r2, .L231+4
 3362 12b4 40F21C53 		movw	r3, #1308
 3363 12b8 FFF7FEFF 		bl	rt_kprintf
 3364              	.L227:
 3365              		.loc 2 1308 0 discriminator 4
 3366 12bc FB7A     		ldrb	r3, [r7, #11]
 3367 12be DBB2     		uxtb	r3, r3
 3368 12c0 002B     		cmp	r3, #0
 3369 12c2 FBD0     		beq	.L227
 3370              	.L226:
 3371              	.LBE42:
 3372              		.loc 2 1308 0 discriminator 2
 3373 12c4 F868     		ldr	r0, [r7, #12]
 3374 12c6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3375              	.LBE41:
1309:../src/os/rt-thread/src/ipc.c **** 
1310:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1311:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 3376              		.loc 2 1311 0 is_stmt 1 discriminator 2
 3377 12ca 7B68     		ldr	r3, [r7, #4]
 3378 12cc 002B     		cmp	r3, #0
 3379 12ce 0DD1     		bne	.L228
 3380              	.LBB43:
 3381              		.loc 2 1311 0 is_stmt 0 discriminator 1
 3382 12d0 4FF00003 		mov	r3, #0
 3383 12d4 BB72     		strb	r3, [r7, #10]
 3384 12d6 1548     		ldr	r0, .L231+8
 3385 12d8 1649     		ldr	r1, .L231+16
 3386 12da 134A     		ldr	r2, .L231+4
 3387 12dc 40F21F53 		movw	r3, #1311
 3388 12e0 FFF7FEFF 		bl	rt_kprintf
 3389              	.L229:
 3390              		.loc 2 1311 0 discriminator 2
 3391 12e4 BB7A     		ldrb	r3, [r7, #10]
 3392 12e6 DBB2     		uxtb	r3, r3
 3393 12e8 002B     		cmp	r3, #0
 3394 12ea FBD0     		beq	.L229
 3395              	.L228:
 3396              	.LBE43:
1312:../src/os/rt-thread/src/ipc.c **** 
1313:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
1314:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 3397              		.loc 2 1314 0 is_stmt 1
 3398 12ec 7B68     		ldr	r3, [r7, #4]
 3399 12ee 03F11003 		add	r3, r3, #16
 3400 12f2 1846     		mov	r0, r3
 3401 12f4 FEF732FF 		bl	rt_ipc_list_resume_all
1315:../src/os/rt-thread/src/ipc.c **** 
1316:../src/os/rt-thread/src/ipc.c **** 	/* also resume all mailbox private suspended thread */
1317:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 3402              		.loc 2 1317 0
 3403 12f8 7B68     		ldr	r3, [r7, #4]
 3404 12fa 03F12403 		add	r3, r3, #36
 3405 12fe 1846     		mov	r0, r3
 3406 1300 FEF72CFF 		bl	rt_ipc_list_resume_all
1318:../src/os/rt-thread/src/ipc.c **** 
1319:../src/os/rt-thread/src/ipc.c **** #if defined(RT_USING_MODULE) && defined(RT_USING_SLAB)
1320:../src/os/rt-thread/src/ipc.c **** 	/* the mb object belongs to an application module */
1321:../src/os/rt-thread/src/ipc.c **** 	if (mb->parent.parent.flag & RT_OBJECT_FLAG_MODULE)
1322:../src/os/rt-thread/src/ipc.c **** 		rt_module_free(mb->parent.parent.module_id, mb->msg_pool);
1323:../src/os/rt-thread/src/ipc.c **** 	else
1324:../src/os/rt-thread/src/ipc.c **** #endif
1325:../src/os/rt-thread/src/ipc.c **** 
1326:../src/os/rt-thread/src/ipc.c **** 	/* free mailbox pool */
1327:../src/os/rt-thread/src/ipc.c **** 	rt_free(mb->msg_pool);
 3407              		.loc 2 1327 0
 3408 1304 7B68     		ldr	r3, [r7, #4]
 3409 1306 9B69     		ldr	r3, [r3, #24]
 3410 1308 1846     		mov	r0, r3
 3411 130a FFF7FEFF 		bl	rt_free
1328:../src/os/rt-thread/src/ipc.c **** 
1329:../src/os/rt-thread/src/ipc.c **** 	/* delete mailbox object */
1330:../src/os/rt-thread/src/ipc.c **** 	rt_object_delete(&(mb->parent.parent));
 3412              		.loc 2 1330 0
 3413 130e 7B68     		ldr	r3, [r7, #4]
 3414 1310 1846     		mov	r0, r3
 3415 1312 FFF7FEFF 		bl	rt_object_delete
1331:../src/os/rt-thread/src/ipc.c **** 
1332:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 3416              		.loc 2 1332 0
 3417 1316 4FF00003 		mov	r3, #0
1333:../src/os/rt-thread/src/ipc.c **** }
 3418              		.loc 2 1333 0
 3419 131a 1846     		mov	r0, r3
 3420 131c 07F11007 		add	r7, r7, #16
 3421 1320 BD46     		mov	sp, r7
 3422 1322 80BD     		pop	{r7, pc}
 3423              	.L232:
 3424              		.align	2
 3425              	.L231:
 3426 1324 30000000 		.word	.LC2
 3427 1328 60010000 		.word	__FUNCTION__.5146
 3428 132c 00000000 		.word	.LC0
 3429 1330 54000000 		.word	.LC3
 3430 1334 80000000 		.word	.LC6
 3431              		.cfi_endproc
 3432              	.LFE34:
 3434              		.align	2
 3435              		.global	rt_mb_send_wait
 3436              		.thumb
 3437              		.thumb_func
 3439              	rt_mb_send_wait:
 3440              	.LFB35:
1334:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_delete);
1335:../src/os/rt-thread/src/ipc.c **** #endif
1336:../src/os/rt-thread/src/ipc.c **** 
1337:../src/os/rt-thread/src/ipc.c **** /**
1338:../src/os/rt-thread/src/ipc.c ****  * This function will send a mail to mailbox object. If the mailbox is full,
1339:../src/os/rt-thread/src/ipc.c ****  * current thread will be suspended until timeout.
1340:../src/os/rt-thread/src/ipc.c ****  *
1341:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1342:../src/os/rt-thread/src/ipc.c ****  * @param value the mail
1343:../src/os/rt-thread/src/ipc.c ****  * @param timeout the waiting time
1344:../src/os/rt-thread/src/ipc.c ****  *
1345:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1346:../src/os/rt-thread/src/ipc.c ****  */
1347:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_send_wait(rt_mailbox_t mb, rt_uint32_t value, rt_int32_t timeout)
1348:../src/os/rt-thread/src/ipc.c **** {
 3441              		.loc 2 1348 0
 3442              		.cfi_startproc
 3443              		@ args = 0, pretend = 0, frame = 32
 3444              		@ frame_needed = 1, uses_anonymous_args = 0
 3445 1338 90B5     		push	{r4, r7, lr}
 3446              	.LCFI99:
 3447              		.cfi_def_cfa_offset 12
 3448              		.cfi_offset 4, -12
 3449              		.cfi_offset 7, -8
 3450              		.cfi_offset 14, -4
 3451 133a 89B0     		sub	sp, sp, #36
 3452              	.LCFI100:
 3453              		.cfi_def_cfa_offset 48
 3454 133c 00AF     		add	r7, sp, #0
 3455              	.LCFI101:
 3456              		.cfi_def_cfa_register 7
 3457 133e F860     		str	r0, [r7, #12]
 3458 1340 B960     		str	r1, [r7, #8]
 3459 1342 7A60     		str	r2, [r7, #4]
1349:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
1350:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
1351:../src/os/rt-thread/src/ipc.c **** 	rt_uint32_t tick_delta;
1352:../src/os/rt-thread/src/ipc.c **** 
1353:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1354:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 3460              		.loc 2 1354 0
 3461 1344 FB68     		ldr	r3, [r7, #12]
 3462 1346 002B     		cmp	r3, #0
 3463 1348 0DD1     		bne	.L234
 3464              	.LBB44:
 3465              		.loc 2 1354 0 is_stmt 0 discriminator 1
 3466 134a 4FF00003 		mov	r3, #0
 3467 134e FB74     		strb	r3, [r7, #19]
 3468 1350 7548     		ldr	r0, .L249
 3469 1352 7649     		ldr	r1, .L249+4
 3470 1354 764A     		ldr	r2, .L249+8
 3471 1356 40F24A53 		movw	r3, #1354
 3472 135a FFF7FEFF 		bl	rt_kprintf
 3473              	.L235:
 3474              		.loc 2 1354 0 discriminator 2
 3475 135e FB7C     		ldrb	r3, [r7, #19]
 3476 1360 DBB2     		uxtb	r3, r3
 3477 1362 002B     		cmp	r3, #0
 3478 1364 FBD0     		beq	.L235
 3479              	.L234:
 3480              	.LBE44:
1355:../src/os/rt-thread/src/ipc.c **** 
1356:../src/os/rt-thread/src/ipc.c **** 	/* initialize delta tick */
1357:../src/os/rt-thread/src/ipc.c **** 	tick_delta = 0;
 3481              		.loc 2 1357 0 is_stmt 1
 3482 1366 4FF00003 		mov	r3, #0
 3483 136a FB61     		str	r3, [r7, #28]
1358:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
1359:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 3484              		.loc 2 1359 0
 3485 136c FFF7FEFF 		bl	rt_thread_self
 3486 1370 B861     		str	r0, [r7, #24]
1360:../src/os/rt-thread/src/ipc.c **** 
1361:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mb->parent.parent)));
 3487              		.loc 2 1361 0
 3488 1372 704B     		ldr	r3, .L249+12
 3489 1374 1B68     		ldr	r3, [r3, #0]
 3490 1376 002B     		cmp	r3, #0
 3491 1378 04D0     		beq	.L236
 3492              		.loc 2 1361 0 is_stmt 0 discriminator 1
 3493 137a 6E4B     		ldr	r3, .L249+12
 3494 137c 1B68     		ldr	r3, [r3, #0]
 3495 137e FA68     		ldr	r2, [r7, #12]
 3496 1380 1046     		mov	r0, r2
 3497 1382 9847     		blx	r3
 3498              	.L236:
1362:../src/os/rt-thread/src/ipc.c **** 
1363:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1364:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 3499              		.loc 2 1364 0 is_stmt 1
 3500 1384 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3501 1388 0346     		mov	r3, r0
 3502 138a 1C46     		mov	r4, r3
1365:../src/os/rt-thread/src/ipc.c **** 
1366:../src/os/rt-thread/src/ipc.c **** 	/* for non-blocking call */
1367:../src/os/rt-thread/src/ipc.c **** 	if (mb->entry == mb->size && timeout == 0)
 3503              		.loc 2 1367 0
 3504 138c FB68     		ldr	r3, [r7, #12]
 3505 138e DA8B     		ldrh	r2, [r3, #30]
 3506 1390 FB68     		ldr	r3, [r7, #12]
 3507 1392 9B8B     		ldrh	r3, [r3, #28]
 3508 1394 9A42     		cmp	r2, r3
 3509 1396 7BD1     		bne	.L248
 3510              		.loc 2 1367 0 is_stmt 0 discriminator 1
 3511 1398 7B68     		ldr	r3, [r7, #4]
 3512 139a 002B     		cmp	r3, #0
 3513 139c 78D1     		bne	.L248
1368:../src/os/rt-thread/src/ipc.c **** 	{
1369:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 3514              		.loc 2 1369 0 is_stmt 1
 3515 139e 2346     		mov	r3, r4
 3516 13a0 1846     		mov	r0, r3
 3517 13a2 FFF7FEFF 		bl	rt_hw_interrupt_enable
1370:../src/os/rt-thread/src/ipc.c **** 
1371:../src/os/rt-thread/src/ipc.c **** 		return -RT_EFULL;
 3518              		.loc 2 1371 0
 3519 13a6 6FF00203 		mvn	r3, #2
 3520 13aa B7E0     		b	.L238
 3521              	.L245:
1372:../src/os/rt-thread/src/ipc.c **** 	}
1373:../src/os/rt-thread/src/ipc.c **** 
1374:../src/os/rt-thread/src/ipc.c **** 	/* mailbox is full */
1375:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == mb->size)
1376:../src/os/rt-thread/src/ipc.c **** 	{
1377:../src/os/rt-thread/src/ipc.c **** 		/* reset error number in thread */
1378:../src/os/rt-thread/src/ipc.c **** 		thread->error = RT_EOK;
 3522              		.loc 2 1378 0
 3523 13ac BB69     		ldr	r3, [r7, #24]
 3524 13ae 4FF00002 		mov	r2, #0
 3525 13b2 DA62     		str	r2, [r3, #44]
1379:../src/os/rt-thread/src/ipc.c **** 
1380:../src/os/rt-thread/src/ipc.c **** 		/* no waiting, return timeout */
1381:../src/os/rt-thread/src/ipc.c **** 		if (timeout == 0)
 3526              		.loc 2 1381 0
 3527 13b4 7B68     		ldr	r3, [r7, #4]
 3528 13b6 002B     		cmp	r3, #0
 3529 13b8 06D1     		bne	.L240
1382:../src/os/rt-thread/src/ipc.c **** 		{
1383:../src/os/rt-thread/src/ipc.c **** 			/* enable interrupt */
1384:../src/os/rt-thread/src/ipc.c **** 			rt_hw_interrupt_enable(temp);
 3530              		.loc 2 1384 0
 3531 13ba 2346     		mov	r3, r4
 3532 13bc 1846     		mov	r0, r3
 3533 13be FFF7FEFF 		bl	rt_hw_interrupt_enable
1385:../src/os/rt-thread/src/ipc.c **** 
1386:../src/os/rt-thread/src/ipc.c **** 			return -RT_EFULL;
 3534              		.loc 2 1386 0
 3535 13c2 6FF00203 		mvn	r3, #2
 3536 13c6 A9E0     		b	.L238
 3537              	.L240:
 3538              	.LBB45:
1387:../src/os/rt-thread/src/ipc.c **** 		}
1388:../src/os/rt-thread/src/ipc.c **** 
1389:../src/os/rt-thread/src/ipc.c **** 		RT_DEBUG_NOT_IN_INTERRUPT;
 3539              		.loc 2 1389 0
 3540 13c8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3541 13cc 7861     		str	r0, [r7, #20]
 3542 13ce FFF7FEFF 		bl	rt_interrupt_get_nest
 3543 13d2 0346     		mov	r3, r0
 3544 13d4 002B     		cmp	r3, #0
 3545 13d6 11D0     		beq	.L241
 3546              		.loc 2 1389 0 is_stmt 0 discriminator 1
 3547 13d8 5748     		ldr	r0, .L249+16
 3548 13da 5549     		ldr	r1, .L249+8
 3549 13dc FFF7FEFF 		bl	rt_kprintf
 3550              	.LBB46:
 3551 13e0 4FF00003 		mov	r3, #0
 3552 13e4 BB74     		strb	r3, [r7, #18]
 3553 13e6 5048     		ldr	r0, .L249
 3554 13e8 5449     		ldr	r1, .L249+20
 3555 13ea 514A     		ldr	r2, .L249+8
 3556 13ec 40F26D53 		movw	r3, #1389
 3557 13f0 FFF7FEFF 		bl	rt_kprintf
 3558              	.L242:
 3559              		.loc 2 1389 0 discriminator 4
 3560 13f4 BB7C     		ldrb	r3, [r7, #18]
 3561 13f6 DBB2     		uxtb	r3, r3
 3562 13f8 002B     		cmp	r3, #0
 3563 13fa FBD0     		beq	.L242
 3564              	.L241:
 3565              	.LBE46:
 3566              		.loc 2 1389 0 discriminator 2
 3567 13fc 7869     		ldr	r0, [r7, #20]
 3568 13fe FFF7FEFF 		bl	rt_hw_interrupt_enable
 3569              	.LBE45:
1390:../src/os/rt-thread/src/ipc.c **** 		/* suspend current thread */
1391:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_suspend(&(mb->suspend_sender_thread), thread, mb->parent.parent.flag);
 3570              		.loc 2 1391 0 is_stmt 1 discriminator 2
 3571 1402 FB68     		ldr	r3, [r7, #12]
 3572 1404 03F12402 		add	r2, r3, #36
 3573 1408 FB68     		ldr	r3, [r7, #12]
 3574 140a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3575 140c 1046     		mov	r0, r2
 3576 140e B969     		ldr	r1, [r7, #24]
 3577 1410 1A46     		mov	r2, r3
 3578 1412 FEF741FE 		bl	rt_ipc_list_suspend
1392:../src/os/rt-thread/src/ipc.c **** 
1393:../src/os/rt-thread/src/ipc.c **** 		/* has waiting time, start thread timer */
1394:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 3579              		.loc 2 1394 0 discriminator 2
 3580 1416 7B68     		ldr	r3, [r7, #4]
 3581 1418 002B     		cmp	r3, #0
 3582 141a 13DD     		ble	.L243
1395:../src/os/rt-thread/src/ipc.c **** 		{
1396:../src/os/rt-thread/src/ipc.c **** 			/* get the start tick of timer */
1397:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get();
 3583              		.loc 2 1397 0
 3584 141c FFF7FEFF 		bl	rt_tick_get
 3585 1420 F861     		str	r0, [r7, #28]
1398:../src/os/rt-thread/src/ipc.c **** 
1399:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_LOG(RT_DEBUG_IPC,
1400:../src/os/rt-thread/src/ipc.c **** 				("mb_send_wait: start timer of thread:%s\n", thread->name));
1401:../src/os/rt-thread/src/ipc.c **** 
1402:../src/os/rt-thread/src/ipc.c **** 			/* reset the timeout of thread timer and start it */
1403:../src/os/rt-thread/src/ipc.c **** 			rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &timeout);
 3586              		.loc 2 1403 0
 3587 1422 BB69     		ldr	r3, [r7, #24]
 3588 1424 03F14802 		add	r2, r3, #72
 3589 1428 07F10403 		add	r3, r7, #4
 3590 142c 1046     		mov	r0, r2
 3591 142e 4FF00001 		mov	r1, #0
 3592 1432 1A46     		mov	r2, r3
 3593 1434 FFF7FEFF 		bl	rt_timer_control
1404:../src/os/rt-thread/src/ipc.c **** 			rt_timer_start(&(thread->thread_timer));
 3594              		.loc 2 1404 0
 3595 1438 BB69     		ldr	r3, [r7, #24]
 3596 143a 03F14803 		add	r3, r3, #72
 3597 143e 1846     		mov	r0, r3
 3598 1440 FFF7FEFF 		bl	rt_timer_start
 3599              	.L243:
1405:../src/os/rt-thread/src/ipc.c **** 		}
1406:../src/os/rt-thread/src/ipc.c **** 
1407:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1408:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 3600              		.loc 2 1408 0
 3601 1444 2346     		mov	r3, r4
 3602 1446 1846     		mov	r0, r3
 3603 1448 FFF7FEFF 		bl	rt_hw_interrupt_enable
1409:../src/os/rt-thread/src/ipc.c **** 
1410:../src/os/rt-thread/src/ipc.c **** 		/* re-schedule */
1411:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 3604              		.loc 2 1411 0
 3605 144c FFF7FEFF 		bl	rt_schedule
1412:../src/os/rt-thread/src/ipc.c **** 
1413:../src/os/rt-thread/src/ipc.c **** 		/* resume from suspend state */
1414:../src/os/rt-thread/src/ipc.c **** 		if (thread->error != RT_EOK)
 3606              		.loc 2 1414 0
 3607 1450 BB69     		ldr	r3, [r7, #24]
 3608 1452 DB6A     		ldr	r3, [r3, #44]
 3609 1454 002B     		cmp	r3, #0
 3610 1456 02D0     		beq	.L244
1415:../src/os/rt-thread/src/ipc.c **** 		{
1416:../src/os/rt-thread/src/ipc.c **** 			/* return error */
1417:../src/os/rt-thread/src/ipc.c **** 			return thread->error;
 3611              		.loc 2 1417 0
 3612 1458 BB69     		ldr	r3, [r7, #24]
 3613 145a DB6A     		ldr	r3, [r3, #44]
 3614 145c 5EE0     		b	.L238
 3615              	.L244:
1418:../src/os/rt-thread/src/ipc.c **** 		}
1419:../src/os/rt-thread/src/ipc.c **** 
1420:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
1421:../src/os/rt-thread/src/ipc.c **** 		temp = rt_hw_interrupt_disable();
 3616              		.loc 2 1421 0
 3617 145e FFF7FEFF 		bl	rt_hw_interrupt_disable
 3618 1462 0346     		mov	r3, r0
 3619 1464 1C46     		mov	r4, r3
1422:../src/os/rt-thread/src/ipc.c **** 
1423:../src/os/rt-thread/src/ipc.c **** 		/* if it's not waiting forever and then re-calculate timeout tick */
1424:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 3620              		.loc 2 1424 0
 3621 1466 7B68     		ldr	r3, [r7, #4]
 3622 1468 002B     		cmp	r3, #0
 3623 146a 12DD     		ble	.L239
1425:../src/os/rt-thread/src/ipc.c **** 		{
1426:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get() - tick_delta;
 3624              		.loc 2 1426 0
 3625 146c FFF7FEFF 		bl	rt_tick_get
 3626 1470 0246     		mov	r2, r0
 3627 1472 FB69     		ldr	r3, [r7, #28]
 3628 1474 D31A     		subs	r3, r2, r3
 3629 1476 FB61     		str	r3, [r7, #28]
1427:../src/os/rt-thread/src/ipc.c **** 			timeout -= tick_delta;
 3630              		.loc 2 1427 0
 3631 1478 7B68     		ldr	r3, [r7, #4]
 3632 147a 1A46     		mov	r2, r3
 3633 147c FB69     		ldr	r3, [r7, #28]
 3634 147e D31A     		subs	r3, r2, r3
 3635 1480 7B60     		str	r3, [r7, #4]
1428:../src/os/rt-thread/src/ipc.c **** 			if (timeout < 0)
 3636              		.loc 2 1428 0
 3637 1482 7B68     		ldr	r3, [r7, #4]
 3638 1484 002B     		cmp	r3, #0
 3639 1486 04DA     		bge	.L239
1429:../src/os/rt-thread/src/ipc.c **** 				timeout = 0;
 3640              		.loc 2 1429 0
 3641 1488 4FF00003 		mov	r3, #0
 3642 148c 7B60     		str	r3, [r7, #4]
 3643 148e 00E0     		b	.L239
 3644              	.L248:
1375:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == mb->size)
 3645              		.loc 2 1375 0
 3646 1490 00BF     		nop
 3647              	.L239:
1375:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == mb->size)
 3648              		.loc 2 1375 0 is_stmt 0 discriminator 1
 3649 1492 FB68     		ldr	r3, [r7, #12]
 3650 1494 DA8B     		ldrh	r2, [r3, #30]
 3651 1496 FB68     		ldr	r3, [r7, #12]
 3652 1498 9B8B     		ldrh	r3, [r3, #28]
 3653 149a 9A42     		cmp	r2, r3
 3654 149c 86D0     		beq	.L245
1430:../src/os/rt-thread/src/ipc.c **** 		}
1431:../src/os/rt-thread/src/ipc.c **** 	}
1432:../src/os/rt-thread/src/ipc.c **** 
1433:../src/os/rt-thread/src/ipc.c **** 	/* set ptr */
1434:../src/os/rt-thread/src/ipc.c **** 	mb->msg_pool[mb->in_offset] = value;
 3655              		.loc 2 1434 0 is_stmt 1
 3656 149e FB68     		ldr	r3, [r7, #12]
 3657 14a0 9A69     		ldr	r2, [r3, #24]
 3658 14a2 FB68     		ldr	r3, [r7, #12]
 3659 14a4 1B8C     		ldrh	r3, [r3, #32]
 3660 14a6 4FEA8303 		lsl	r3, r3, #2
 3661 14aa D318     		adds	r3, r2, r3
 3662 14ac BA68     		ldr	r2, [r7, #8]
 3663 14ae 1A60     		str	r2, [r3, #0]
1435:../src/os/rt-thread/src/ipc.c **** 	/* increase input offset */
1436:../src/os/rt-thread/src/ipc.c **** 	++ mb->in_offset;
 3664              		.loc 2 1436 0
 3665 14b0 FB68     		ldr	r3, [r7, #12]
 3666 14b2 1B8C     		ldrh	r3, [r3, #32]
 3667 14b4 03F10103 		add	r3, r3, #1
 3668 14b8 9AB2     		uxth	r2, r3
 3669 14ba FB68     		ldr	r3, [r7, #12]
 3670 14bc 1A84     		strh	r2, [r3, #32]	@ movhi
1437:../src/os/rt-thread/src/ipc.c **** 	if (mb->in_offset >= mb->size)
 3671              		.loc 2 1437 0
 3672 14be FB68     		ldr	r3, [r7, #12]
 3673 14c0 1A8C     		ldrh	r2, [r3, #32]
 3674 14c2 FB68     		ldr	r3, [r7, #12]
 3675 14c4 9B8B     		ldrh	r3, [r3, #28]
 3676 14c6 9A42     		cmp	r2, r3
 3677 14c8 03D3     		bcc	.L246
1438:../src/os/rt-thread/src/ipc.c **** 		mb->in_offset = 0;
 3678              		.loc 2 1438 0
 3679 14ca FB68     		ldr	r3, [r7, #12]
 3680 14cc 4FF00002 		mov	r2, #0
 3681 14d0 1A84     		strh	r2, [r3, #32]	@ movhi
 3682              	.L246:
1439:../src/os/rt-thread/src/ipc.c **** 	/* increase message entry */
1440:../src/os/rt-thread/src/ipc.c **** 	mb->entry ++;
 3683              		.loc 2 1440 0
 3684 14d2 FB68     		ldr	r3, [r7, #12]
 3685 14d4 DB8B     		ldrh	r3, [r3, #30]
 3686 14d6 03F10103 		add	r3, r3, #1
 3687 14da 9AB2     		uxth	r2, r3
 3688 14dc FB68     		ldr	r3, [r7, #12]
 3689 14de DA83     		strh	r2, [r3, #30]	@ movhi
1441:../src/os/rt-thread/src/ipc.c **** 
1442:../src/os/rt-thread/src/ipc.c **** 	/* resume suspended thread */
1443:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&mb->parent.suspend_thread))
 3690              		.loc 2 1443 0
 3691 14e0 FB68     		ldr	r3, [r7, #12]
 3692 14e2 03F11003 		add	r3, r3, #16
 3693 14e6 1846     		mov	r0, r3
 3694 14e8 FEF7B2FD 		bl	rt_list_isempty
 3695 14ec 0346     		mov	r3, r0
 3696 14ee 002B     		cmp	r3, #0
 3697 14f0 0ED1     		bne	.L247
1444:../src/os/rt-thread/src/ipc.c **** 	{
1445:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume(&(mb->parent.suspend_thread));
 3698              		.loc 2 1445 0
 3699 14f2 FB68     		ldr	r3, [r7, #12]
 3700 14f4 03F11003 		add	r3, r3, #16
 3701 14f8 1846     		mov	r0, r3
 3702 14fa FEF71BFE 		bl	rt_ipc_list_resume
1446:../src/os/rt-thread/src/ipc.c **** 
1447:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1448:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 3703              		.loc 2 1448 0
 3704 14fe 2346     		mov	r3, r4
 3705 1500 1846     		mov	r0, r3
 3706 1502 FFF7FEFF 		bl	rt_hw_interrupt_enable
1449:../src/os/rt-thread/src/ipc.c **** 
1450:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 3707              		.loc 2 1450 0
 3708 1506 FFF7FEFF 		bl	rt_schedule
1451:../src/os/rt-thread/src/ipc.c **** 
1452:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 3709              		.loc 2 1452 0
 3710 150a 4FF00003 		mov	r3, #0
 3711 150e 05E0     		b	.L238
 3712              	.L247:
1453:../src/os/rt-thread/src/ipc.c **** 	}
1454:../src/os/rt-thread/src/ipc.c **** 
1455:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1456:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 3713              		.loc 2 1456 0
 3714 1510 2346     		mov	r3, r4
 3715 1512 1846     		mov	r0, r3
 3716 1514 FFF7FEFF 		bl	rt_hw_interrupt_enable
1457:../src/os/rt-thread/src/ipc.c **** 
1458:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 3717              		.loc 2 1458 0
 3718 1518 4FF00003 		mov	r3, #0
 3719              	.L238:
1459:../src/os/rt-thread/src/ipc.c **** }
 3720              		.loc 2 1459 0
 3721 151c 1846     		mov	r0, r3
 3722 151e 07F12407 		add	r7, r7, #36
 3723 1522 BD46     		mov	sp, r7
 3724 1524 90BD     		pop	{r4, r7, pc}
 3725              	.L250:
 3726 1526 00BF     		.align	2
 3727              	.L249:
 3728 1528 00000000 		.word	.LC0
 3729 152c 80000000 		.word	.LC6
 3730 1530 50010000 		.word	__FUNCTION__.5164
 3731 1534 00000000 		.word	rt_object_put_hook
 3732 1538 30000000 		.word	.LC2
 3733 153c 54000000 		.word	.LC3
 3734              		.cfi_endproc
 3735              	.LFE35:
 3737              		.align	2
 3738              		.global	rt_mb_send
 3739              		.thumb
 3740              		.thumb_func
 3742              	rt_mb_send:
 3743              	.LFB36:
1460:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_send_wait);
1461:../src/os/rt-thread/src/ipc.c **** 
1462:../src/os/rt-thread/src/ipc.c **** /**
1463:../src/os/rt-thread/src/ipc.c ****  * This function will send a mail to mailbox object, if there are threads suspended
1464:../src/os/rt-thread/src/ipc.c ****  * on mailbox object, it will be waked up. This function will return immediately, if
1465:../src/os/rt-thread/src/ipc.c ****  * you want blocking send, use rt_mb_send_wait instead.
1466:../src/os/rt-thread/src/ipc.c ****  *
1467:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1468:../src/os/rt-thread/src/ipc.c ****  * @param value the mail
1469:../src/os/rt-thread/src/ipc.c ****  *
1470:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1471:../src/os/rt-thread/src/ipc.c ****  */
1472:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_send(rt_mailbox_t mb, rt_uint32_t value)
1473:../src/os/rt-thread/src/ipc.c **** {
 3744              		.loc 2 1473 0
 3745              		.cfi_startproc
 3746              		@ args = 0, pretend = 0, frame = 8
 3747              		@ frame_needed = 1, uses_anonymous_args = 0
 3748 1540 80B5     		push	{r7, lr}
 3749              	.LCFI102:
 3750              		.cfi_def_cfa_offset 8
 3751              		.cfi_offset 7, -8
 3752              		.cfi_offset 14, -4
 3753 1542 82B0     		sub	sp, sp, #8
 3754              	.LCFI103:
 3755              		.cfi_def_cfa_offset 16
 3756 1544 00AF     		add	r7, sp, #0
 3757              	.LCFI104:
 3758              		.cfi_def_cfa_register 7
 3759 1546 7860     		str	r0, [r7, #4]
 3760 1548 3960     		str	r1, [r7, #0]
1474:../src/os/rt-thread/src/ipc.c **** 	return rt_mb_send_wait(mb, value, 0);
 3761              		.loc 2 1474 0
 3762 154a 7868     		ldr	r0, [r7, #4]
 3763 154c 3968     		ldr	r1, [r7, #0]
 3764 154e 4FF00002 		mov	r2, #0
 3765 1552 FFF7FEFF 		bl	rt_mb_send_wait
 3766 1556 0346     		mov	r3, r0
1475:../src/os/rt-thread/src/ipc.c **** }
 3767              		.loc 2 1475 0
 3768 1558 1846     		mov	r0, r3
 3769 155a 07F10807 		add	r7, r7, #8
 3770 155e BD46     		mov	sp, r7
 3771 1560 80BD     		pop	{r7, pc}
 3772              		.cfi_endproc
 3773              	.LFE36:
 3775 1562 00BF     		.align	2
 3776              		.global	rt_mb_recv
 3777              		.thumb
 3778              		.thumb_func
 3780              	rt_mb_recv:
 3781              	.LFB37:
1476:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_send);
1477:../src/os/rt-thread/src/ipc.c **** 
1478:../src/os/rt-thread/src/ipc.c **** /**
1479:../src/os/rt-thread/src/ipc.c ****  * This function will receive a mail from mailbox object, if there is no mail in
1480:../src/os/rt-thread/src/ipc.c ****  * mailbox object, the thread shall wait for a specified time.
1481:../src/os/rt-thread/src/ipc.c ****  *
1482:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1483:../src/os/rt-thread/src/ipc.c ****  * @param value the received mail will be saved in
1484:../src/os/rt-thread/src/ipc.c ****  * @param timeout the waiting time
1485:../src/os/rt-thread/src/ipc.c ****  *
1486:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1487:../src/os/rt-thread/src/ipc.c ****  */
1488:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_uint32_t *value, rt_int32_t timeout)
1489:../src/os/rt-thread/src/ipc.c **** {
 3782              		.loc 2 1489 0
 3783              		.cfi_startproc
 3784              		@ args = 0, pretend = 0, frame = 32
 3785              		@ frame_needed = 1, uses_anonymous_args = 0
 3786 1564 90B5     		push	{r4, r7, lr}
 3787              	.LCFI105:
 3788              		.cfi_def_cfa_offset 12
 3789              		.cfi_offset 4, -12
 3790              		.cfi_offset 7, -8
 3791              		.cfi_offset 14, -4
 3792 1566 89B0     		sub	sp, sp, #36
 3793              	.LCFI106:
 3794              		.cfi_def_cfa_offset 48
 3795 1568 00AF     		add	r7, sp, #0
 3796              	.LCFI107:
 3797              		.cfi_def_cfa_register 7
 3798 156a F860     		str	r0, [r7, #12]
 3799 156c B960     		str	r1, [r7, #8]
 3800 156e 7A60     		str	r2, [r7, #4]
1490:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
1491:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
1492:../src/os/rt-thread/src/ipc.c **** 	rt_uint32_t tick_delta;
1493:../src/os/rt-thread/src/ipc.c **** 
1494:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1495:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 3801              		.loc 2 1495 0
 3802 1570 FB68     		ldr	r3, [r7, #12]
 3803 1572 002B     		cmp	r3, #0
 3804 1574 0DD1     		bne	.L254
 3805              	.LBB47:
 3806              		.loc 2 1495 0 is_stmt 0 discriminator 1
 3807 1576 4FF00003 		mov	r3, #0
 3808 157a FB74     		strb	r3, [r7, #19]
 3809 157c 7E48     		ldr	r0, .L271
 3810 157e 7F49     		ldr	r1, .L271+4
 3811 1580 7F4A     		ldr	r2, .L271+8
 3812 1582 40F2D753 		movw	r3, #1495
 3813 1586 FFF7FEFF 		bl	rt_kprintf
 3814              	.L255:
 3815              		.loc 2 1495 0 discriminator 2
 3816 158a FB7C     		ldrb	r3, [r7, #19]
 3817 158c DBB2     		uxtb	r3, r3
 3818 158e 002B     		cmp	r3, #0
 3819 1590 FBD0     		beq	.L255
 3820              	.L254:
 3821              	.LBE47:
1496:../src/os/rt-thread/src/ipc.c **** 
1497:../src/os/rt-thread/src/ipc.c **** 	/* initialize delta tick */
1498:../src/os/rt-thread/src/ipc.c **** 	tick_delta = 0;
 3822              		.loc 2 1498 0 is_stmt 1
 3823 1592 4FF00003 		mov	r3, #0
 3824 1596 FB61     		str	r3, [r7, #28]
1499:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
1500:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 3825              		.loc 2 1500 0
 3826 1598 FFF7FEFF 		bl	rt_thread_self
 3827 159c B861     		str	r0, [r7, #24]
1501:../src/os/rt-thread/src/ipc.c **** 
1502:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mb->parent.parent)));
 3828              		.loc 2 1502 0
 3829 159e 794B     		ldr	r3, .L271+12
 3830 15a0 1B68     		ldr	r3, [r3, #0]
 3831 15a2 002B     		cmp	r3, #0
 3832 15a4 04D0     		beq	.L256
 3833              		.loc 2 1502 0 is_stmt 0 discriminator 1
 3834 15a6 774B     		ldr	r3, .L271+12
 3835 15a8 1B68     		ldr	r3, [r3, #0]
 3836 15aa FA68     		ldr	r2, [r7, #12]
 3837 15ac 1046     		mov	r0, r2
 3838 15ae 9847     		blx	r3
 3839              	.L256:
1503:../src/os/rt-thread/src/ipc.c **** 
1504:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1505:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 3840              		.loc 2 1505 0 is_stmt 1
 3841 15b0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3842 15b4 0346     		mov	r3, r0
 3843 15b6 1C46     		mov	r4, r3
1506:../src/os/rt-thread/src/ipc.c **** 
1507:../src/os/rt-thread/src/ipc.c **** 	/* for non-blocking call */
1508:../src/os/rt-thread/src/ipc.c **** 	if (mb->entry == 0 && timeout == 0)
 3844              		.loc 2 1508 0
 3845 15b8 FB68     		ldr	r3, [r7, #12]
 3846 15ba DB8B     		ldrh	r3, [r3, #30]
 3847 15bc 002B     		cmp	r3, #0
 3848 15be 7FD1     		bne	.L270
 3849              		.loc 2 1508 0 is_stmt 0 discriminator 1
 3850 15c0 7B68     		ldr	r3, [r7, #4]
 3851 15c2 002B     		cmp	r3, #0
 3852 15c4 7CD1     		bne	.L270
1509:../src/os/rt-thread/src/ipc.c **** 	{
1510:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 3853              		.loc 2 1510 0 is_stmt 1
 3854 15c6 2346     		mov	r3, r4
 3855 15c8 1846     		mov	r0, r3
 3856 15ca FFF7FEFF 		bl	rt_hw_interrupt_enable
1511:../src/os/rt-thread/src/ipc.c **** 		
1512:../src/os/rt-thread/src/ipc.c **** 		return -RT_ETIMEOUT;
 3857              		.loc 2 1512 0
 3858 15ce 6FF00103 		mvn	r3, #1
 3859 15d2 CCE0     		b	.L258
 3860              	.L265:
1513:../src/os/rt-thread/src/ipc.c **** 	}
1514:../src/os/rt-thread/src/ipc.c **** 
1515:../src/os/rt-thread/src/ipc.c **** 	/* mailbox is empty */
1516:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == 0)
1517:../src/os/rt-thread/src/ipc.c **** 	{
1518:../src/os/rt-thread/src/ipc.c **** 		/* reset error number in thread */
1519:../src/os/rt-thread/src/ipc.c **** 		thread->error = RT_EOK;
 3861              		.loc 2 1519 0
 3862 15d4 BB69     		ldr	r3, [r7, #24]
 3863 15d6 4FF00002 		mov	r2, #0
 3864 15da DA62     		str	r2, [r3, #44]
1520:../src/os/rt-thread/src/ipc.c **** 
1521:../src/os/rt-thread/src/ipc.c **** 		/* no waiting, return timeout */
1522:../src/os/rt-thread/src/ipc.c **** 		if (timeout == 0)
 3865              		.loc 2 1522 0
 3866 15dc 7B68     		ldr	r3, [r7, #4]
 3867 15de 002B     		cmp	r3, #0
 3868 15e0 0AD1     		bne	.L260
1523:../src/os/rt-thread/src/ipc.c **** 		{
1524:../src/os/rt-thread/src/ipc.c **** 			/* enable interrupt */
1525:../src/os/rt-thread/src/ipc.c **** 			rt_hw_interrupt_enable(temp);
 3869              		.loc 2 1525 0
 3870 15e2 2346     		mov	r3, r4
 3871 15e4 1846     		mov	r0, r3
 3872 15e6 FFF7FEFF 		bl	rt_hw_interrupt_enable
1526:../src/os/rt-thread/src/ipc.c **** 
1527:../src/os/rt-thread/src/ipc.c **** 			thread->error = -RT_ETIMEOUT;
 3873              		.loc 2 1527 0
 3874 15ea BB69     		ldr	r3, [r7, #24]
 3875 15ec 6FF00102 		mvn	r2, #1
 3876 15f0 DA62     		str	r2, [r3, #44]
1528:../src/os/rt-thread/src/ipc.c **** 			
1529:../src/os/rt-thread/src/ipc.c **** 			return -RT_ETIMEOUT;
 3877              		.loc 2 1529 0
 3878 15f2 6FF00103 		mvn	r3, #1
 3879 15f6 BAE0     		b	.L258
 3880              	.L260:
 3881              	.LBB48:
1530:../src/os/rt-thread/src/ipc.c **** 		}
1531:../src/os/rt-thread/src/ipc.c **** 
1532:../src/os/rt-thread/src/ipc.c **** 		RT_DEBUG_NOT_IN_INTERRUPT;
 3882              		.loc 2 1532 0
 3883 15f8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3884 15fc 7861     		str	r0, [r7, #20]
 3885 15fe FFF7FEFF 		bl	rt_interrupt_get_nest
 3886 1602 0346     		mov	r3, r0
 3887 1604 002B     		cmp	r3, #0
 3888 1606 11D0     		beq	.L261
 3889              		.loc 2 1532 0 is_stmt 0 discriminator 1
 3890 1608 5F48     		ldr	r0, .L271+16
 3891 160a 5D49     		ldr	r1, .L271+8
 3892 160c FFF7FEFF 		bl	rt_kprintf
 3893              	.LBB49:
 3894 1610 4FF00003 		mov	r3, #0
 3895 1614 BB74     		strb	r3, [r7, #18]
 3896 1616 5848     		ldr	r0, .L271
 3897 1618 5C49     		ldr	r1, .L271+20
 3898 161a 594A     		ldr	r2, .L271+8
 3899 161c 40F2FC53 		movw	r3, #1532
 3900 1620 FFF7FEFF 		bl	rt_kprintf
 3901              	.L262:
 3902              		.loc 2 1532 0 discriminator 4
 3903 1624 BB7C     		ldrb	r3, [r7, #18]
 3904 1626 DBB2     		uxtb	r3, r3
 3905 1628 002B     		cmp	r3, #0
 3906 162a FBD0     		beq	.L262
 3907              	.L261:
 3908              	.LBE49:
 3909              		.loc 2 1532 0 discriminator 2
 3910 162c 7869     		ldr	r0, [r7, #20]
 3911 162e FFF7FEFF 		bl	rt_hw_interrupt_enable
 3912              	.LBE48:
1533:../src/os/rt-thread/src/ipc.c **** 		/* suspend current thread */
1534:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_suspend(&(mb->parent.suspend_thread), thread, mb->parent.parent.flag);
 3913              		.loc 2 1534 0 is_stmt 1 discriminator 2
 3914 1632 FB68     		ldr	r3, [r7, #12]
 3915 1634 03F11002 		add	r2, r3, #16
 3916 1638 FB68     		ldr	r3, [r7, #12]
 3917 163a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3918 163c 1046     		mov	r0, r2
 3919 163e B969     		ldr	r1, [r7, #24]
 3920 1640 1A46     		mov	r2, r3
 3921 1642 FEF729FD 		bl	rt_ipc_list_suspend
1535:../src/os/rt-thread/src/ipc.c **** 
1536:../src/os/rt-thread/src/ipc.c **** 		/* has waiting time, start thread timer */
1537:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 3922              		.loc 2 1537 0 discriminator 2
 3923 1646 7B68     		ldr	r3, [r7, #4]
 3924 1648 002B     		cmp	r3, #0
 3925 164a 13DD     		ble	.L263
1538:../src/os/rt-thread/src/ipc.c **** 		{
1539:../src/os/rt-thread/src/ipc.c **** 			/* get the start tick of timer */
1540:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get();
 3926              		.loc 2 1540 0
 3927 164c FFF7FEFF 		bl	rt_tick_get
 3928 1650 F861     		str	r0, [r7, #28]
1541:../src/os/rt-thread/src/ipc.c **** 
1542:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_LOG(RT_DEBUG_IPC,
1543:../src/os/rt-thread/src/ipc.c **** 				("mb_recv: start timer of thread:%s\n", thread->name));
1544:../src/os/rt-thread/src/ipc.c **** 
1545:../src/os/rt-thread/src/ipc.c **** 			/* reset the timeout of thread timer and start it */
1546:../src/os/rt-thread/src/ipc.c **** 			rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &timeout);
 3929              		.loc 2 1546 0
 3930 1652 BB69     		ldr	r3, [r7, #24]
 3931 1654 03F14802 		add	r2, r3, #72
 3932 1658 07F10403 		add	r3, r7, #4
 3933 165c 1046     		mov	r0, r2
 3934 165e 4FF00001 		mov	r1, #0
 3935 1662 1A46     		mov	r2, r3
 3936 1664 FFF7FEFF 		bl	rt_timer_control
1547:../src/os/rt-thread/src/ipc.c **** 			rt_timer_start(&(thread->thread_timer));
 3937              		.loc 2 1547 0
 3938 1668 BB69     		ldr	r3, [r7, #24]
 3939 166a 03F14803 		add	r3, r3, #72
 3940 166e 1846     		mov	r0, r3
 3941 1670 FFF7FEFF 		bl	rt_timer_start
 3942              	.L263:
1548:../src/os/rt-thread/src/ipc.c **** 		}
1549:../src/os/rt-thread/src/ipc.c **** 
1550:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1551:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 3943              		.loc 2 1551 0
 3944 1674 2346     		mov	r3, r4
 3945 1676 1846     		mov	r0, r3
 3946 1678 FFF7FEFF 		bl	rt_hw_interrupt_enable
1552:../src/os/rt-thread/src/ipc.c **** 
1553:../src/os/rt-thread/src/ipc.c **** 		/* re-schedule */
1554:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 3947              		.loc 2 1554 0
 3948 167c FFF7FEFF 		bl	rt_schedule
1555:../src/os/rt-thread/src/ipc.c **** 
1556:../src/os/rt-thread/src/ipc.c **** 		/* resume from suspend state */
1557:../src/os/rt-thread/src/ipc.c **** 		if (thread->error != RT_EOK)
 3949              		.loc 2 1557 0
 3950 1680 BB69     		ldr	r3, [r7, #24]
 3951 1682 DB6A     		ldr	r3, [r3, #44]
 3952 1684 002B     		cmp	r3, #0
 3953 1686 02D0     		beq	.L264
1558:../src/os/rt-thread/src/ipc.c **** 		{
1559:../src/os/rt-thread/src/ipc.c **** 			/* return error */
1560:../src/os/rt-thread/src/ipc.c **** 			return thread->error;
 3954              		.loc 2 1560 0
 3955 1688 BB69     		ldr	r3, [r7, #24]
 3956 168a DB6A     		ldr	r3, [r3, #44]
 3957 168c 6FE0     		b	.L258
 3958              	.L264:
1561:../src/os/rt-thread/src/ipc.c **** 		}
1562:../src/os/rt-thread/src/ipc.c **** 
1563:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
1564:../src/os/rt-thread/src/ipc.c **** 		temp = rt_hw_interrupt_disable();
 3959              		.loc 2 1564 0
 3960 168e FFF7FEFF 		bl	rt_hw_interrupt_disable
 3961 1692 0346     		mov	r3, r0
 3962 1694 1C46     		mov	r4, r3
1565:../src/os/rt-thread/src/ipc.c **** 
1566:../src/os/rt-thread/src/ipc.c **** 		/* if it's not waiting forever and then re-calculate timeout tick */
1567:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 3963              		.loc 2 1567 0
 3964 1696 7B68     		ldr	r3, [r7, #4]
 3965 1698 002B     		cmp	r3, #0
 3966 169a 12DD     		ble	.L259
1568:../src/os/rt-thread/src/ipc.c **** 		{
1569:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get() - tick_delta;
 3967              		.loc 2 1569 0
 3968 169c FFF7FEFF 		bl	rt_tick_get
 3969 16a0 0246     		mov	r2, r0
 3970 16a2 FB69     		ldr	r3, [r7, #28]
 3971 16a4 D31A     		subs	r3, r2, r3
 3972 16a6 FB61     		str	r3, [r7, #28]
1570:../src/os/rt-thread/src/ipc.c **** 			timeout -= tick_delta;
 3973              		.loc 2 1570 0
 3974 16a8 7B68     		ldr	r3, [r7, #4]
 3975 16aa 1A46     		mov	r2, r3
 3976 16ac FB69     		ldr	r3, [r7, #28]
 3977 16ae D31A     		subs	r3, r2, r3
 3978 16b0 7B60     		str	r3, [r7, #4]
1571:../src/os/rt-thread/src/ipc.c **** 			if (timeout < 0)
 3979              		.loc 2 1571 0
 3980 16b2 7B68     		ldr	r3, [r7, #4]
 3981 16b4 002B     		cmp	r3, #0
 3982 16b6 04DA     		bge	.L259
1572:../src/os/rt-thread/src/ipc.c **** 				timeout = 0;
 3983              		.loc 2 1572 0
 3984 16b8 4FF00003 		mov	r3, #0
 3985 16bc 7B60     		str	r3, [r7, #4]
 3986 16be 00E0     		b	.L259
 3987              	.L270:
1516:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == 0)
 3988              		.loc 2 1516 0
 3989 16c0 00BF     		nop
 3990              	.L259:
1516:../src/os/rt-thread/src/ipc.c **** 	while (mb->entry == 0)
 3991              		.loc 2 1516 0 is_stmt 0 discriminator 1
 3992 16c2 FB68     		ldr	r3, [r7, #12]
 3993 16c4 DB8B     		ldrh	r3, [r3, #30]
 3994 16c6 002B     		cmp	r3, #0
 3995 16c8 84D0     		beq	.L265
1573:../src/os/rt-thread/src/ipc.c **** 		}
1574:../src/os/rt-thread/src/ipc.c **** 	}
1575:../src/os/rt-thread/src/ipc.c **** 
1576:../src/os/rt-thread/src/ipc.c **** 	/* fill ptr */
1577:../src/os/rt-thread/src/ipc.c **** 	*value = mb->msg_pool[mb->out_offset];
 3996              		.loc 2 1577 0 is_stmt 1
 3997 16ca FB68     		ldr	r3, [r7, #12]
 3998 16cc 9A69     		ldr	r2, [r3, #24]
 3999 16ce FB68     		ldr	r3, [r7, #12]
 4000 16d0 5B8C     		ldrh	r3, [r3, #34]
 4001 16d2 4FEA8303 		lsl	r3, r3, #2
 4002 16d6 D318     		adds	r3, r2, r3
 4003 16d8 1A68     		ldr	r2, [r3, #0]
 4004 16da BB68     		ldr	r3, [r7, #8]
 4005 16dc 1A60     		str	r2, [r3, #0]
1578:../src/os/rt-thread/src/ipc.c **** 
1579:../src/os/rt-thread/src/ipc.c **** 	/* increase output offset */
1580:../src/os/rt-thread/src/ipc.c **** 	++ mb->out_offset;
 4006              		.loc 2 1580 0
 4007 16de FB68     		ldr	r3, [r7, #12]
 4008 16e0 5B8C     		ldrh	r3, [r3, #34]
 4009 16e2 03F10103 		add	r3, r3, #1
 4010 16e6 9AB2     		uxth	r2, r3
 4011 16e8 FB68     		ldr	r3, [r7, #12]
 4012 16ea 5A84     		strh	r2, [r3, #34]	@ movhi
1581:../src/os/rt-thread/src/ipc.c **** 	if (mb->out_offset >= mb->size)
 4013              		.loc 2 1581 0
 4014 16ec FB68     		ldr	r3, [r7, #12]
 4015 16ee 5A8C     		ldrh	r2, [r3, #34]
 4016 16f0 FB68     		ldr	r3, [r7, #12]
 4017 16f2 9B8B     		ldrh	r3, [r3, #28]
 4018 16f4 9A42     		cmp	r2, r3
 4019 16f6 03D3     		bcc	.L266
1582:../src/os/rt-thread/src/ipc.c **** 		mb->out_offset = 0;
 4020              		.loc 2 1582 0
 4021 16f8 FB68     		ldr	r3, [r7, #12]
 4022 16fa 4FF00002 		mov	r2, #0
 4023 16fe 5A84     		strh	r2, [r3, #34]	@ movhi
 4024              	.L266:
1583:../src/os/rt-thread/src/ipc.c **** 	/* decrease message entry */
1584:../src/os/rt-thread/src/ipc.c **** 	mb->entry --;
 4025              		.loc 2 1584 0
 4026 1700 FB68     		ldr	r3, [r7, #12]
 4027 1702 DB8B     		ldrh	r3, [r3, #30]
 4028 1704 03F1FF33 		add	r3, r3, #-1
 4029 1708 9AB2     		uxth	r2, r3
 4030 170a FB68     		ldr	r3, [r7, #12]
 4031 170c DA83     		strh	r2, [r3, #30]	@ movhi
1585:../src/os/rt-thread/src/ipc.c **** 
1586:../src/os/rt-thread/src/ipc.c **** 	/* resume suspended thread */
1587:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&(mb->suspend_sender_thread)))
 4032              		.loc 2 1587 0
 4033 170e FB68     		ldr	r3, [r7, #12]
 4034 1710 03F12403 		add	r3, r3, #36
 4035 1714 1846     		mov	r0, r3
 4036 1716 FEF79BFC 		bl	rt_list_isempty
 4037 171a 0346     		mov	r3, r0
 4038 171c 002B     		cmp	r3, #0
 4039 171e 17D1     		bne	.L267
1588:../src/os/rt-thread/src/ipc.c **** 	{
1589:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume(&(mb->suspend_sender_thread));
 4040              		.loc 2 1589 0
 4041 1720 FB68     		ldr	r3, [r7, #12]
 4042 1722 03F12403 		add	r3, r3, #36
 4043 1726 1846     		mov	r0, r3
 4044 1728 FEF704FD 		bl	rt_ipc_list_resume
1590:../src/os/rt-thread/src/ipc.c **** 
1591:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1592:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 4045              		.loc 2 1592 0
 4046 172c 2346     		mov	r3, r4
 4047 172e 1846     		mov	r0, r3
 4048 1730 FFF7FEFF 		bl	rt_hw_interrupt_enable
1593:../src/os/rt-thread/src/ipc.c **** 
1594:../src/os/rt-thread/src/ipc.c **** 		RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
 4049              		.loc 2 1594 0
 4050 1734 164B     		ldr	r3, .L271+24
 4051 1736 1B68     		ldr	r3, [r3, #0]
 4052 1738 002B     		cmp	r3, #0
 4053 173a 04D0     		beq	.L268
 4054              		.loc 2 1594 0 is_stmt 0 discriminator 1
 4055 173c 144B     		ldr	r3, .L271+24
 4056 173e 1B68     		ldr	r3, [r3, #0]
 4057 1740 FA68     		ldr	r2, [r7, #12]
 4058 1742 1046     		mov	r0, r2
 4059 1744 9847     		blx	r3
 4060              	.L268:
1595:../src/os/rt-thread/src/ipc.c **** 
1596:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 4061              		.loc 2 1596 0 is_stmt 1
 4062 1746 FFF7FEFF 		bl	rt_schedule
1597:../src/os/rt-thread/src/ipc.c **** 
1598:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 4063              		.loc 2 1598 0
 4064 174a 4FF00003 		mov	r3, #0
 4065 174e 0EE0     		b	.L258
 4066              	.L267:
1599:../src/os/rt-thread/src/ipc.c **** 	}
1600:../src/os/rt-thread/src/ipc.c **** 
1601:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1602:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 4067              		.loc 2 1602 0
 4068 1750 2346     		mov	r3, r4
 4069 1752 1846     		mov	r0, r3
 4070 1754 FFF7FEFF 		bl	rt_hw_interrupt_enable
1603:../src/os/rt-thread/src/ipc.c **** 
1604:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
 4071              		.loc 2 1604 0
 4072 1758 0D4B     		ldr	r3, .L271+24
 4073 175a 1B68     		ldr	r3, [r3, #0]
 4074 175c 002B     		cmp	r3, #0
 4075 175e 04D0     		beq	.L269
 4076              		.loc 2 1604 0 is_stmt 0 discriminator 1
 4077 1760 0B4B     		ldr	r3, .L271+24
 4078 1762 1B68     		ldr	r3, [r3, #0]
 4079 1764 FA68     		ldr	r2, [r7, #12]
 4080 1766 1046     		mov	r0, r2
 4081 1768 9847     		blx	r3
 4082              	.L269:
1605:../src/os/rt-thread/src/ipc.c **** 
1606:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 4083              		.loc 2 1606 0 is_stmt 1
 4084 176a 4FF00003 		mov	r3, #0
 4085              	.L258:
1607:../src/os/rt-thread/src/ipc.c **** }
 4086              		.loc 2 1607 0
 4087 176e 1846     		mov	r0, r3
 4088 1770 07F12407 		add	r7, r7, #36
 4089 1774 BD46     		mov	sp, r7
 4090 1776 90BD     		pop	{r4, r7, pc}
 4091              	.L272:
 4092              		.align	2
 4093              	.L271:
 4094 1778 00000000 		.word	.LC0
 4095 177c 80000000 		.word	.LC6
 4096 1780 44010000 		.word	__FUNCTION__.5189
 4097 1784 00000000 		.word	rt_object_trytake_hook
 4098 1788 30000000 		.word	.LC2
 4099 178c 54000000 		.word	.LC3
 4100 1790 00000000 		.word	rt_object_take_hook
 4101              		.cfi_endproc
 4102              	.LFE37:
 4104              		.align	2
 4105              		.global	rt_mb_control
 4106              		.thumb
 4107              		.thumb_func
 4109              	rt_mb_control:
 4110              	.LFB38:
1608:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_recv);
1609:../src/os/rt-thread/src/ipc.c **** 
1610:../src/os/rt-thread/src/ipc.c **** /**
1611:../src/os/rt-thread/src/ipc.c ****  * This function can get or set some extra attributions of a mailbox object.
1612:../src/os/rt-thread/src/ipc.c ****  *
1613:../src/os/rt-thread/src/ipc.c ****  * @param mb the mailbox object
1614:../src/os/rt-thread/src/ipc.c ****  * @param cmd the execution command
1615:../src/os/rt-thread/src/ipc.c ****  * @param arg the execution argument
1616:../src/os/rt-thread/src/ipc.c ****  *
1617:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1618:../src/os/rt-thread/src/ipc.c ****  */
1619:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mb_control(rt_mailbox_t mb, rt_uint8_t cmd, void *arg)
1620:../src/os/rt-thread/src/ipc.c **** {
 4111              		.loc 2 1620 0
 4112              		.cfi_startproc
 4113              		@ args = 0, pretend = 0, frame = 24
 4114              		@ frame_needed = 1, uses_anonymous_args = 0
 4115 1794 80B5     		push	{r7, lr}
 4116              	.LCFI108:
 4117              		.cfi_def_cfa_offset 8
 4118              		.cfi_offset 7, -8
 4119              		.cfi_offset 14, -4
 4120 1796 86B0     		sub	sp, sp, #24
 4121              	.LCFI109:
 4122              		.cfi_def_cfa_offset 32
 4123 1798 00AF     		add	r7, sp, #0
 4124              	.LCFI110:
 4125              		.cfi_def_cfa_register 7
 4126 179a F860     		str	r0, [r7, #12]
 4127 179c 0B46     		mov	r3, r1
 4128 179e 7A60     		str	r2, [r7, #4]
 4129 17a0 FB72     		strb	r3, [r7, #11]
1621:../src/os/rt-thread/src/ipc.c **** 	rt_ubase_t level;
1622:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mb != RT_NULL);
 4130              		.loc 2 1622 0
 4131 17a2 FB68     		ldr	r3, [r7, #12]
 4132 17a4 002B     		cmp	r3, #0
 4133 17a6 0DD1     		bne	.L274
 4134              	.LBB50:
 4135              		.loc 2 1622 0 is_stmt 0 discriminator 1
 4136 17a8 4FF00003 		mov	r3, #0
 4137 17ac FB74     		strb	r3, [r7, #19]
 4138 17ae 1D48     		ldr	r0, .L278
 4139 17b0 1D49     		ldr	r1, .L278+4
 4140 17b2 1E4A     		ldr	r2, .L278+8
 4141 17b4 40F25663 		movw	r3, #1622
 4142 17b8 FFF7FEFF 		bl	rt_kprintf
 4143              	.L275:
 4144              		.loc 2 1622 0 discriminator 2
 4145 17bc FB7C     		ldrb	r3, [r7, #19]
 4146 17be DBB2     		uxtb	r3, r3
 4147 17c0 002B     		cmp	r3, #0
 4148 17c2 FBD0     		beq	.L275
 4149              	.L274:
 4150              	.LBE50:
1623:../src/os/rt-thread/src/ipc.c **** 
1624:../src/os/rt-thread/src/ipc.c **** 	if (cmd == RT_IPC_CMD_RESET)
 4151              		.loc 2 1624 0 is_stmt 1
 4152 17c4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4153 17c6 012B     		cmp	r3, #1
 4154 17c8 24D1     		bne	.L276
1625:../src/os/rt-thread/src/ipc.c **** 	{
1626:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
1627:../src/os/rt-thread/src/ipc.c **** 		level = rt_hw_interrupt_disable();
 4155              		.loc 2 1627 0
 4156 17ca FFF7FEFF 		bl	rt_hw_interrupt_disable
 4157 17ce 0346     		mov	r3, r0
 4158 17d0 7B61     		str	r3, [r7, #20]
1628:../src/os/rt-thread/src/ipc.c **** 
1629:../src/os/rt-thread/src/ipc.c **** 		/* resume all waiting thread */
1630:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 4159              		.loc 2 1630 0
 4160 17d2 FB68     		ldr	r3, [r7, #12]
 4161 17d4 03F11003 		add	r3, r3, #16
 4162 17d8 1846     		mov	r0, r3
 4163 17da FEF7BFFC 		bl	rt_ipc_list_resume_all
1631:../src/os/rt-thread/src/ipc.c **** 		/* also resume all mailbox private suspended thread */
1632:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 4164              		.loc 2 1632 0
 4165 17de FB68     		ldr	r3, [r7, #12]
 4166 17e0 03F12403 		add	r3, r3, #36
 4167 17e4 1846     		mov	r0, r3
 4168 17e6 FEF7B9FC 		bl	rt_ipc_list_resume_all
1633:../src/os/rt-thread/src/ipc.c **** 
1634:../src/os/rt-thread/src/ipc.c **** 		/* re-init mailbox */
1635:../src/os/rt-thread/src/ipc.c **** 		mb->entry      = 0;
 4169              		.loc 2 1635 0
 4170 17ea FB68     		ldr	r3, [r7, #12]
 4171 17ec 4FF00002 		mov	r2, #0
 4172 17f0 DA83     		strh	r2, [r3, #30]	@ movhi
1636:../src/os/rt-thread/src/ipc.c **** 		mb->in_offset  = 0;
 4173              		.loc 2 1636 0
 4174 17f2 FB68     		ldr	r3, [r7, #12]
 4175 17f4 4FF00002 		mov	r2, #0
 4176 17f8 1A84     		strh	r2, [r3, #32]	@ movhi
1637:../src/os/rt-thread/src/ipc.c **** 		mb->out_offset = 0;
 4177              		.loc 2 1637 0
 4178 17fa FB68     		ldr	r3, [r7, #12]
 4179 17fc 4FF00002 		mov	r2, #0
 4180 1800 5A84     		strh	r2, [r3, #34]	@ movhi
1638:../src/os/rt-thread/src/ipc.c **** 
1639:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1640:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(level);
 4181              		.loc 2 1640 0
 4182 1802 7B69     		ldr	r3, [r7, #20]
 4183 1804 1846     		mov	r0, r3
 4184 1806 FFF7FEFF 		bl	rt_hw_interrupt_enable
1641:../src/os/rt-thread/src/ipc.c **** 
1642:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 4185              		.loc 2 1642 0
 4186 180a FFF7FEFF 		bl	rt_schedule
1643:../src/os/rt-thread/src/ipc.c **** 
1644:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 4187              		.loc 2 1644 0
 4188 180e 4FF00003 		mov	r3, #0
 4189 1812 01E0     		b	.L277
 4190              	.L276:
1645:../src/os/rt-thread/src/ipc.c **** 	}
1646:../src/os/rt-thread/src/ipc.c **** 
1647:../src/os/rt-thread/src/ipc.c **** 	return -RT_ERROR;
 4191              		.loc 2 1647 0
 4192 1814 4FF0FF33 		mov	r3, #-1
 4193              	.L277:
1648:../src/os/rt-thread/src/ipc.c **** }
 4194              		.loc 2 1648 0
 4195 1818 1846     		mov	r0, r3
 4196 181a 07F11807 		add	r7, r7, #24
 4197 181e BD46     		mov	sp, r7
 4198 1820 80BD     		pop	{r7, pc}
 4199              	.L279:
 4200 1822 00BF     		.align	2
 4201              	.L278:
 4202 1824 00000000 		.word	.LC0
 4203 1828 80000000 		.word	.LC6
 4204 182c 34010000 		.word	__FUNCTION__.5208
 4205              		.cfi_endproc
 4206              	.LFE38:
 4208              		.section	.rodata
 4209 008e 0000     		.align	2
 4210              	.LC7:
 4211 0090 6D712021 		.ascii	"mq != RT_NULL\000"
 4211      3D205254 
 4211      5F4E554C 
 4211      4C00
 4212              		.text
 4213              		.align	2
 4214              		.global	rt_mq_init
 4215              		.thumb
 4216              		.thumb_func
 4218              	rt_mq_init:
 4219              	.LFB39:
1649:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mb_control); 
1650:../src/os/rt-thread/src/ipc.c **** #endif /* end of RT_USING_MAILBOX */
1651:../src/os/rt-thread/src/ipc.c **** 
1652:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_MESSAGEQUEUE
1653:../src/os/rt-thread/src/ipc.c **** struct rt_mq_message
1654:../src/os/rt-thread/src/ipc.c **** {
1655:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *next;
1656:../src/os/rt-thread/src/ipc.c **** };
1657:../src/os/rt-thread/src/ipc.c **** 
1658:../src/os/rt-thread/src/ipc.c **** /**
1659:../src/os/rt-thread/src/ipc.c ****  * This function will initialize a message queue and put it under control of resource
1660:../src/os/rt-thread/src/ipc.c ****  * management.
1661:../src/os/rt-thread/src/ipc.c ****  *
1662:../src/os/rt-thread/src/ipc.c ****  * @param mq the message object
1663:../src/os/rt-thread/src/ipc.c ****  * @param name the name of message queue
1664:../src/os/rt-thread/src/ipc.c ****  * @param msgpool the beginning address of buffer to save messages
1665:../src/os/rt-thread/src/ipc.c ****  * @param msg_size the maximum size of message
1666:../src/os/rt-thread/src/ipc.c ****  * @param pool_size the size of buffer to save messages
1667:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of message queue
1668:../src/os/rt-thread/src/ipc.c ****  *
1669:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1670:../src/os/rt-thread/src/ipc.c ****  */
1671:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_init(rt_mq_t mq, const char *name, void *msgpool, rt_size_t msg_size, rt_size_t pool
1672:../src/os/rt-thread/src/ipc.c **** {
 4220              		.loc 2 1672 0
 4221              		.cfi_startproc
 4222              		@ args = 8, pretend = 0, frame = 24
 4223              		@ frame_needed = 1, uses_anonymous_args = 0
 4224 1830 90B5     		push	{r4, r7, lr}
 4225              	.LCFI111:
 4226              		.cfi_def_cfa_offset 12
 4227              		.cfi_offset 4, -12
 4228              		.cfi_offset 7, -8
 4229              		.cfi_offset 14, -4
 4230 1832 87B0     		sub	sp, sp, #28
 4231              	.LCFI112:
 4232              		.cfi_def_cfa_offset 40
 4233 1834 00AF     		add	r7, sp, #0
 4234              	.LCFI113:
 4235              		.cfi_def_cfa_register 7
 4236 1836 F860     		str	r0, [r7, #12]
 4237 1838 B960     		str	r1, [r7, #8]
 4238 183a 7A60     		str	r2, [r7, #4]
 4239 183c 3B60     		str	r3, [r7, #0]
1673:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *head;
1674:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
1675:../src/os/rt-thread/src/ipc.c **** 
1676:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1677:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 4240              		.loc 2 1677 0
 4241 183e FB68     		ldr	r3, [r7, #12]
 4242 1840 002B     		cmp	r3, #0
 4243 1842 0DD1     		bne	.L281
 4244              	.LBB51:
 4245              		.loc 2 1677 0 is_stmt 0 discriminator 1
 4246 1844 4FF00003 		mov	r3, #0
 4247 1848 FB74     		strb	r3, [r7, #19]
 4248 184a 3148     		ldr	r0, .L286
 4249 184c 3149     		ldr	r1, .L286+4
 4250 184e 324A     		ldr	r2, .L286+8
 4251 1850 40F28D63 		movw	r3, #1677
 4252 1854 FFF7FEFF 		bl	rt_kprintf
 4253              	.L282:
 4254              		.loc 2 1677 0 discriminator 2
 4255 1858 FB7C     		ldrb	r3, [r7, #19]
 4256 185a DBB2     		uxtb	r3, r3
 4257 185c 002B     		cmp	r3, #0
 4258 185e FBD0     		beq	.L282
 4259              	.L281:
 4260              	.LBE51:
1678:../src/os/rt-thread/src/ipc.c **** 
1679:../src/os/rt-thread/src/ipc.c **** 	/* init object */
1680:../src/os/rt-thread/src/ipc.c **** 	rt_object_init(&(mq->parent.parent), RT_Object_Class_MessageQueue, name);
 4261              		.loc 2 1680 0 is_stmt 1
 4262 1860 FB68     		ldr	r3, [r7, #12]
 4263 1862 1846     		mov	r0, r3
 4264 1864 4FF00501 		mov	r1, #5
 4265 1868 BA68     		ldr	r2, [r7, #8]
 4266 186a FFF7FEFF 		bl	rt_object_init
1681:../src/os/rt-thread/src/ipc.c **** 
1682:../src/os/rt-thread/src/ipc.c **** 	/* set parent flag */
1683:../src/os/rt-thread/src/ipc.c **** 	mq->parent.parent.flag = flag;
 4267              		.loc 2 1683 0
 4268 186e FB68     		ldr	r3, [r7, #12]
 4269 1870 97F82C20 		ldrb	r2, [r7, #44]
 4270 1874 DA71     		strb	r2, [r3, #7]
1684:../src/os/rt-thread/src/ipc.c **** 
1685:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
1686:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mq->parent));
 4271              		.loc 2 1686 0
 4272 1876 FB68     		ldr	r3, [r7, #12]
 4273 1878 1846     		mov	r0, r3
 4274 187a FEF7FBFB 		bl	rt_ipc_object_init
1687:../src/os/rt-thread/src/ipc.c **** 
1688:../src/os/rt-thread/src/ipc.c **** 	/* set messasge pool */
1689:../src/os/rt-thread/src/ipc.c **** 	mq->msg_pool = msgpool;
 4275              		.loc 2 1689 0
 4276 187e FB68     		ldr	r3, [r7, #12]
 4277 1880 7A68     		ldr	r2, [r7, #4]
 4278 1882 9A61     		str	r2, [r3, #24]
1690:../src/os/rt-thread/src/ipc.c **** 
1691:../src/os/rt-thread/src/ipc.c **** 	/* get correct message size */
1692:../src/os/rt-thread/src/ipc.c **** 	mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
 4279              		.loc 2 1692 0
 4280 1884 3B68     		ldr	r3, [r7, #0]
 4281 1886 9BB2     		uxth	r3, r3
 4282 1888 03F10303 		add	r3, r3, #3
 4283 188c 9BB2     		uxth	r3, r3
 4284 188e 23F00303 		bic	r3, r3, #3
 4285 1892 9AB2     		uxth	r2, r3
 4286 1894 FB68     		ldr	r3, [r7, #12]
 4287 1896 9A83     		strh	r2, [r3, #28]	@ movhi
1693:../src/os/rt-thread/src/ipc.c **** 	mq->max_msgs = pool_size / (mq->msg_size + sizeof(struct rt_mq_message));
 4288              		.loc 2 1693 0
 4289 1898 FB68     		ldr	r3, [r7, #12]
 4290 189a 9B8B     		ldrh	r3, [r3, #28]
 4291 189c 03F10403 		add	r3, r3, #4
 4292 18a0 BA6A     		ldr	r2, [r7, #40]
 4293 18a2 B2FBF3F3 		udiv	r3, r2, r3
 4294 18a6 9AB2     		uxth	r2, r3
 4295 18a8 FB68     		ldr	r3, [r7, #12]
 4296 18aa DA83     		strh	r2, [r3, #30]	@ movhi
1694:../src/os/rt-thread/src/ipc.c **** 
1695:../src/os/rt-thread/src/ipc.c **** 	/* init message list */
1696:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_head = RT_NULL;
 4297              		.loc 2 1696 0
 4298 18ac FB68     		ldr	r3, [r7, #12]
 4299 18ae 4FF00002 		mov	r2, #0
 4300 18b2 5A62     		str	r2, [r3, #36]
1697:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_tail = RT_NULL;
 4301              		.loc 2 1697 0
 4302 18b4 FB68     		ldr	r3, [r7, #12]
 4303 18b6 4FF00002 		mov	r2, #0
 4304 18ba 9A62     		str	r2, [r3, #40]
1698:../src/os/rt-thread/src/ipc.c **** 
1699:../src/os/rt-thread/src/ipc.c **** 	/* init message empty list */
1700:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_free = RT_NULL;
 4305              		.loc 2 1700 0
 4306 18bc FB68     		ldr	r3, [r7, #12]
 4307 18be 4FF00002 		mov	r2, #0
 4308 18c2 DA62     		str	r2, [r3, #44]
1701:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4309              		.loc 2 1701 0
 4310 18c4 4FF00004 		mov	r4, #0
 4311 18c8 13E0     		b	.L283
 4312              	.L284:
1702:../src/os/rt-thread/src/ipc.c **** 	{
1703:../src/os/rt-thread/src/ipc.c **** 		head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 4313              		.loc 2 1703 0 discriminator 2
 4314 18ca FB68     		ldr	r3, [r7, #12]
 4315 18cc 9A69     		ldr	r2, [r3, #24]
1704:../src/os/rt-thread/src/ipc.c **** 			temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 4316              		.loc 2 1704 0 discriminator 2
 4317 18ce FB68     		ldr	r3, [r7, #12]
 4318 18d0 9B8B     		ldrh	r3, [r3, #28]
 4319 18d2 03F10403 		add	r3, r3, #4
1703:../src/os/rt-thread/src/ipc.c **** 		head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 4320              		.loc 2 1703 0 discriminator 2
 4321 18d6 2146     		mov	r1, r4
 4322 18d8 01FB03F3 		mul	r3, r1, r3
 4323 18dc D318     		adds	r3, r2, r3
 4324 18de 7B61     		str	r3, [r7, #20]
1705:../src/os/rt-thread/src/ipc.c **** 		head->next = mq->msg_queue_free;
 4325              		.loc 2 1705 0 discriminator 2
 4326 18e0 FB68     		ldr	r3, [r7, #12]
 4327 18e2 DA6A     		ldr	r2, [r3, #44]
 4328 18e4 7B69     		ldr	r3, [r7, #20]
 4329 18e6 1A60     		str	r2, [r3, #0]
1706:../src/os/rt-thread/src/ipc.c **** 		mq->msg_queue_free = head;
 4330              		.loc 2 1706 0 discriminator 2
 4331 18e8 FB68     		ldr	r3, [r7, #12]
 4332 18ea 7A69     		ldr	r2, [r7, #20]
 4333 18ec DA62     		str	r2, [r3, #44]
1701:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4334              		.loc 2 1701 0 discriminator 2
 4335 18ee 04F10104 		add	r4, r4, #1
 4336              	.L283:
1701:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4337              		.loc 2 1701 0 is_stmt 0 discriminator 1
 4338 18f2 FB68     		ldr	r3, [r7, #12]
 4339 18f4 DB8B     		ldrh	r3, [r3, #30]
 4340 18f6 A342     		cmp	r3, r4
 4341 18f8 E7DC     		bgt	.L284
1707:../src/os/rt-thread/src/ipc.c **** 	}
1708:../src/os/rt-thread/src/ipc.c **** 
1709:../src/os/rt-thread/src/ipc.c **** 	/* the initial entry is zero */
1710:../src/os/rt-thread/src/ipc.c **** 	mq->entry = 0;
 4342              		.loc 2 1710 0 is_stmt 1
 4343 18fa FB68     		ldr	r3, [r7, #12]
 4344 18fc 4FF00002 		mov	r2, #0
 4345 1900 1A84     		strh	r2, [r3, #32]	@ movhi
1711:../src/os/rt-thread/src/ipc.c **** 
1712:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 4346              		.loc 2 1712 0
 4347 1902 4FF00003 		mov	r3, #0
1713:../src/os/rt-thread/src/ipc.c **** }
 4348              		.loc 2 1713 0
 4349 1906 1846     		mov	r0, r3
 4350 1908 07F11C07 		add	r7, r7, #28
 4351 190c BD46     		mov	sp, r7
 4352 190e 90BD     		pop	{r4, r7, pc}
 4353              	.L287:
 4354              		.align	2
 4355              	.L286:
 4356 1910 00000000 		.word	.LC0
 4357 1914 90000000 		.word	.LC7
 4358 1918 28010000 		.word	__FUNCTION__.5225
 4359              		.cfi_endproc
 4360              	.LFE39:
 4362              		.align	2
 4363              		.global	rt_mq_detach
 4364              		.thumb
 4365              		.thumb_func
 4367              	rt_mq_detach:
 4368              	.LFB40:
1714:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_init);
1715:../src/os/rt-thread/src/ipc.c **** 
1716:../src/os/rt-thread/src/ipc.c **** /**
1717:../src/os/rt-thread/src/ipc.c ****  * This function will detach a message queue object from resource management
1718:../src/os/rt-thread/src/ipc.c ****  *
1719:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
1720:../src/os/rt-thread/src/ipc.c ****  *
1721:../src/os/rt-thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1722:../src/os/rt-thread/src/ipc.c ****  */
1723:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_detach(rt_mq_t mq)
1724:../src/os/rt-thread/src/ipc.c **** {
 4369              		.loc 2 1724 0
 4370              		.cfi_startproc
 4371              		@ args = 0, pretend = 0, frame = 16
 4372              		@ frame_needed = 1, uses_anonymous_args = 0
 4373 191c 80B5     		push	{r7, lr}
 4374              	.LCFI114:
 4375              		.cfi_def_cfa_offset 8
 4376              		.cfi_offset 7, -8
 4377              		.cfi_offset 14, -4
 4378 191e 84B0     		sub	sp, sp, #16
 4379              	.LCFI115:
 4380              		.cfi_def_cfa_offset 24
 4381 1920 00AF     		add	r7, sp, #0
 4382              	.LCFI116:
 4383              		.cfi_def_cfa_register 7
 4384 1922 7860     		str	r0, [r7, #4]
1725:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1726:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 4385              		.loc 2 1726 0
 4386 1924 7B68     		ldr	r3, [r7, #4]
 4387 1926 002B     		cmp	r3, #0
 4388 1928 0DD1     		bne	.L289
 4389              	.LBB52:
 4390              		.loc 2 1726 0 is_stmt 0 discriminator 1
 4391 192a 4FF00003 		mov	r3, #0
 4392 192e FB73     		strb	r3, [r7, #15]
 4393 1930 0D48     		ldr	r0, .L292
 4394 1932 0E49     		ldr	r1, .L292+4
 4395 1934 0E4A     		ldr	r2, .L292+8
 4396 1936 40F2BE63 		movw	r3, #1726
 4397 193a FFF7FEFF 		bl	rt_kprintf
 4398              	.L290:
 4399              		.loc 2 1726 0 discriminator 2
 4400 193e FB7B     		ldrb	r3, [r7, #15]
 4401 1940 DBB2     		uxtb	r3, r3
 4402 1942 002B     		cmp	r3, #0
 4403 1944 FBD0     		beq	.L290
 4404              	.L289:
 4405              	.LBE52:
1727:../src/os/rt-thread/src/ipc.c **** 
1728:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
1729:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&mq->parent.suspend_thread);
 4406              		.loc 2 1729 0 is_stmt 1
 4407 1946 7B68     		ldr	r3, [r7, #4]
 4408 1948 03F11003 		add	r3, r3, #16
 4409 194c 1846     		mov	r0, r3
 4410 194e FEF705FC 		bl	rt_ipc_list_resume_all
1730:../src/os/rt-thread/src/ipc.c **** 
1731:../src/os/rt-thread/src/ipc.c **** 	/* detach message queue object */
1732:../src/os/rt-thread/src/ipc.c **** 	rt_object_detach(&(mq->parent.parent));
 4411              		.loc 2 1732 0
 4412 1952 7B68     		ldr	r3, [r7, #4]
 4413 1954 1846     		mov	r0, r3
 4414 1956 FFF7FEFF 		bl	rt_object_detach
1733:../src/os/rt-thread/src/ipc.c **** 
1734:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 4415              		.loc 2 1734 0
 4416 195a 4FF00003 		mov	r3, #0
1735:../src/os/rt-thread/src/ipc.c **** }
 4417              		.loc 2 1735 0
 4418 195e 1846     		mov	r0, r3
 4419 1960 07F11007 		add	r7, r7, #16
 4420 1964 BD46     		mov	sp, r7
 4421 1966 80BD     		pop	{r7, pc}
 4422              	.L293:
 4423              		.align	2
 4424              	.L292:
 4425 1968 00000000 		.word	.LC0
 4426 196c 90000000 		.word	.LC7
 4427 1970 18010000 		.word	__FUNCTION__.5236
 4428              		.cfi_endproc
 4429              	.LFE40:
 4431              		.align	2
 4432              		.global	rt_mq_create
 4433              		.thumb
 4434              		.thumb_func
 4436              	rt_mq_create:
 4437              	.LFB41:
1736:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_detach);
1737:../src/os/rt-thread/src/ipc.c **** 
1738:../src/os/rt-thread/src/ipc.c **** #ifdef RT_USING_HEAP
1739:../src/os/rt-thread/src/ipc.c **** /**
1740:../src/os/rt-thread/src/ipc.c ****  * This function will create a message queue object from system resource
1741:../src/os/rt-thread/src/ipc.c ****  *
1742:../src/os/rt-thread/src/ipc.c ****  * @param name the name of message queue
1743:../src/os/rt-thread/src/ipc.c ****  * @param msg_size the size of message
1744:../src/os/rt-thread/src/ipc.c ****  * @param max_msgs the maximum number of message in queue
1745:../src/os/rt-thread/src/ipc.c ****  * @param flag the flag of message queue
1746:../src/os/rt-thread/src/ipc.c ****  *
1747:../src/os/rt-thread/src/ipc.c ****  * @return the created message queue, RT_NULL on error happen
1748:../src/os/rt-thread/src/ipc.c ****  */
1749:../src/os/rt-thread/src/ipc.c **** rt_mq_t rt_mq_create(const char *name, rt_size_t msg_size, rt_size_t max_msgs, rt_uint8_t flag)
1750:../src/os/rt-thread/src/ipc.c **** {
 4438              		.loc 2 1750 0
 4439              		.cfi_startproc
 4440              		@ args = 0, pretend = 0, frame = 32
 4441              		@ frame_needed = 1, uses_anonymous_args = 0
 4442 1974 90B5     		push	{r4, r7, lr}
 4443              	.LCFI117:
 4444              		.cfi_def_cfa_offset 12
 4445              		.cfi_offset 4, -12
 4446              		.cfi_offset 7, -8
 4447              		.cfi_offset 14, -4
 4448 1976 89B0     		sub	sp, sp, #36
 4449              	.LCFI118:
 4450              		.cfi_def_cfa_offset 48
 4451 1978 00AF     		add	r7, sp, #0
 4452              	.LCFI119:
 4453              		.cfi_def_cfa_register 7
 4454 197a F860     		str	r0, [r7, #12]
 4455 197c B960     		str	r1, [r7, #8]
 4456 197e 7A60     		str	r2, [r7, #4]
 4457 1980 FB70     		strb	r3, [r7, #3]
 4458              	.LBB53:
1751:../src/os/rt-thread/src/ipc.c **** 	struct rt_messagequeue *mq;
1752:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *head;
1753:../src/os/rt-thread/src/ipc.c **** 	register rt_base_t temp;
1754:../src/os/rt-thread/src/ipc.c **** 
1755:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 4459              		.loc 2 1755 0
 4460 1982 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4461 1986 F861     		str	r0, [r7, #28]
 4462 1988 FFF7FEFF 		bl	rt_interrupt_get_nest
 4463 198c 0346     		mov	r3, r0
 4464 198e 002B     		cmp	r3, #0
 4465 1990 11D0     		beq	.L295
 4466              		.loc 2 1755 0 is_stmt 0 discriminator 1
 4467 1992 3F48     		ldr	r0, .L302
 4468 1994 3F49     		ldr	r1, .L302+4
 4469 1996 FFF7FEFF 		bl	rt_kprintf
 4470              	.LBB54:
 4471 199a 4FF00003 		mov	r3, #0
 4472 199e FB74     		strb	r3, [r7, #19]
 4473 19a0 3D48     		ldr	r0, .L302+8
 4474 19a2 3E49     		ldr	r1, .L302+12
 4475 19a4 3B4A     		ldr	r2, .L302+4
 4476 19a6 40F2DB63 		movw	r3, #1755
 4477 19aa FFF7FEFF 		bl	rt_kprintf
 4478              	.L296:
 4479              		.loc 2 1755 0 discriminator 4
 4480 19ae FB7C     		ldrb	r3, [r7, #19]
 4481 19b0 DBB2     		uxtb	r3, r3
 4482 19b2 002B     		cmp	r3, #0
 4483 19b4 FBD0     		beq	.L296
 4484              	.L295:
 4485              	.LBE54:
 4486              		.loc 2 1755 0 discriminator 2
 4487 19b6 F869     		ldr	r0, [r7, #28]
 4488 19b8 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4489              	.LBE53:
1756:../src/os/rt-thread/src/ipc.c **** 
1757:../src/os/rt-thread/src/ipc.c **** 	/* allocate object */
1758:../src/os/rt-thread/src/ipc.c **** 	mq = (rt_mq_t)rt_object_allocate(RT_Object_Class_MessageQueue, name);
 4490              		.loc 2 1758 0 is_stmt 1 discriminator 2
 4491 19bc 4FF00500 		mov	r0, #5
 4492 19c0 F968     		ldr	r1, [r7, #12]
 4493 19c2 FFF7FEFF 		bl	rt_object_allocate
 4494 19c6 B861     		str	r0, [r7, #24]
1759:../src/os/rt-thread/src/ipc.c **** 	if (mq == RT_NULL)
 4495              		.loc 2 1759 0 discriminator 2
 4496 19c8 BB69     		ldr	r3, [r7, #24]
 4497 19ca 002B     		cmp	r3, #0
 4498 19cc 01D1     		bne	.L297
1760:../src/os/rt-thread/src/ipc.c **** 		return mq;
 4499              		.loc 2 1760 0
 4500 19ce BB69     		ldr	r3, [r7, #24]
 4501 19d0 58E0     		b	.L298
 4502              	.L297:
1761:../src/os/rt-thread/src/ipc.c **** 
1762:../src/os/rt-thread/src/ipc.c **** 	/* set parent */
1763:../src/os/rt-thread/src/ipc.c **** 	mq->parent.parent.flag = flag;
 4503              		.loc 2 1763 0
 4504 19d2 BB69     		ldr	r3, [r7, #24]
 4505 19d4 FA78     		ldrb	r2, [r7, #3]
 4506 19d6 DA71     		strb	r2, [r3, #7]
1764:../src/os/rt-thread/src/ipc.c **** 
1765:../src/os/rt-thread/src/ipc.c **** 	/* init ipc object */
1766:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_object_init(&(mq->parent));
 4507              		.loc 2 1766 0
 4508 19d8 BB69     		ldr	r3, [r7, #24]
 4509 19da 1846     		mov	r0, r3
 4510 19dc FEF74AFB 		bl	rt_ipc_object_init
1767:../src/os/rt-thread/src/ipc.c **** 
1768:../src/os/rt-thread/src/ipc.c **** 	/* init message queue */
1769:../src/os/rt-thread/src/ipc.c **** 
1770:../src/os/rt-thread/src/ipc.c **** 	/* get correct message size */
1771:../src/os/rt-thread/src/ipc.c **** 	mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
 4511              		.loc 2 1771 0
 4512 19e0 BB68     		ldr	r3, [r7, #8]
 4513 19e2 9BB2     		uxth	r3, r3
 4514 19e4 03F10303 		add	r3, r3, #3
 4515 19e8 9BB2     		uxth	r3, r3
 4516 19ea 23F00303 		bic	r3, r3, #3
 4517 19ee 9AB2     		uxth	r2, r3
 4518 19f0 BB69     		ldr	r3, [r7, #24]
 4519 19f2 9A83     		strh	r2, [r3, #28]	@ movhi
1772:../src/os/rt-thread/src/ipc.c **** 	mq->max_msgs = max_msgs;
 4520              		.loc 2 1772 0
 4521 19f4 7B68     		ldr	r3, [r7, #4]
 4522 19f6 9AB2     		uxth	r2, r3
 4523 19f8 BB69     		ldr	r3, [r7, #24]
 4524 19fa DA83     		strh	r2, [r3, #30]	@ movhi
1773:../src/os/rt-thread/src/ipc.c **** 
1774:../src/os/rt-thread/src/ipc.c **** 	/* allocate message pool */
1775:../src/os/rt-thread/src/ipc.c **** 	mq->msg_pool = rt_malloc((mq->msg_size + sizeof(struct rt_mq_message))* mq->max_msgs);
 4525              		.loc 2 1775 0
 4526 19fc BB69     		ldr	r3, [r7, #24]
 4527 19fe 9B8B     		ldrh	r3, [r3, #28]
 4528 1a00 03F10403 		add	r3, r3, #4
 4529 1a04 BA69     		ldr	r2, [r7, #24]
 4530 1a06 D28B     		ldrh	r2, [r2, #30]
 4531 1a08 02FB03F3 		mul	r3, r2, r3
 4532 1a0c 1846     		mov	r0, r3
 4533 1a0e FFF7FEFF 		bl	rt_malloc
 4534 1a12 0246     		mov	r2, r0
 4535 1a14 BB69     		ldr	r3, [r7, #24]
 4536 1a16 9A61     		str	r2, [r3, #24]
1776:../src/os/rt-thread/src/ipc.c **** 	if (mq->msg_pool == RT_NULL)
 4537              		.loc 2 1776 0
 4538 1a18 BB69     		ldr	r3, [r7, #24]
 4539 1a1a 9B69     		ldr	r3, [r3, #24]
 4540 1a1c 002B     		cmp	r3, #0
 4541 1a1e 05D1     		bne	.L299
1777:../src/os/rt-thread/src/ipc.c **** 	{
1778:../src/os/rt-thread/src/ipc.c **** 		rt_mq_delete(mq);
 4542              		.loc 2 1778 0
 4543 1a20 B869     		ldr	r0, [r7, #24]
 4544 1a22 FFF7FEFF 		bl	rt_mq_delete
1779:../src/os/rt-thread/src/ipc.c **** 		
1780:../src/os/rt-thread/src/ipc.c **** 		return RT_NULL;
 4545              		.loc 2 1780 0
 4546 1a26 4FF00003 		mov	r3, #0
 4547 1a2a 2BE0     		b	.L298
 4548              	.L299:
1781:../src/os/rt-thread/src/ipc.c **** 	}
1782:../src/os/rt-thread/src/ipc.c **** 
1783:../src/os/rt-thread/src/ipc.c **** 	/* init message list */
1784:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_head = RT_NULL;
 4549              		.loc 2 1784 0
 4550 1a2c BB69     		ldr	r3, [r7, #24]
 4551 1a2e 4FF00002 		mov	r2, #0
 4552 1a32 5A62     		str	r2, [r3, #36]
1785:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_tail = RT_NULL;
 4553              		.loc 2 1785 0
 4554 1a34 BB69     		ldr	r3, [r7, #24]
 4555 1a36 4FF00002 		mov	r2, #0
 4556 1a3a 9A62     		str	r2, [r3, #40]
1786:../src/os/rt-thread/src/ipc.c **** 
1787:../src/os/rt-thread/src/ipc.c **** 	/* init message empty list */
1788:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_free = RT_NULL;
 4557              		.loc 2 1788 0
 4558 1a3c BB69     		ldr	r3, [r7, #24]
 4559 1a3e 4FF00002 		mov	r2, #0
 4560 1a42 DA62     		str	r2, [r3, #44]
1789:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4561              		.loc 2 1789 0
 4562 1a44 4FF00004 		mov	r4, #0
 4563 1a48 13E0     		b	.L300
 4564              	.L301:
1790:../src/os/rt-thread/src/ipc.c **** 	{
1791:../src/os/rt-thread/src/ipc.c **** 		head = (struct rt_mq_message*)((rt_uint8_t*)mq->msg_pool +
 4565              		.loc 2 1791 0 discriminator 2
 4566 1a4a BB69     		ldr	r3, [r7, #24]
 4567 1a4c 9A69     		ldr	r2, [r3, #24]
1792:../src/os/rt-thread/src/ipc.c **** 			temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 4568              		.loc 2 1792 0 discriminator 2
 4569 1a4e BB69     		ldr	r3, [r7, #24]
 4570 1a50 9B8B     		ldrh	r3, [r3, #28]
 4571 1a52 03F10403 		add	r3, r3, #4
1791:../src/os/rt-thread/src/ipc.c **** 		head = (struct rt_mq_message*)((rt_uint8_t*)mq->msg_pool +
 4572              		.loc 2 1791 0 discriminator 2
 4573 1a56 2146     		mov	r1, r4
 4574 1a58 01FB03F3 		mul	r3, r1, r3
 4575 1a5c D318     		adds	r3, r2, r3
 4576 1a5e 7B61     		str	r3, [r7, #20]
1793:../src/os/rt-thread/src/ipc.c **** 		head->next = mq->msg_queue_free;
 4577              		.loc 2 1793 0 discriminator 2
 4578 1a60 BB69     		ldr	r3, [r7, #24]
 4579 1a62 DA6A     		ldr	r2, [r3, #44]
 4580 1a64 7B69     		ldr	r3, [r7, #20]
 4581 1a66 1A60     		str	r2, [r3, #0]
1794:../src/os/rt-thread/src/ipc.c **** 		mq->msg_queue_free = head;
 4582              		.loc 2 1794 0 discriminator 2
 4583 1a68 BB69     		ldr	r3, [r7, #24]
 4584 1a6a 7A69     		ldr	r2, [r7, #20]
 4585 1a6c DA62     		str	r2, [r3, #44]
1789:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4586              		.loc 2 1789 0 discriminator 2
 4587 1a6e 04F10104 		add	r4, r4, #1
 4588              	.L300:
1789:../src/os/rt-thread/src/ipc.c **** 	for (temp = 0; temp < mq->max_msgs; temp ++)
 4589              		.loc 2 1789 0 is_stmt 0 discriminator 1
 4590 1a72 BB69     		ldr	r3, [r7, #24]
 4591 1a74 DB8B     		ldrh	r3, [r3, #30]
 4592 1a76 A342     		cmp	r3, r4
 4593 1a78 E7DC     		bgt	.L301
1795:../src/os/rt-thread/src/ipc.c **** 	}
1796:../src/os/rt-thread/src/ipc.c **** 
1797:../src/os/rt-thread/src/ipc.c **** 	/* the initial entry is zero */
1798:../src/os/rt-thread/src/ipc.c **** 	mq->entry = 0;
 4594              		.loc 2 1798 0 is_stmt 1
 4595 1a7a BB69     		ldr	r3, [r7, #24]
 4596 1a7c 4FF00002 		mov	r2, #0
 4597 1a80 1A84     		strh	r2, [r3, #32]	@ movhi
1799:../src/os/rt-thread/src/ipc.c **** 
1800:../src/os/rt-thread/src/ipc.c **** 	return mq;
 4598              		.loc 2 1800 0
 4599 1a82 BB69     		ldr	r3, [r7, #24]
 4600              	.L298:
1801:../src/os/rt-thread/src/ipc.c **** }
 4601              		.loc 2 1801 0
 4602 1a84 1846     		mov	r0, r3
 4603 1a86 07F12407 		add	r7, r7, #36
 4604 1a8a BD46     		mov	sp, r7
 4605 1a8c 90BD     		pop	{r4, r7, pc}
 4606              	.L303:
 4607 1a8e 00BF     		.align	2
 4608              	.L302:
 4609 1a90 30000000 		.word	.LC2
 4610 1a94 08010000 		.word	__FUNCTION__.5250
 4611 1a98 00000000 		.word	.LC0
 4612 1a9c 54000000 		.word	.LC3
 4613              		.cfi_endproc
 4614              	.LFE41:
 4616              		.align	2
 4617              		.global	rt_mq_delete
 4618              		.thumb
 4619              		.thumb_func
 4621              	rt_mq_delete:
 4622              	.LFB42:
1802:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_create);
1803:../src/os/rt-thread/src/ipc.c **** 
1804:../src/os/rt-thread/src/ipc.c **** /**
1805:../src/os/rt-thread/src/ipc.c ****  * This function will delete a message queue object and release the memory
1806:../src/os/rt-thread/src/ipc.c ****  *
1807:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
1808:../src/os/rt-thread/src/ipc.c ****  *
1809:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1810:../src/os/rt-thread/src/ipc.c ****  */
1811:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_delete(rt_mq_t mq)
1812:../src/os/rt-thread/src/ipc.c **** {
 4623              		.loc 2 1812 0
 4624              		.cfi_startproc
 4625              		@ args = 0, pretend = 0, frame = 16
 4626              		@ frame_needed = 1, uses_anonymous_args = 0
 4627 1aa0 80B5     		push	{r7, lr}
 4628              	.LCFI120:
 4629              		.cfi_def_cfa_offset 8
 4630              		.cfi_offset 7, -8
 4631              		.cfi_offset 14, -4
 4632 1aa2 84B0     		sub	sp, sp, #16
 4633              	.LCFI121:
 4634              		.cfi_def_cfa_offset 24
 4635 1aa4 00AF     		add	r7, sp, #0
 4636              	.LCFI122:
 4637              		.cfi_def_cfa_register 7
 4638 1aa6 7860     		str	r0, [r7, #4]
 4639              	.LBB55:
1813:../src/os/rt-thread/src/ipc.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 4640              		.loc 2 1813 0
 4641 1aa8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4642 1aac F860     		str	r0, [r7, #12]
 4643 1aae FFF7FEFF 		bl	rt_interrupt_get_nest
 4644 1ab2 0346     		mov	r3, r0
 4645 1ab4 002B     		cmp	r3, #0
 4646 1ab6 11D0     		beq	.L305
 4647              		.loc 2 1813 0 is_stmt 0 discriminator 1
 4648 1ab8 1D48     		ldr	r0, .L310
 4649 1aba 1E49     		ldr	r1, .L310+4
 4650 1abc FFF7FEFF 		bl	rt_kprintf
 4651              	.LBB56:
 4652 1ac0 4FF00003 		mov	r3, #0
 4653 1ac4 FB72     		strb	r3, [r7, #11]
 4654 1ac6 1C48     		ldr	r0, .L310+8
 4655 1ac8 1C49     		ldr	r1, .L310+12
 4656 1aca 1A4A     		ldr	r2, .L310+4
 4657 1acc 40F21573 		movw	r3, #1813
 4658 1ad0 FFF7FEFF 		bl	rt_kprintf
 4659              	.L306:
 4660              		.loc 2 1813 0 discriminator 4
 4661 1ad4 FB7A     		ldrb	r3, [r7, #11]
 4662 1ad6 DBB2     		uxtb	r3, r3
 4663 1ad8 002B     		cmp	r3, #0
 4664 1ada FBD0     		beq	.L306
 4665              	.L305:
 4666              	.LBE56:
 4667              		.loc 2 1813 0 discriminator 2
 4668 1adc F868     		ldr	r0, [r7, #12]
 4669 1ade FFF7FEFF 		bl	rt_hw_interrupt_enable
 4670              	.LBE55:
1814:../src/os/rt-thread/src/ipc.c **** 
1815:../src/os/rt-thread/src/ipc.c **** 	/* parameter check */
1816:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 4671              		.loc 2 1816 0 is_stmt 1 discriminator 2
 4672 1ae2 7B68     		ldr	r3, [r7, #4]
 4673 1ae4 002B     		cmp	r3, #0
 4674 1ae6 0DD1     		bne	.L307
 4675              	.LBB57:
 4676              		.loc 2 1816 0 is_stmt 0 discriminator 1
 4677 1ae8 4FF00003 		mov	r3, #0
 4678 1aec BB72     		strb	r3, [r7, #10]
 4679 1aee 1248     		ldr	r0, .L310+8
 4680 1af0 1349     		ldr	r1, .L310+16
 4681 1af2 104A     		ldr	r2, .L310+4
 4682 1af4 4FF4E363 		mov	r3, #1816
 4683 1af8 FFF7FEFF 		bl	rt_kprintf
 4684              	.L308:
 4685              		.loc 2 1816 0 discriminator 2
 4686 1afc BB7A     		ldrb	r3, [r7, #10]
 4687 1afe DBB2     		uxtb	r3, r3
 4688 1b00 002B     		cmp	r3, #0
 4689 1b02 FBD0     		beq	.L308
 4690              	.L307:
 4691              	.LBE57:
1817:../src/os/rt-thread/src/ipc.c **** 
1818:../src/os/rt-thread/src/ipc.c **** 	/* resume all suspended thread */
1819:../src/os/rt-thread/src/ipc.c **** 	rt_ipc_list_resume_all(&(mq->parent.suspend_thread));
 4692              		.loc 2 1819 0 is_stmt 1
 4693 1b04 7B68     		ldr	r3, [r7, #4]
 4694 1b06 03F11003 		add	r3, r3, #16
 4695 1b0a 1846     		mov	r0, r3
 4696 1b0c FEF726FB 		bl	rt_ipc_list_resume_all
1820:../src/os/rt-thread/src/ipc.c **** 
1821:../src/os/rt-thread/src/ipc.c **** #if defined(RT_USING_MODULE) && defined(RT_USING_SLAB)
1822:../src/os/rt-thread/src/ipc.c **** 	/* the mq object belongs to an application module */
1823:../src/os/rt-thread/src/ipc.c **** 	if (mq->parent.parent.flag & RT_OBJECT_FLAG_MODULE)
1824:../src/os/rt-thread/src/ipc.c **** 		rt_module_free(mq->parent.parent.module_id, mq->msg_pool);
1825:../src/os/rt-thread/src/ipc.c **** 	else
1826:../src/os/rt-thread/src/ipc.c **** #endif
1827:../src/os/rt-thread/src/ipc.c **** 
1828:../src/os/rt-thread/src/ipc.c **** 	/* free message queue pool */
1829:../src/os/rt-thread/src/ipc.c **** 	rt_free(mq->msg_pool);
 4697              		.loc 2 1829 0
 4698 1b10 7B68     		ldr	r3, [r7, #4]
 4699 1b12 9B69     		ldr	r3, [r3, #24]
 4700 1b14 1846     		mov	r0, r3
 4701 1b16 FFF7FEFF 		bl	rt_free
1830:../src/os/rt-thread/src/ipc.c **** 
1831:../src/os/rt-thread/src/ipc.c **** 	/* delete message queue object */
1832:../src/os/rt-thread/src/ipc.c **** 	rt_object_delete(&(mq->parent.parent));
 4702              		.loc 2 1832 0
 4703 1b1a 7B68     		ldr	r3, [r7, #4]
 4704 1b1c 1846     		mov	r0, r3
 4705 1b1e FFF7FEFF 		bl	rt_object_delete
1833:../src/os/rt-thread/src/ipc.c **** 
1834:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 4706              		.loc 2 1834 0
 4707 1b22 4FF00003 		mov	r3, #0
1835:../src/os/rt-thread/src/ipc.c **** }
 4708              		.loc 2 1835 0
 4709 1b26 1846     		mov	r0, r3
 4710 1b28 07F11007 		add	r7, r7, #16
 4711 1b2c BD46     		mov	sp, r7
 4712 1b2e 80BD     		pop	{r7, pc}
 4713              	.L311:
 4714              		.align	2
 4715              	.L310:
 4716 1b30 30000000 		.word	.LC2
 4717 1b34 F8000000 		.word	__FUNCTION__.5262
 4718 1b38 00000000 		.word	.LC0
 4719 1b3c 54000000 		.word	.LC3
 4720 1b40 90000000 		.word	.LC7
 4721              		.cfi_endproc
 4722              	.LFE42:
 4724              		.section	.rodata
 4725 009e 0000     		.align	2
 4726              	.LC8:
 4727 00a0 62756666 		.ascii	"buffer != RT_NULL\000"
 4727      65722021 
 4727      3D205254 
 4727      5F4E554C 
 4727      4C00
 4728 00b2 0000     		.align	2
 4729              	.LC9:
 4730 00b4 73697A65 		.ascii	"size != 0\000"
 4730      20213D20 
 4730      3000
 4731              		.text
 4732              		.align	2
 4733              		.global	rt_mq_send
 4734              		.thumb
 4735              		.thumb_func
 4737              	rt_mq_send:
 4738              	.LFB43:
1836:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_delete);
1837:../src/os/rt-thread/src/ipc.c **** #endif
1838:../src/os/rt-thread/src/ipc.c **** 
1839:../src/os/rt-thread/src/ipc.c **** /**
1840:../src/os/rt-thread/src/ipc.c ****  * This function will send a message to message queue object, if there are threads
1841:../src/os/rt-thread/src/ipc.c ****  * suspended on message queue object, it will be waked up.
1842:../src/os/rt-thread/src/ipc.c ****  *
1843:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
1844:../src/os/rt-thread/src/ipc.c ****  * @param buffer the message
1845:../src/os/rt-thread/src/ipc.c ****  * @param size the size of buffer
1846:../src/os/rt-thread/src/ipc.c ****  *
1847:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1848:../src/os/rt-thread/src/ipc.c ****  */
1849:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_send(rt_mq_t mq, void *buffer, rt_size_t size)
1850:../src/os/rt-thread/src/ipc.c **** {
 4739              		.loc 2 1850 0
 4740              		.cfi_startproc
 4741              		@ args = 0, pretend = 0, frame = 24
 4742              		@ frame_needed = 1, uses_anonymous_args = 0
 4743 1b44 90B5     		push	{r4, r7, lr}
 4744              	.LCFI123:
 4745              		.cfi_def_cfa_offset 12
 4746              		.cfi_offset 4, -12
 4747              		.cfi_offset 7, -8
 4748              		.cfi_offset 14, -4
 4749 1b46 87B0     		sub	sp, sp, #28
 4750              	.LCFI124:
 4751              		.cfi_def_cfa_offset 40
 4752 1b48 00AF     		add	r7, sp, #0
 4753              	.LCFI125:
 4754              		.cfi_def_cfa_register 7
 4755 1b4a F860     		str	r0, [r7, #12]
 4756 1b4c B960     		str	r1, [r7, #8]
 4757 1b4e 7A60     		str	r2, [r7, #4]
1851:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
1852:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *msg;
1853:../src/os/rt-thread/src/ipc.c **** 
1854:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 4758              		.loc 2 1854 0
 4759 1b50 FB68     		ldr	r3, [r7, #12]
 4760 1b52 002B     		cmp	r3, #0
 4761 1b54 0DD1     		bne	.L313
 4762              	.LBB58:
 4763              		.loc 2 1854 0 is_stmt 0 discriminator 1
 4764 1b56 4FF00003 		mov	r3, #0
 4765 1b5a FB74     		strb	r3, [r7, #19]
 4766 1b5c 5148     		ldr	r0, .L326
 4767 1b5e 5249     		ldr	r1, .L326+4
 4768 1b60 524A     		ldr	r2, .L326+8
 4769 1b62 40F23E73 		movw	r3, #1854
 4770 1b66 FFF7FEFF 		bl	rt_kprintf
 4771              	.L314:
 4772              		.loc 2 1854 0 discriminator 2
 4773 1b6a FB7C     		ldrb	r3, [r7, #19]
 4774 1b6c DBB2     		uxtb	r3, r3
 4775 1b6e 002B     		cmp	r3, #0
 4776 1b70 FBD0     		beq	.L314
 4777              	.L313:
 4778              	.LBE58:
1855:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(buffer != RT_NULL);
 4779              		.loc 2 1855 0 is_stmt 1
 4780 1b72 BB68     		ldr	r3, [r7, #8]
 4781 1b74 002B     		cmp	r3, #0
 4782 1b76 0DD1     		bne	.L315
 4783              	.LBB59:
 4784              		.loc 2 1855 0 is_stmt 0 discriminator 1
 4785 1b78 4FF00003 		mov	r3, #0
 4786 1b7c BB74     		strb	r3, [r7, #18]
 4787 1b7e 4948     		ldr	r0, .L326
 4788 1b80 4B49     		ldr	r1, .L326+12
 4789 1b82 4A4A     		ldr	r2, .L326+8
 4790 1b84 40F23F73 		movw	r3, #1855
 4791 1b88 FFF7FEFF 		bl	rt_kprintf
 4792              	.L316:
 4793              		.loc 2 1855 0 discriminator 2
 4794 1b8c BB7C     		ldrb	r3, [r7, #18]
 4795 1b8e DBB2     		uxtb	r3, r3
 4796 1b90 002B     		cmp	r3, #0
 4797 1b92 FBD0     		beq	.L316
 4798              	.L315:
 4799              	.LBE59:
1856:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(size != 0);
 4800              		.loc 2 1856 0 is_stmt 1
 4801 1b94 7B68     		ldr	r3, [r7, #4]
 4802 1b96 002B     		cmp	r3, #0
 4803 1b98 0DD1     		bne	.L317
 4804              	.LBB60:
 4805              		.loc 2 1856 0 is_stmt 0 discriminator 1
 4806 1b9a 4FF00003 		mov	r3, #0
 4807 1b9e 7B74     		strb	r3, [r7, #17]
 4808 1ba0 4048     		ldr	r0, .L326
 4809 1ba2 4449     		ldr	r1, .L326+16
 4810 1ba4 414A     		ldr	r2, .L326+8
 4811 1ba6 4FF4E863 		mov	r3, #1856
 4812 1baa FFF7FEFF 		bl	rt_kprintf
 4813              	.L318:
 4814              		.loc 2 1856 0 discriminator 2
 4815 1bae 7B7C     		ldrb	r3, [r7, #17]
 4816 1bb0 DBB2     		uxtb	r3, r3
 4817 1bb2 002B     		cmp	r3, #0
 4818 1bb4 FBD0     		beq	.L318
 4819              	.L317:
 4820              	.LBE60:
1857:../src/os/rt-thread/src/ipc.c **** 
1858:../src/os/rt-thread/src/ipc.c **** 	/* greater than one message size */
1859:../src/os/rt-thread/src/ipc.c **** 	if (size > mq->msg_size)
 4821              		.loc 2 1859 0 is_stmt 1
 4822 1bb6 FB68     		ldr	r3, [r7, #12]
 4823 1bb8 9B8B     		ldrh	r3, [r3, #28]
 4824 1bba 1A46     		mov	r2, r3
 4825 1bbc 7B68     		ldr	r3, [r7, #4]
 4826 1bbe 9A42     		cmp	r2, r3
 4827 1bc0 02D2     		bcs	.L319
1860:../src/os/rt-thread/src/ipc.c **** 		return -RT_ERROR;
 4828              		.loc 2 1860 0
 4829 1bc2 4FF0FF33 		mov	r3, #-1
 4830 1bc6 68E0     		b	.L320
 4831              	.L319:
1861:../src/os/rt-thread/src/ipc.c **** 
1862:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
 4832              		.loc 2 1862 0
 4833 1bc8 3B4B     		ldr	r3, .L326+20
 4834 1bca 1B68     		ldr	r3, [r3, #0]
 4835 1bcc 002B     		cmp	r3, #0
 4836 1bce 04D0     		beq	.L321
 4837              		.loc 2 1862 0 is_stmt 0 discriminator 1
 4838 1bd0 394B     		ldr	r3, .L326+20
 4839 1bd2 1B68     		ldr	r3, [r3, #0]
 4840 1bd4 FA68     		ldr	r2, [r7, #12]
 4841 1bd6 1046     		mov	r0, r2
 4842 1bd8 9847     		blx	r3
 4843              	.L321:
1863:../src/os/rt-thread/src/ipc.c **** 
1864:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1865:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 4844              		.loc 2 1865 0 is_stmt 1
 4845 1bda FFF7FEFF 		bl	rt_hw_interrupt_disable
 4846 1bde 0346     		mov	r3, r0
 4847 1be0 1C46     		mov	r4, r3
1866:../src/os/rt-thread/src/ipc.c **** 
1867:../src/os/rt-thread/src/ipc.c **** 	/* get a free list, there must be an empty item */
1868:../src/os/rt-thread/src/ipc.c **** 	msg = (struct rt_mq_message*)mq->msg_queue_free;
 4848              		.loc 2 1868 0
 4849 1be2 FB68     		ldr	r3, [r7, #12]
 4850 1be4 DB6A     		ldr	r3, [r3, #44]
 4851 1be6 7B61     		str	r3, [r7, #20]
1869:../src/os/rt-thread/src/ipc.c **** 	/* message queue is full */
1870:../src/os/rt-thread/src/ipc.c **** 	if (msg == RT_NULL)
 4852              		.loc 2 1870 0
 4853 1be8 7B69     		ldr	r3, [r7, #20]
 4854 1bea 002B     		cmp	r3, #0
 4855 1bec 06D1     		bne	.L322
1871:../src/os/rt-thread/src/ipc.c **** 	{
1872:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1873:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 4856              		.loc 2 1873 0
 4857 1bee 2346     		mov	r3, r4
 4858 1bf0 1846     		mov	r0, r3
 4859 1bf2 FFF7FEFF 		bl	rt_hw_interrupt_enable
1874:../src/os/rt-thread/src/ipc.c **** 
1875:../src/os/rt-thread/src/ipc.c **** 		return -RT_EFULL;
 4860              		.loc 2 1875 0
 4861 1bf6 6FF00203 		mvn	r3, #2
 4862 1bfa 4EE0     		b	.L320
 4863              	.L322:
1876:../src/os/rt-thread/src/ipc.c **** 	}
1877:../src/os/rt-thread/src/ipc.c **** 	/* move free list pointer */
1878:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_free = msg->next;
 4864              		.loc 2 1878 0
 4865 1bfc 7B69     		ldr	r3, [r7, #20]
 4866 1bfe 1A68     		ldr	r2, [r3, #0]
 4867 1c00 FB68     		ldr	r3, [r7, #12]
 4868 1c02 DA62     		str	r2, [r3, #44]
1879:../src/os/rt-thread/src/ipc.c **** 
1880:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1881:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 4869              		.loc 2 1881 0
 4870 1c04 2346     		mov	r3, r4
 4871 1c06 1846     		mov	r0, r3
 4872 1c08 FFF7FEFF 		bl	rt_hw_interrupt_enable
1882:../src/os/rt-thread/src/ipc.c **** 
1883:../src/os/rt-thread/src/ipc.c **** 	/* the msg is the new tailer of list, the next shall be NULL */
1884:../src/os/rt-thread/src/ipc.c **** 	msg->next = RT_NULL;
 4873              		.loc 2 1884 0
 4874 1c0c 7B69     		ldr	r3, [r7, #20]
 4875 1c0e 4FF00002 		mov	r2, #0
 4876 1c12 1A60     		str	r2, [r3, #0]
1885:../src/os/rt-thread/src/ipc.c **** 	/* copy buffer */
1886:../src/os/rt-thread/src/ipc.c **** 	rt_memcpy(msg + 1, buffer, size);
 4877              		.loc 2 1886 0
 4878 1c14 7B69     		ldr	r3, [r7, #20]
 4879 1c16 03F10403 		add	r3, r3, #4
 4880 1c1a 1846     		mov	r0, r3
 4881 1c1c B968     		ldr	r1, [r7, #8]
 4882 1c1e 7A68     		ldr	r2, [r7, #4]
 4883 1c20 FFF7FEFF 		bl	rt_memcpy
1887:../src/os/rt-thread/src/ipc.c **** 
1888:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1889:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 4884              		.loc 2 1889 0
 4885 1c24 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4886 1c28 0346     		mov	r3, r0
 4887 1c2a 1C46     		mov	r4, r3
1890:../src/os/rt-thread/src/ipc.c **** 	/* link msg to message queue */
1891:../src/os/rt-thread/src/ipc.c **** 	if (mq->msg_queue_tail != RT_NULL)
 4888              		.loc 2 1891 0
 4889 1c2c FB68     		ldr	r3, [r7, #12]
 4890 1c2e 9B6A     		ldr	r3, [r3, #40]
 4891 1c30 002B     		cmp	r3, #0
 4892 1c32 03D0     		beq	.L323
1892:../src/os/rt-thread/src/ipc.c **** 	{
1893:../src/os/rt-thread/src/ipc.c **** 		/* if the tail exists, */
1894:../src/os/rt-thread/src/ipc.c **** 		((struct rt_mq_message *)mq->msg_queue_tail)->next = msg;
 4893              		.loc 2 1894 0
 4894 1c34 FB68     		ldr	r3, [r7, #12]
 4895 1c36 9B6A     		ldr	r3, [r3, #40]
 4896 1c38 7A69     		ldr	r2, [r7, #20]
 4897 1c3a 1A60     		str	r2, [r3, #0]
 4898              	.L323:
1895:../src/os/rt-thread/src/ipc.c **** 	}
1896:../src/os/rt-thread/src/ipc.c **** 
1897:../src/os/rt-thread/src/ipc.c **** 	/* set new tail */
1898:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_tail = msg;
 4899              		.loc 2 1898 0
 4900 1c3c FB68     		ldr	r3, [r7, #12]
 4901 1c3e 7A69     		ldr	r2, [r7, #20]
 4902 1c40 9A62     		str	r2, [r3, #40]
1899:../src/os/rt-thread/src/ipc.c **** 	/* if the head is empty, set head */
1900:../src/os/rt-thread/src/ipc.c **** 	if (mq->msg_queue_head == RT_NULL)
 4903              		.loc 2 1900 0
 4904 1c42 FB68     		ldr	r3, [r7, #12]
 4905 1c44 5B6A     		ldr	r3, [r3, #36]
 4906 1c46 002B     		cmp	r3, #0
 4907 1c48 02D1     		bne	.L324
1901:../src/os/rt-thread/src/ipc.c **** 		mq->msg_queue_head = msg;
 4908              		.loc 2 1901 0
 4909 1c4a FB68     		ldr	r3, [r7, #12]
 4910 1c4c 7A69     		ldr	r2, [r7, #20]
 4911 1c4e 5A62     		str	r2, [r3, #36]
 4912              	.L324:
1902:../src/os/rt-thread/src/ipc.c **** 
1903:../src/os/rt-thread/src/ipc.c **** 	/* increase message entry */
1904:../src/os/rt-thread/src/ipc.c **** 	mq->entry ++;
 4913              		.loc 2 1904 0
 4914 1c50 FB68     		ldr	r3, [r7, #12]
 4915 1c52 1B8C     		ldrh	r3, [r3, #32]
 4916 1c54 03F10103 		add	r3, r3, #1
 4917 1c58 9AB2     		uxth	r2, r3
 4918 1c5a FB68     		ldr	r3, [r7, #12]
 4919 1c5c 1A84     		strh	r2, [r3, #32]	@ movhi
1905:../src/os/rt-thread/src/ipc.c **** 
1906:../src/os/rt-thread/src/ipc.c **** 	/* resume suspended thread */
1907:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&mq->parent.suspend_thread))
 4920              		.loc 2 1907 0
 4921 1c5e FB68     		ldr	r3, [r7, #12]
 4922 1c60 03F11003 		add	r3, r3, #16
 4923 1c64 1846     		mov	r0, r3
 4924 1c66 FEF7F3F9 		bl	rt_list_isempty
 4925 1c6a 0346     		mov	r3, r0
 4926 1c6c 002B     		cmp	r3, #0
 4927 1c6e 0ED1     		bne	.L325
1908:../src/os/rt-thread/src/ipc.c **** 	{
1909:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume(&(mq->parent.suspend_thread));
 4928              		.loc 2 1909 0
 4929 1c70 FB68     		ldr	r3, [r7, #12]
 4930 1c72 03F11003 		add	r3, r3, #16
 4931 1c76 1846     		mov	r0, r3
 4932 1c78 FEF75CFA 		bl	rt_ipc_list_resume
1910:../src/os/rt-thread/src/ipc.c **** 
1911:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1912:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 4933              		.loc 2 1912 0
 4934 1c7c 2346     		mov	r3, r4
 4935 1c7e 1846     		mov	r0, r3
 4936 1c80 FFF7FEFF 		bl	rt_hw_interrupt_enable
1913:../src/os/rt-thread/src/ipc.c **** 
1914:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 4937              		.loc 2 1914 0
 4938 1c84 FFF7FEFF 		bl	rt_schedule
1915:../src/os/rt-thread/src/ipc.c **** 
1916:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 4939              		.loc 2 1916 0
 4940 1c88 4FF00003 		mov	r3, #0
 4941 1c8c 05E0     		b	.L320
 4942              	.L325:
1917:../src/os/rt-thread/src/ipc.c **** 	}
1918:../src/os/rt-thread/src/ipc.c **** 
1919:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1920:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 4943              		.loc 2 1920 0
 4944 1c8e 2346     		mov	r3, r4
 4945 1c90 1846     		mov	r0, r3
 4946 1c92 FFF7FEFF 		bl	rt_hw_interrupt_enable
1921:../src/os/rt-thread/src/ipc.c **** 
1922:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 4947              		.loc 2 1922 0
 4948 1c96 4FF00003 		mov	r3, #0
 4949              	.L320:
1923:../src/os/rt-thread/src/ipc.c **** }
 4950              		.loc 2 1923 0
 4951 1c9a 1846     		mov	r0, r3
 4952 1c9c 07F11C07 		add	r7, r7, #28
 4953 1ca0 BD46     		mov	sp, r7
 4954 1ca2 90BD     		pop	{r4, r7, pc}
 4955              	.L327:
 4956              		.align	2
 4957              	.L326:
 4958 1ca4 00000000 		.word	.LC0
 4959 1ca8 90000000 		.word	.LC7
 4960 1cac EC000000 		.word	__FUNCTION__.5279
 4961 1cb0 A0000000 		.word	.LC8
 4962 1cb4 B4000000 		.word	.LC9
 4963 1cb8 00000000 		.word	rt_object_put_hook
 4964              		.cfi_endproc
 4965              	.LFE43:
 4967              		.align	2
 4968              		.global	rt_mq_urgent
 4969              		.thumb
 4970              		.thumb_func
 4972              	rt_mq_urgent:
 4973              	.LFB44:
1924:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_send);
1925:../src/os/rt-thread/src/ipc.c **** 
1926:../src/os/rt-thread/src/ipc.c **** /**
1927:../src/os/rt-thread/src/ipc.c ****  * This function will send urgently a message to message queue object, which means
1928:../src/os/rt-thread/src/ipc.c ****  * the message will be inserted to the head of message queue. If there are threads
1929:../src/os/rt-thread/src/ipc.c ****  * suspended on message queue object, it will be waked up.
1930:../src/os/rt-thread/src/ipc.c ****  *
1931:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
1932:../src/os/rt-thread/src/ipc.c ****  * @param buffer the message
1933:../src/os/rt-thread/src/ipc.c ****  * @param size the size of buffer
1934:../src/os/rt-thread/src/ipc.c ****  *
1935:../src/os/rt-thread/src/ipc.c ****  * @return the error code
1936:../src/os/rt-thread/src/ipc.c ****  */
1937:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_urgent(rt_mq_t mq, void *buffer, rt_size_t size)
1938:../src/os/rt-thread/src/ipc.c **** {
 4974              		.loc 2 1938 0
 4975              		.cfi_startproc
 4976              		@ args = 0, pretend = 0, frame = 24
 4977              		@ frame_needed = 1, uses_anonymous_args = 0
 4978 1cbc 90B5     		push	{r4, r7, lr}
 4979              	.LCFI126:
 4980              		.cfi_def_cfa_offset 12
 4981              		.cfi_offset 4, -12
 4982              		.cfi_offset 7, -8
 4983              		.cfi_offset 14, -4
 4984 1cbe 87B0     		sub	sp, sp, #28
 4985              	.LCFI127:
 4986              		.cfi_def_cfa_offset 40
 4987 1cc0 00AF     		add	r7, sp, #0
 4988              	.LCFI128:
 4989              		.cfi_def_cfa_register 7
 4990 1cc2 F860     		str	r0, [r7, #12]
 4991 1cc4 B960     		str	r1, [r7, #8]
 4992 1cc6 7A60     		str	r2, [r7, #4]
1939:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
1940:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *msg;
1941:../src/os/rt-thread/src/ipc.c **** 
1942:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 4993              		.loc 2 1942 0
 4994 1cc8 FB68     		ldr	r3, [r7, #12]
 4995 1cca 002B     		cmp	r3, #0
 4996 1ccc 0DD1     		bne	.L329
 4997              	.LBB61:
 4998              		.loc 2 1942 0 is_stmt 0 discriminator 1
 4999 1cce 4FF00003 		mov	r3, #0
 5000 1cd2 FB74     		strb	r3, [r7, #19]
 5001 1cd4 4D48     		ldr	r0, .L341
 5002 1cd6 4E49     		ldr	r1, .L341+4
 5003 1cd8 4E4A     		ldr	r2, .L341+8
 5004 1cda 40F29673 		movw	r3, #1942
 5005 1cde FFF7FEFF 		bl	rt_kprintf
 5006              	.L330:
 5007              		.loc 2 1942 0 discriminator 2
 5008 1ce2 FB7C     		ldrb	r3, [r7, #19]
 5009 1ce4 DBB2     		uxtb	r3, r3
 5010 1ce6 002B     		cmp	r3, #0
 5011 1ce8 FBD0     		beq	.L330
 5012              	.L329:
 5013              	.LBE61:
1943:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(buffer != RT_NULL);
 5014              		.loc 2 1943 0 is_stmt 1
 5015 1cea BB68     		ldr	r3, [r7, #8]
 5016 1cec 002B     		cmp	r3, #0
 5017 1cee 0DD1     		bne	.L331
 5018              	.LBB62:
 5019              		.loc 2 1943 0 is_stmt 0 discriminator 1
 5020 1cf0 4FF00003 		mov	r3, #0
 5021 1cf4 BB74     		strb	r3, [r7, #18]
 5022 1cf6 4548     		ldr	r0, .L341
 5023 1cf8 4749     		ldr	r1, .L341+12
 5024 1cfa 464A     		ldr	r2, .L341+8
 5025 1cfc 40F29773 		movw	r3, #1943
 5026 1d00 FFF7FEFF 		bl	rt_kprintf
 5027              	.L332:
 5028              		.loc 2 1943 0 discriminator 2
 5029 1d04 BB7C     		ldrb	r3, [r7, #18]
 5030 1d06 DBB2     		uxtb	r3, r3
 5031 1d08 002B     		cmp	r3, #0
 5032 1d0a FBD0     		beq	.L332
 5033              	.L331:
 5034              	.LBE62:
1944:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(size != 0);
 5035              		.loc 2 1944 0 is_stmt 1
 5036 1d0c 7B68     		ldr	r3, [r7, #4]
 5037 1d0e 002B     		cmp	r3, #0
 5038 1d10 0DD1     		bne	.L333
 5039              	.LBB63:
 5040              		.loc 2 1944 0 is_stmt 0 discriminator 1
 5041 1d12 4FF00003 		mov	r3, #0
 5042 1d16 7B74     		strb	r3, [r7, #17]
 5043 1d18 3C48     		ldr	r0, .L341
 5044 1d1a 4049     		ldr	r1, .L341+16
 5045 1d1c 3D4A     		ldr	r2, .L341+8
 5046 1d1e 4FF4F363 		mov	r3, #1944
 5047 1d22 FFF7FEFF 		bl	rt_kprintf
 5048              	.L334:
 5049              		.loc 2 1944 0 discriminator 2
 5050 1d26 7B7C     		ldrb	r3, [r7, #17]
 5051 1d28 DBB2     		uxtb	r3, r3
 5052 1d2a 002B     		cmp	r3, #0
 5053 1d2c FBD0     		beq	.L334
 5054              	.L333:
 5055              	.LBE63:
1945:../src/os/rt-thread/src/ipc.c **** 
1946:../src/os/rt-thread/src/ipc.c **** 	/* greater than one message size */
1947:../src/os/rt-thread/src/ipc.c **** 	if (size > mq->msg_size)
 5056              		.loc 2 1947 0 is_stmt 1
 5057 1d2e FB68     		ldr	r3, [r7, #12]
 5058 1d30 9B8B     		ldrh	r3, [r3, #28]
 5059 1d32 1A46     		mov	r2, r3
 5060 1d34 7B68     		ldr	r3, [r7, #4]
 5061 1d36 9A42     		cmp	r2, r3
 5062 1d38 02D2     		bcs	.L335
1948:../src/os/rt-thread/src/ipc.c **** 		return -RT_ERROR;
 5063              		.loc 2 1948 0
 5064 1d3a 4FF0FF33 		mov	r3, #-1
 5065 1d3e 60E0     		b	.L336
 5066              	.L335:
1949:../src/os/rt-thread/src/ipc.c **** 
1950:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
 5067              		.loc 2 1950 0
 5068 1d40 374B     		ldr	r3, .L341+20
 5069 1d42 1B68     		ldr	r3, [r3, #0]
 5070 1d44 002B     		cmp	r3, #0
 5071 1d46 04D0     		beq	.L337
 5072              		.loc 2 1950 0 is_stmt 0 discriminator 1
 5073 1d48 354B     		ldr	r3, .L341+20
 5074 1d4a 1B68     		ldr	r3, [r3, #0]
 5075 1d4c FA68     		ldr	r2, [r7, #12]
 5076 1d4e 1046     		mov	r0, r2
 5077 1d50 9847     		blx	r3
 5078              	.L337:
1951:../src/os/rt-thread/src/ipc.c **** 
1952:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1953:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 5079              		.loc 2 1953 0 is_stmt 1
 5080 1d52 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5081 1d56 0346     		mov	r3, r0
 5082 1d58 1C46     		mov	r4, r3
1954:../src/os/rt-thread/src/ipc.c **** 
1955:../src/os/rt-thread/src/ipc.c **** 	/* get a free list, there must be an empty item */
1956:../src/os/rt-thread/src/ipc.c **** 	msg = (struct rt_mq_message *)mq->msg_queue_free;
 5083              		.loc 2 1956 0
 5084 1d5a FB68     		ldr	r3, [r7, #12]
 5085 1d5c DB6A     		ldr	r3, [r3, #44]
 5086 1d5e 7B61     		str	r3, [r7, #20]
1957:../src/os/rt-thread/src/ipc.c **** 	/* message queue is full */
1958:../src/os/rt-thread/src/ipc.c **** 	if (msg == RT_NULL)
 5087              		.loc 2 1958 0
 5088 1d60 7B69     		ldr	r3, [r7, #20]
 5089 1d62 002B     		cmp	r3, #0
 5090 1d64 06D1     		bne	.L338
1959:../src/os/rt-thread/src/ipc.c **** 	{
1960:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1961:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 5091              		.loc 2 1961 0
 5092 1d66 2346     		mov	r3, r4
 5093 1d68 1846     		mov	r0, r3
 5094 1d6a FFF7FEFF 		bl	rt_hw_interrupt_enable
1962:../src/os/rt-thread/src/ipc.c **** 
1963:../src/os/rt-thread/src/ipc.c **** 		return -RT_EFULL;
 5095              		.loc 2 1963 0
 5096 1d6e 6FF00203 		mvn	r3, #2
 5097 1d72 46E0     		b	.L336
 5098              	.L338:
1964:../src/os/rt-thread/src/ipc.c **** 	}
1965:../src/os/rt-thread/src/ipc.c **** 	/* move free list pointer */
1966:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_free = msg->next;
 5099              		.loc 2 1966 0
 5100 1d74 7B69     		ldr	r3, [r7, #20]
 5101 1d76 1A68     		ldr	r2, [r3, #0]
 5102 1d78 FB68     		ldr	r3, [r7, #12]
 5103 1d7a DA62     		str	r2, [r3, #44]
1967:../src/os/rt-thread/src/ipc.c **** 
1968:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
1969:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 5104              		.loc 2 1969 0
 5105 1d7c 2346     		mov	r3, r4
 5106 1d7e 1846     		mov	r0, r3
 5107 1d80 FFF7FEFF 		bl	rt_hw_interrupt_enable
1970:../src/os/rt-thread/src/ipc.c **** 
1971:../src/os/rt-thread/src/ipc.c **** 	/* copy buffer */
1972:../src/os/rt-thread/src/ipc.c **** 	rt_memcpy(msg + 1, buffer, size);
 5108              		.loc 2 1972 0
 5109 1d84 7B69     		ldr	r3, [r7, #20]
 5110 1d86 03F10403 		add	r3, r3, #4
 5111 1d8a 1846     		mov	r0, r3
 5112 1d8c B968     		ldr	r1, [r7, #8]
 5113 1d8e 7A68     		ldr	r2, [r7, #4]
 5114 1d90 FFF7FEFF 		bl	rt_memcpy
1973:../src/os/rt-thread/src/ipc.c **** 
1974:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
1975:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 5115              		.loc 2 1975 0
 5116 1d94 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5117 1d98 0346     		mov	r3, r0
 5118 1d9a 1C46     		mov	r4, r3
1976:../src/os/rt-thread/src/ipc.c **** 
1977:../src/os/rt-thread/src/ipc.c **** 	/* link msg to the beginning of message queue */
1978:../src/os/rt-thread/src/ipc.c **** 	msg->next = mq->msg_queue_head;
 5119              		.loc 2 1978 0
 5120 1d9c FB68     		ldr	r3, [r7, #12]
 5121 1d9e 5A6A     		ldr	r2, [r3, #36]
 5122 1da0 7B69     		ldr	r3, [r7, #20]
 5123 1da2 1A60     		str	r2, [r3, #0]
1979:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_head = msg;
 5124              		.loc 2 1979 0
 5125 1da4 FB68     		ldr	r3, [r7, #12]
 5126 1da6 7A69     		ldr	r2, [r7, #20]
 5127 1da8 5A62     		str	r2, [r3, #36]
1980:../src/os/rt-thread/src/ipc.c **** 
1981:../src/os/rt-thread/src/ipc.c **** 	/* if there is no tail */
1982:../src/os/rt-thread/src/ipc.c **** 	if (mq->msg_queue_tail == RT_NULL)
 5128              		.loc 2 1982 0
 5129 1daa FB68     		ldr	r3, [r7, #12]
 5130 1dac 9B6A     		ldr	r3, [r3, #40]
 5131 1dae 002B     		cmp	r3, #0
 5132 1db0 02D1     		bne	.L339
1983:../src/os/rt-thread/src/ipc.c **** 		mq->msg_queue_tail = msg;
 5133              		.loc 2 1983 0
 5134 1db2 FB68     		ldr	r3, [r7, #12]
 5135 1db4 7A69     		ldr	r2, [r7, #20]
 5136 1db6 9A62     		str	r2, [r3, #40]
 5137              	.L339:
1984:../src/os/rt-thread/src/ipc.c **** 
1985:../src/os/rt-thread/src/ipc.c **** 	/* increase message entry */
1986:../src/os/rt-thread/src/ipc.c **** 	mq->entry ++;
 5138              		.loc 2 1986 0
 5139 1db8 FB68     		ldr	r3, [r7, #12]
 5140 1dba 1B8C     		ldrh	r3, [r3, #32]
 5141 1dbc 03F10103 		add	r3, r3, #1
 5142 1dc0 9AB2     		uxth	r2, r3
 5143 1dc2 FB68     		ldr	r3, [r7, #12]
 5144 1dc4 1A84     		strh	r2, [r3, #32]	@ movhi
1987:../src/os/rt-thread/src/ipc.c **** 
1988:../src/os/rt-thread/src/ipc.c **** 	/* resume suspended thread */
1989:../src/os/rt-thread/src/ipc.c **** 	if (!rt_list_isempty(&mq->parent.suspend_thread))
 5145              		.loc 2 1989 0
 5146 1dc6 FB68     		ldr	r3, [r7, #12]
 5147 1dc8 03F11003 		add	r3, r3, #16
 5148 1dcc 1846     		mov	r0, r3
 5149 1dce FEF73FF9 		bl	rt_list_isempty
 5150 1dd2 0346     		mov	r3, r0
 5151 1dd4 002B     		cmp	r3, #0
 5152 1dd6 0ED1     		bne	.L340
1990:../src/os/rt-thread/src/ipc.c **** 	{
1991:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume(&(mq->parent.suspend_thread));
 5153              		.loc 2 1991 0
 5154 1dd8 FB68     		ldr	r3, [r7, #12]
 5155 1dda 03F11003 		add	r3, r3, #16
 5156 1dde 1846     		mov	r0, r3
 5157 1de0 FEF7A8F9 		bl	rt_ipc_list_resume
1992:../src/os/rt-thread/src/ipc.c **** 
1993:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
1994:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 5158              		.loc 2 1994 0
 5159 1de4 2346     		mov	r3, r4
 5160 1de6 1846     		mov	r0, r3
 5161 1de8 FFF7FEFF 		bl	rt_hw_interrupt_enable
1995:../src/os/rt-thread/src/ipc.c **** 
1996:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 5162              		.loc 2 1996 0
 5163 1dec FFF7FEFF 		bl	rt_schedule
1997:../src/os/rt-thread/src/ipc.c **** 
1998:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 5164              		.loc 2 1998 0
 5165 1df0 4FF00003 		mov	r3, #0
 5166 1df4 05E0     		b	.L336
 5167              	.L340:
1999:../src/os/rt-thread/src/ipc.c **** 	}
2000:../src/os/rt-thread/src/ipc.c **** 
2001:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
2002:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 5168              		.loc 2 2002 0
 5169 1df6 2346     		mov	r3, r4
 5170 1df8 1846     		mov	r0, r3
 5171 1dfa FFF7FEFF 		bl	rt_hw_interrupt_enable
2003:../src/os/rt-thread/src/ipc.c **** 
2004:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 5172              		.loc 2 2004 0
 5173 1dfe 4FF00003 		mov	r3, #0
 5174              	.L336:
2005:../src/os/rt-thread/src/ipc.c **** }
 5175              		.loc 2 2005 0
 5176 1e02 1846     		mov	r0, r3
 5177 1e04 07F11C07 		add	r7, r7, #28
 5178 1e08 BD46     		mov	sp, r7
 5179 1e0a 90BD     		pop	{r4, r7, pc}
 5180              	.L342:
 5181              		.align	2
 5182              	.L341:
 5183 1e0c 00000000 		.word	.LC0
 5184 1e10 90000000 		.word	.LC7
 5185 1e14 DC000000 		.word	__FUNCTION__.5299
 5186 1e18 A0000000 		.word	.LC8
 5187 1e1c B4000000 		.word	.LC9
 5188 1e20 00000000 		.word	rt_object_put_hook
 5189              		.cfi_endproc
 5190              	.LFE44:
 5192              		.align	2
 5193              		.global	rt_mq_recv
 5194              		.thumb
 5195              		.thumb_func
 5197              	rt_mq_recv:
 5198              	.LFB45:
2006:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_urgent);
2007:../src/os/rt-thread/src/ipc.c **** 
2008:../src/os/rt-thread/src/ipc.c **** /**
2009:../src/os/rt-thread/src/ipc.c ****  * This function will receive a message from message queue object, if there is no
2010:../src/os/rt-thread/src/ipc.c ****  * message in message queue object, the thread shall wait for a specified time.
2011:../src/os/rt-thread/src/ipc.c ****  *
2012:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
2013:../src/os/rt-thread/src/ipc.c ****  * @param buffer the received message will be saved in
2014:../src/os/rt-thread/src/ipc.c ****  * @param size the size of buffer
2015:../src/os/rt-thread/src/ipc.c ****  * @param timeout the waiting time
2016:../src/os/rt-thread/src/ipc.c ****  *
2017:../src/os/rt-thread/src/ipc.c ****  * @return the error code
2018:../src/os/rt-thread/src/ipc.c ****  */
2019:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_recv(rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout)
2020:../src/os/rt-thread/src/ipc.c **** {
 5199              		.loc 2 2020 0
 5200              		.cfi_startproc
 5201              		@ args = 0, pretend = 0, frame = 40
 5202              		@ frame_needed = 1, uses_anonymous_args = 0
 5203 1e24 90B5     		push	{r4, r7, lr}
 5204              	.LCFI129:
 5205              		.cfi_def_cfa_offset 12
 5206              		.cfi_offset 4, -12
 5207              		.cfi_offset 7, -8
 5208              		.cfi_offset 14, -4
 5209 1e26 8BB0     		sub	sp, sp, #44
 5210              	.LCFI130:
 5211              		.cfi_def_cfa_offset 56
 5212 1e28 00AF     		add	r7, sp, #0
 5213              	.LCFI131:
 5214              		.cfi_def_cfa_register 7
 5215 1e2a F860     		str	r0, [r7, #12]
 5216 1e2c B960     		str	r1, [r7, #8]
 5217 1e2e 7A60     		str	r2, [r7, #4]
 5218 1e30 3B60     		str	r3, [r7, #0]
2021:../src/os/rt-thread/src/ipc.c **** 	struct rt_thread *thread;
2022:../src/os/rt-thread/src/ipc.c **** 	register rt_ubase_t temp;
2023:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *msg;
2024:../src/os/rt-thread/src/ipc.c **** 	rt_uint32_t tick_delta;
2025:../src/os/rt-thread/src/ipc.c **** 
2026:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 5219              		.loc 2 2026 0
 5220 1e32 FB68     		ldr	r3, [r7, #12]
 5221 1e34 002B     		cmp	r3, #0
 5222 1e36 0DD1     		bne	.L344
 5223              	.LBB64:
 5224              		.loc 2 2026 0 is_stmt 0 discriminator 1
 5225 1e38 4FF00003 		mov	r3, #0
 5226 1e3c FB75     		strb	r3, [r7, #23]
 5227 1e3e 8848     		ldr	r0, .L363
 5228 1e40 8849     		ldr	r1, .L363+4
 5229 1e42 894A     		ldr	r2, .L363+8
 5230 1e44 40F2EA73 		movw	r3, #2026
 5231 1e48 FFF7FEFF 		bl	rt_kprintf
 5232              	.L345:
 5233              		.loc 2 2026 0 discriminator 2
 5234 1e4c FB7D     		ldrb	r3, [r7, #23]
 5235 1e4e DBB2     		uxtb	r3, r3
 5236 1e50 002B     		cmp	r3, #0
 5237 1e52 FBD0     		beq	.L345
 5238              	.L344:
 5239              	.LBE64:
2027:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(buffer != RT_NULL);
 5240              		.loc 2 2027 0 is_stmt 1
 5241 1e54 BB68     		ldr	r3, [r7, #8]
 5242 1e56 002B     		cmp	r3, #0
 5243 1e58 0DD1     		bne	.L346
 5244              	.LBB65:
 5245              		.loc 2 2027 0 is_stmt 0 discriminator 1
 5246 1e5a 4FF00003 		mov	r3, #0
 5247 1e5e BB75     		strb	r3, [r7, #22]
 5248 1e60 7F48     		ldr	r0, .L363
 5249 1e62 8249     		ldr	r1, .L363+12
 5250 1e64 804A     		ldr	r2, .L363+8
 5251 1e66 40F2EB73 		movw	r3, #2027
 5252 1e6a FFF7FEFF 		bl	rt_kprintf
 5253              	.L347:
 5254              		.loc 2 2027 0 discriminator 2
 5255 1e6e BB7D     		ldrb	r3, [r7, #22]
 5256 1e70 DBB2     		uxtb	r3, r3
 5257 1e72 002B     		cmp	r3, #0
 5258 1e74 FBD0     		beq	.L347
 5259              	.L346:
 5260              	.LBE65:
2028:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(size != 0);
 5261              		.loc 2 2028 0 is_stmt 1
 5262 1e76 7B68     		ldr	r3, [r7, #4]
 5263 1e78 002B     		cmp	r3, #0
 5264 1e7a 0DD1     		bne	.L348
 5265              	.LBB66:
 5266              		.loc 2 2028 0 is_stmt 0 discriminator 1
 5267 1e7c 4FF00003 		mov	r3, #0
 5268 1e80 7B75     		strb	r3, [r7, #21]
 5269 1e82 7748     		ldr	r0, .L363
 5270 1e84 7A49     		ldr	r1, .L363+16
 5271 1e86 784A     		ldr	r2, .L363+8
 5272 1e88 40F2EC73 		movw	r3, #2028
 5273 1e8c FFF7FEFF 		bl	rt_kprintf
 5274              	.L349:
 5275              		.loc 2 2028 0 discriminator 2
 5276 1e90 7B7D     		ldrb	r3, [r7, #21]
 5277 1e92 DBB2     		uxtb	r3, r3
 5278 1e94 002B     		cmp	r3, #0
 5279 1e96 FBD0     		beq	.L349
 5280              	.L348:
 5281              	.LBE66:
2029:../src/os/rt-thread/src/ipc.c **** 
2030:../src/os/rt-thread/src/ipc.c **** 	/* initialize delta tick */
2031:../src/os/rt-thread/src/ipc.c **** 	tick_delta = 0;
 5282              		.loc 2 2031 0 is_stmt 1
 5283 1e98 4FF00003 		mov	r3, #0
 5284 1e9c 7B62     		str	r3, [r7, #36]
2032:../src/os/rt-thread/src/ipc.c **** 	/* get current thread */
2033:../src/os/rt-thread/src/ipc.c **** 	thread = rt_thread_self();
 5285              		.loc 2 2033 0
 5286 1e9e FFF7FEFF 		bl	rt_thread_self
 5287 1ea2 3862     		str	r0, [r7, #32]
2034:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mq->parent.parent)));
 5288              		.loc 2 2034 0
 5289 1ea4 734B     		ldr	r3, .L363+20
 5290 1ea6 1B68     		ldr	r3, [r3, #0]
 5291 1ea8 002B     		cmp	r3, #0
 5292 1eaa 04D0     		beq	.L350
 5293              		.loc 2 2034 0 is_stmt 0 discriminator 1
 5294 1eac 714B     		ldr	r3, .L363+20
 5295 1eae 1B68     		ldr	r3, [r3, #0]
 5296 1eb0 FA68     		ldr	r2, [r7, #12]
 5297 1eb2 1046     		mov	r0, r2
 5298 1eb4 9847     		blx	r3
 5299              	.L350:
2035:../src/os/rt-thread/src/ipc.c **** 
2036:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
2037:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 5300              		.loc 2 2037 0 is_stmt 1
 5301 1eb6 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5302 1eba 0346     		mov	r3, r0
 5303 1ebc 1C46     		mov	r4, r3
2038:../src/os/rt-thread/src/ipc.c **** 
2039:../src/os/rt-thread/src/ipc.c **** 	/* for non-blocking call */
2040:../src/os/rt-thread/src/ipc.c **** 	if (mq->entry == 0 && timeout == 0)
 5304              		.loc 2 2040 0
 5305 1ebe FB68     		ldr	r3, [r7, #12]
 5306 1ec0 1B8C     		ldrh	r3, [r3, #32]
 5307 1ec2 002B     		cmp	r3, #0
 5308 1ec4 7ED1     		bne	.L362
 5309              		.loc 2 2040 0 is_stmt 0 discriminator 1
 5310 1ec6 3B68     		ldr	r3, [r7, #0]
 5311 1ec8 002B     		cmp	r3, #0
 5312 1eca 7BD1     		bne	.L362
2041:../src/os/rt-thread/src/ipc.c **** 	{
2042:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 5313              		.loc 2 2042 0 is_stmt 1
 5314 1ecc 2346     		mov	r3, r4
 5315 1ece 1846     		mov	r0, r3
 5316 1ed0 FFF7FEFF 		bl	rt_hw_interrupt_enable
2043:../src/os/rt-thread/src/ipc.c **** 
2044:../src/os/rt-thread/src/ipc.c **** 		return -RT_ETIMEOUT;
 5317              		.loc 2 2044 0
 5318 1ed4 6FF00103 		mvn	r3, #1
 5319 1ed8 BDE0     		b	.L352
 5320              	.L359:
 5321              	.LBB67:
2045:../src/os/rt-thread/src/ipc.c **** 	}
2046:../src/os/rt-thread/src/ipc.c **** 
2047:../src/os/rt-thread/src/ipc.c **** 	/* message queue is empty */
2048:../src/os/rt-thread/src/ipc.c **** 	while (mq->entry == 0)
2049:../src/os/rt-thread/src/ipc.c **** 	{
2050:../src/os/rt-thread/src/ipc.c **** 		RT_DEBUG_NOT_IN_INTERRUPT;
 5322              		.loc 2 2050 0
 5323 1eda FFF7FEFF 		bl	rt_hw_interrupt_disable
 5324 1ede F861     		str	r0, [r7, #28]
 5325 1ee0 FFF7FEFF 		bl	rt_interrupt_get_nest
 5326 1ee4 0346     		mov	r3, r0
 5327 1ee6 002B     		cmp	r3, #0
 5328 1ee8 11D0     		beq	.L354
 5329              		.loc 2 2050 0 is_stmt 0 discriminator 1
 5330 1eea 6348     		ldr	r0, .L363+24
 5331 1eec 5E49     		ldr	r1, .L363+8
 5332 1eee FFF7FEFF 		bl	rt_kprintf
 5333              	.LBB68:
 5334 1ef2 4FF00003 		mov	r3, #0
 5335 1ef6 3B75     		strb	r3, [r7, #20]
 5336 1ef8 5948     		ldr	r0, .L363
 5337 1efa 6049     		ldr	r1, .L363+28
 5338 1efc 5A4A     		ldr	r2, .L363+8
 5339 1efe 40F60203 		movw	r3, #2050
 5340 1f02 FFF7FEFF 		bl	rt_kprintf
 5341              	.L355:
 5342              		.loc 2 2050 0 discriminator 4
 5343 1f06 3B7D     		ldrb	r3, [r7, #20]
 5344 1f08 DBB2     		uxtb	r3, r3
 5345 1f0a 002B     		cmp	r3, #0
 5346 1f0c FBD0     		beq	.L355
 5347              	.L354:
 5348              	.LBE68:
 5349              		.loc 2 2050 0 discriminator 2
 5350 1f0e F869     		ldr	r0, [r7, #28]
 5351 1f10 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5352              	.LBE67:
2051:../src/os/rt-thread/src/ipc.c **** 
2052:../src/os/rt-thread/src/ipc.c **** 		/* reset error number in thread */
2053:../src/os/rt-thread/src/ipc.c **** 		thread->error = RT_EOK;
 5353              		.loc 2 2053 0 is_stmt 1 discriminator 2
 5354 1f14 3B6A     		ldr	r3, [r7, #32]
 5355 1f16 4FF00002 		mov	r2, #0
 5356 1f1a DA62     		str	r2, [r3, #44]
2054:../src/os/rt-thread/src/ipc.c **** 
2055:../src/os/rt-thread/src/ipc.c **** 		/* no waiting, return timeout */
2056:../src/os/rt-thread/src/ipc.c **** 		if (timeout == 0)
 5357              		.loc 2 2056 0 discriminator 2
 5358 1f1c 3B68     		ldr	r3, [r7, #0]
 5359 1f1e 002B     		cmp	r3, #0
 5360 1f20 0AD1     		bne	.L356
2057:../src/os/rt-thread/src/ipc.c **** 		{
2058:../src/os/rt-thread/src/ipc.c **** 			/* enable interrupt */
2059:../src/os/rt-thread/src/ipc.c **** 			rt_hw_interrupt_enable(temp);
 5361              		.loc 2 2059 0
 5362 1f22 2346     		mov	r3, r4
 5363 1f24 1846     		mov	r0, r3
 5364 1f26 FFF7FEFF 		bl	rt_hw_interrupt_enable
2060:../src/os/rt-thread/src/ipc.c **** 
2061:../src/os/rt-thread/src/ipc.c **** 			thread->error = -RT_ETIMEOUT;
 5365              		.loc 2 2061 0
 5366 1f2a 3B6A     		ldr	r3, [r7, #32]
 5367 1f2c 6FF00102 		mvn	r2, #1
 5368 1f30 DA62     		str	r2, [r3, #44]
2062:../src/os/rt-thread/src/ipc.c **** 
2063:../src/os/rt-thread/src/ipc.c **** 			return -RT_ETIMEOUT;
 5369              		.loc 2 2063 0
 5370 1f32 6FF00103 		mvn	r3, #1
 5371 1f36 8EE0     		b	.L352
 5372              	.L356:
2064:../src/os/rt-thread/src/ipc.c **** 		}
2065:../src/os/rt-thread/src/ipc.c **** 
2066:../src/os/rt-thread/src/ipc.c **** 		/* suspend current thread */
2067:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_suspend(&(mq->parent.suspend_thread), thread, mq->parent.parent.flag);
 5373              		.loc 2 2067 0
 5374 1f38 FB68     		ldr	r3, [r7, #12]
 5375 1f3a 03F11002 		add	r2, r3, #16
 5376 1f3e FB68     		ldr	r3, [r7, #12]
 5377 1f40 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 5378 1f42 1046     		mov	r0, r2
 5379 1f44 396A     		ldr	r1, [r7, #32]
 5380 1f46 1A46     		mov	r2, r3
 5381 1f48 FEF7A6F8 		bl	rt_ipc_list_suspend
2068:../src/os/rt-thread/src/ipc.c **** 
2069:../src/os/rt-thread/src/ipc.c **** 		/* has waiting time, start thread timer */
2070:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 5382              		.loc 2 2070 0
 5383 1f4c 3B68     		ldr	r3, [r7, #0]
 5384 1f4e 002B     		cmp	r3, #0
 5385 1f50 12DD     		ble	.L357
2071:../src/os/rt-thread/src/ipc.c **** 		{
2072:../src/os/rt-thread/src/ipc.c **** 			/* get the start tick of timer */
2073:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get();
 5386              		.loc 2 2073 0
 5387 1f52 FFF7FEFF 		bl	rt_tick_get
 5388 1f56 7862     		str	r0, [r7, #36]
2074:../src/os/rt-thread/src/ipc.c **** 
2075:../src/os/rt-thread/src/ipc.c **** 			RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n", thread->name));
2076:../src/os/rt-thread/src/ipc.c **** 
2077:../src/os/rt-thread/src/ipc.c **** 			/* reset the timeout of thread timer and start it */
2078:../src/os/rt-thread/src/ipc.c **** 			rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &timeout);
 5389              		.loc 2 2078 0
 5390 1f58 3B6A     		ldr	r3, [r7, #32]
 5391 1f5a 03F14802 		add	r2, r3, #72
 5392 1f5e 3B46     		mov	r3, r7
 5393 1f60 1046     		mov	r0, r2
 5394 1f62 4FF00001 		mov	r1, #0
 5395 1f66 1A46     		mov	r2, r3
 5396 1f68 FFF7FEFF 		bl	rt_timer_control
2079:../src/os/rt-thread/src/ipc.c **** 			rt_timer_start(&(thread->thread_timer));
 5397              		.loc 2 2079 0
 5398 1f6c 3B6A     		ldr	r3, [r7, #32]
 5399 1f6e 03F14803 		add	r3, r3, #72
 5400 1f72 1846     		mov	r0, r3
 5401 1f74 FFF7FEFF 		bl	rt_timer_start
 5402              	.L357:
2080:../src/os/rt-thread/src/ipc.c **** 		}
2081:../src/os/rt-thread/src/ipc.c **** 
2082:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
2083:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(temp);
 5403              		.loc 2 2083 0
 5404 1f78 2346     		mov	r3, r4
 5405 1f7a 1846     		mov	r0, r3
 5406 1f7c FFF7FEFF 		bl	rt_hw_interrupt_enable
2084:../src/os/rt-thread/src/ipc.c **** 
2085:../src/os/rt-thread/src/ipc.c **** 		/* re-schedule */
2086:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 5407              		.loc 2 2086 0
 5408 1f80 FFF7FEFF 		bl	rt_schedule
2087:../src/os/rt-thread/src/ipc.c **** 
2088:../src/os/rt-thread/src/ipc.c **** 		/* recv message */
2089:../src/os/rt-thread/src/ipc.c **** 		if (thread->error != RT_EOK)
 5409              		.loc 2 2089 0
 5410 1f84 3B6A     		ldr	r3, [r7, #32]
 5411 1f86 DB6A     		ldr	r3, [r3, #44]
 5412 1f88 002B     		cmp	r3, #0
 5413 1f8a 02D0     		beq	.L358
2090:../src/os/rt-thread/src/ipc.c **** 		{
2091:../src/os/rt-thread/src/ipc.c **** 			/* return error */
2092:../src/os/rt-thread/src/ipc.c **** 			return thread->error;
 5414              		.loc 2 2092 0
 5415 1f8c 3B6A     		ldr	r3, [r7, #32]
 5416 1f8e DB6A     		ldr	r3, [r3, #44]
 5417 1f90 61E0     		b	.L352
 5418              	.L358:
2093:../src/os/rt-thread/src/ipc.c **** 		}
2094:../src/os/rt-thread/src/ipc.c **** 
2095:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
2096:../src/os/rt-thread/src/ipc.c **** 		temp = rt_hw_interrupt_disable();
 5419              		.loc 2 2096 0
 5420 1f92 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5421 1f96 0346     		mov	r3, r0
 5422 1f98 1C46     		mov	r4, r3
2097:../src/os/rt-thread/src/ipc.c **** 
2098:../src/os/rt-thread/src/ipc.c **** 		/* if it's not waiting forever and then re-calculate timeout tick */
2099:../src/os/rt-thread/src/ipc.c **** 		if (timeout > 0)
 5423              		.loc 2 2099 0
 5424 1f9a 3B68     		ldr	r3, [r7, #0]
 5425 1f9c 002B     		cmp	r3, #0
 5426 1f9e 12DD     		ble	.L353
2100:../src/os/rt-thread/src/ipc.c **** 		{
2101:../src/os/rt-thread/src/ipc.c **** 			tick_delta = rt_tick_get() - tick_delta;
 5427              		.loc 2 2101 0
 5428 1fa0 FFF7FEFF 		bl	rt_tick_get
 5429 1fa4 0246     		mov	r2, r0
 5430 1fa6 7B6A     		ldr	r3, [r7, #36]
 5431 1fa8 D31A     		subs	r3, r2, r3
 5432 1faa 7B62     		str	r3, [r7, #36]
2102:../src/os/rt-thread/src/ipc.c **** 			timeout -= tick_delta;
 5433              		.loc 2 2102 0
 5434 1fac 3B68     		ldr	r3, [r7, #0]
 5435 1fae 1A46     		mov	r2, r3
 5436 1fb0 7B6A     		ldr	r3, [r7, #36]
 5437 1fb2 D31A     		subs	r3, r2, r3
 5438 1fb4 3B60     		str	r3, [r7, #0]
2103:../src/os/rt-thread/src/ipc.c **** 			if (timeout < 0)
 5439              		.loc 2 2103 0
 5440 1fb6 3B68     		ldr	r3, [r7, #0]
 5441 1fb8 002B     		cmp	r3, #0
 5442 1fba 04DA     		bge	.L353
2104:../src/os/rt-thread/src/ipc.c **** 				timeout = 0;
 5443              		.loc 2 2104 0
 5444 1fbc 4FF00003 		mov	r3, #0
 5445 1fc0 3B60     		str	r3, [r7, #0]
 5446 1fc2 00E0     		b	.L353
 5447              	.L362:
2048:../src/os/rt-thread/src/ipc.c **** 	while (mq->entry == 0)
 5448              		.loc 2 2048 0
 5449 1fc4 00BF     		nop
 5450              	.L353:
2048:../src/os/rt-thread/src/ipc.c **** 	while (mq->entry == 0)
 5451              		.loc 2 2048 0 is_stmt 0 discriminator 1
 5452 1fc6 FB68     		ldr	r3, [r7, #12]
 5453 1fc8 1B8C     		ldrh	r3, [r3, #32]
 5454 1fca 002B     		cmp	r3, #0
 5455 1fcc 85D0     		beq	.L359
2105:../src/os/rt-thread/src/ipc.c **** 		}
2106:../src/os/rt-thread/src/ipc.c **** 	}
2107:../src/os/rt-thread/src/ipc.c **** 
2108:../src/os/rt-thread/src/ipc.c **** 	/* get message from queue */
2109:../src/os/rt-thread/src/ipc.c **** 	msg = (struct rt_mq_message *)mq->msg_queue_head;
 5456              		.loc 2 2109 0 is_stmt 1
 5457 1fce FB68     		ldr	r3, [r7, #12]
 5458 1fd0 5B6A     		ldr	r3, [r3, #36]
 5459 1fd2 BB61     		str	r3, [r7, #24]
2110:../src/os/rt-thread/src/ipc.c **** 
2111:../src/os/rt-thread/src/ipc.c **** 	/* move message queue head */
2112:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_head = msg->next;
 5460              		.loc 2 2112 0
 5461 1fd4 BB69     		ldr	r3, [r7, #24]
 5462 1fd6 1A68     		ldr	r2, [r3, #0]
 5463 1fd8 FB68     		ldr	r3, [r7, #12]
 5464 1fda 5A62     		str	r2, [r3, #36]
2113:../src/os/rt-thread/src/ipc.c **** 	/* reach queue tail, set to NULL */
2114:../src/os/rt-thread/src/ipc.c **** 	if (mq->msg_queue_tail == msg)
 5465              		.loc 2 2114 0
 5466 1fdc FB68     		ldr	r3, [r7, #12]
 5467 1fde 9A6A     		ldr	r2, [r3, #40]
 5468 1fe0 BB69     		ldr	r3, [r7, #24]
 5469 1fe2 9A42     		cmp	r2, r3
 5470 1fe4 03D1     		bne	.L360
2115:../src/os/rt-thread/src/ipc.c **** 		mq->msg_queue_tail = RT_NULL;
 5471              		.loc 2 2115 0
 5472 1fe6 FB68     		ldr	r3, [r7, #12]
 5473 1fe8 4FF00002 		mov	r2, #0
 5474 1fec 9A62     		str	r2, [r3, #40]
 5475              	.L360:
2116:../src/os/rt-thread/src/ipc.c **** 
2117:../src/os/rt-thread/src/ipc.c **** 	/* decrease message entry */
2118:../src/os/rt-thread/src/ipc.c **** 	mq->entry --;
 5476              		.loc 2 2118 0
 5477 1fee FB68     		ldr	r3, [r7, #12]
 5478 1ff0 1B8C     		ldrh	r3, [r3, #32]
 5479 1ff2 03F1FF33 		add	r3, r3, #-1
 5480 1ff6 9AB2     		uxth	r2, r3
 5481 1ff8 FB68     		ldr	r3, [r7, #12]
 5482 1ffa 1A84     		strh	r2, [r3, #32]	@ movhi
2119:../src/os/rt-thread/src/ipc.c **** 
2120:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
2121:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 5483              		.loc 2 2121 0
 5484 1ffc 2346     		mov	r3, r4
 5485 1ffe 1846     		mov	r0, r3
 5486 2000 FFF7FEFF 		bl	rt_hw_interrupt_enable
2122:../src/os/rt-thread/src/ipc.c **** 
2123:../src/os/rt-thread/src/ipc.c **** 	/* copy message */
2124:../src/os/rt-thread/src/ipc.c **** 	rt_memcpy(buffer, msg + 1, size > mq->msg_size ? mq->msg_size : size);
 5487              		.loc 2 2124 0
 5488 2004 BB69     		ldr	r3, [r7, #24]
 5489 2006 03F10402 		add	r2, r3, #4
 5490 200a FB68     		ldr	r3, [r7, #12]
 5491 200c 9B8B     		ldrh	r3, [r3, #28]
 5492 200e 1946     		mov	r1, r3
 5493 2010 7B68     		ldr	r3, [r7, #4]
 5494 2012 9942     		cmp	r1, r3
 5495 2014 38BF     		it	cc
 5496 2016 0B46     		movcc	r3, r1
 5497 2018 B868     		ldr	r0, [r7, #8]
 5498 201a 1146     		mov	r1, r2
 5499 201c 1A46     		mov	r2, r3
 5500 201e FFF7FEFF 		bl	rt_memcpy
2125:../src/os/rt-thread/src/ipc.c **** 
2126:../src/os/rt-thread/src/ipc.c **** 	/* disable interrupt */
2127:../src/os/rt-thread/src/ipc.c **** 	temp = rt_hw_interrupt_disable();
 5501              		.loc 2 2127 0
 5502 2022 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5503 2026 0346     		mov	r3, r0
 5504 2028 1C46     		mov	r4, r3
2128:../src/os/rt-thread/src/ipc.c **** 	/* put message to free list */
2129:../src/os/rt-thread/src/ipc.c **** 	msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 5505              		.loc 2 2129 0
 5506 202a FB68     		ldr	r3, [r7, #12]
 5507 202c DA6A     		ldr	r2, [r3, #44]
 5508 202e BB69     		ldr	r3, [r7, #24]
 5509 2030 1A60     		str	r2, [r3, #0]
2130:../src/os/rt-thread/src/ipc.c **** 	mq->msg_queue_free = msg;
 5510              		.loc 2 2130 0
 5511 2032 FB68     		ldr	r3, [r7, #12]
 5512 2034 BA69     		ldr	r2, [r7, #24]
 5513 2036 DA62     		str	r2, [r3, #44]
2131:../src/os/rt-thread/src/ipc.c **** 	/* enable interrupt */
2132:../src/os/rt-thread/src/ipc.c **** 	rt_hw_interrupt_enable(temp);
 5514              		.loc 2 2132 0
 5515 2038 2346     		mov	r3, r4
 5516 203a 1846     		mov	r0, r3
 5517 203c FFF7FEFF 		bl	rt_hw_interrupt_enable
2133:../src/os/rt-thread/src/ipc.c **** 
2134:../src/os/rt-thread/src/ipc.c **** 	RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));
 5518              		.loc 2 2134 0
 5519 2040 0F4B     		ldr	r3, .L363+32
 5520 2042 1B68     		ldr	r3, [r3, #0]
 5521 2044 002B     		cmp	r3, #0
 5522 2046 04D0     		beq	.L361
 5523              		.loc 2 2134 0 is_stmt 0 discriminator 1
 5524 2048 0D4B     		ldr	r3, .L363+32
 5525 204a 1B68     		ldr	r3, [r3, #0]
 5526 204c FA68     		ldr	r2, [r7, #12]
 5527 204e 1046     		mov	r0, r2
 5528 2050 9847     		blx	r3
 5529              	.L361:
2135:../src/os/rt-thread/src/ipc.c **** 
2136:../src/os/rt-thread/src/ipc.c **** 	return RT_EOK;
 5530              		.loc 2 2136 0 is_stmt 1
 5531 2052 4FF00003 		mov	r3, #0
 5532              	.L352:
2137:../src/os/rt-thread/src/ipc.c **** }
 5533              		.loc 2 2137 0
 5534 2056 1846     		mov	r0, r3
 5535 2058 07F12C07 		add	r7, r7, #44
 5536 205c BD46     		mov	sp, r7
 5537 205e 90BD     		pop	{r4, r7, pc}
 5538              	.L364:
 5539              		.align	2
 5540              	.L363:
 5541 2060 00000000 		.word	.LC0
 5542 2064 90000000 		.word	.LC7
 5543 2068 D0000000 		.word	__FUNCTION__.5322
 5544 206c A0000000 		.word	.LC8
 5545 2070 B4000000 		.word	.LC9
 5546 2074 00000000 		.word	rt_object_trytake_hook
 5547 2078 30000000 		.word	.LC2
 5548 207c 54000000 		.word	.LC3
 5549 2080 00000000 		.word	rt_object_take_hook
 5550              		.cfi_endproc
 5551              	.LFE45:
 5553              		.align	2
 5554              		.global	rt_mq_control
 5555              		.thumb
 5556              		.thumb_func
 5558              	rt_mq_control:
 5559              	.LFB46:
2138:../src/os/rt-thread/src/ipc.c **** RTM_EXPORT(rt_mq_recv);  
2139:../src/os/rt-thread/src/ipc.c **** 
2140:../src/os/rt-thread/src/ipc.c **** /**
2141:../src/os/rt-thread/src/ipc.c ****  * This function can get or set some extra attributions of a message queue object.
2142:../src/os/rt-thread/src/ipc.c ****  *
2143:../src/os/rt-thread/src/ipc.c ****  * @param mq the message queue object
2144:../src/os/rt-thread/src/ipc.c ****  * @param cmd the execution command
2145:../src/os/rt-thread/src/ipc.c ****  * @param arg the execution argument
2146:../src/os/rt-thread/src/ipc.c ****  *
2147:../src/os/rt-thread/src/ipc.c ****  * @return the error code
2148:../src/os/rt-thread/src/ipc.c ****  */
2149:../src/os/rt-thread/src/ipc.c **** rt_err_t rt_mq_control(rt_mq_t mq, rt_uint8_t cmd, void *arg)
2150:../src/os/rt-thread/src/ipc.c **** {
 5560              		.loc 2 2150 0
 5561              		.cfi_startproc
 5562              		@ args = 0, pretend = 0, frame = 32
 5563              		@ frame_needed = 1, uses_anonymous_args = 0
 5564 2084 80B5     		push	{r7, lr}
 5565              	.LCFI132:
 5566              		.cfi_def_cfa_offset 8
 5567              		.cfi_offset 7, -8
 5568              		.cfi_offset 14, -4
 5569 2086 88B0     		sub	sp, sp, #32
 5570              	.LCFI133:
 5571              		.cfi_def_cfa_offset 40
 5572 2088 00AF     		add	r7, sp, #0
 5573              	.LCFI134:
 5574              		.cfi_def_cfa_register 7
 5575 208a F860     		str	r0, [r7, #12]
 5576 208c 0B46     		mov	r3, r1
 5577 208e 7A60     		str	r2, [r7, #4]
 5578 2090 FB72     		strb	r3, [r7, #11]
2151:../src/os/rt-thread/src/ipc.c **** 	rt_ubase_t level;
2152:../src/os/rt-thread/src/ipc.c **** 	struct rt_mq_message *msg;
2153:../src/os/rt-thread/src/ipc.c **** 
2154:../src/os/rt-thread/src/ipc.c **** 	RT_ASSERT(mq != RT_NULL);
 5579              		.loc 2 2154 0
 5580 2092 FB68     		ldr	r3, [r7, #12]
 5581 2094 002B     		cmp	r3, #0
 5582 2096 0DD1     		bne	.L366
 5583              	.LBB69:
 5584              		.loc 2 2154 0 is_stmt 0 discriminator 1
 5585 2098 4FF00003 		mov	r3, #0
 5586 209c FB75     		strb	r3, [r7, #23]
 5587 209e 2448     		ldr	r0, .L373
 5588 20a0 2449     		ldr	r1, .L373+4
 5589 20a2 254A     		ldr	r2, .L373+8
 5590 20a4 40F66A03 		movw	r3, #2154
 5591 20a8 FFF7FEFF 		bl	rt_kprintf
 5592              	.L367:
 5593              		.loc 2 2154 0 discriminator 2
 5594 20ac FB7D     		ldrb	r3, [r7, #23]
 5595 20ae DBB2     		uxtb	r3, r3
 5596 20b0 002B     		cmp	r3, #0
 5597 20b2 FBD0     		beq	.L367
 5598              	.L366:
 5599              	.LBE69:
2155:../src/os/rt-thread/src/ipc.c **** 
2156:../src/os/rt-thread/src/ipc.c **** 	if (cmd == RT_IPC_CMD_RESET)
 5600              		.loc 2 2156 0 is_stmt 1
 5601 20b4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 5602 20b6 012B     		cmp	r3, #1
 5603 20b8 32D1     		bne	.L368
2157:../src/os/rt-thread/src/ipc.c **** 	{
2158:../src/os/rt-thread/src/ipc.c **** 		/* disable interrupt */
2159:../src/os/rt-thread/src/ipc.c **** 		level = rt_hw_interrupt_disable();
 5604              		.loc 2 2159 0
 5605 20ba FFF7FEFF 		bl	rt_hw_interrupt_disable
 5606 20be 0346     		mov	r3, r0
 5607 20c0 FB61     		str	r3, [r7, #28]
2160:../src/os/rt-thread/src/ipc.c **** 
2161:../src/os/rt-thread/src/ipc.c **** 		/* resume all waiting thread */
2162:../src/os/rt-thread/src/ipc.c **** 		rt_ipc_list_resume_all(&mq->parent.suspend_thread);
 5608              		.loc 2 2162 0
 5609 20c2 FB68     		ldr	r3, [r7, #12]
 5610 20c4 03F11003 		add	r3, r3, #16
 5611 20c8 1846     		mov	r0, r3
 5612 20ca FEF747F8 		bl	rt_ipc_list_resume_all
2163:../src/os/rt-thread/src/ipc.c **** 
2164:../src/os/rt-thread/src/ipc.c **** 		/* release all message in the queue */
2165:../src/os/rt-thread/src/ipc.c **** 		while (mq->msg_queue_head != RT_NULL)
 5613              		.loc 2 2165 0
 5614 20ce 16E0     		b	.L369
 5615              	.L371:
2166:../src/os/rt-thread/src/ipc.c **** 		{
2167:../src/os/rt-thread/src/ipc.c **** 			/* get message from queue */
2168:../src/os/rt-thread/src/ipc.c **** 			msg = (struct rt_mq_message *)mq->msg_queue_head;
 5616              		.loc 2 2168 0
 5617 20d0 FB68     		ldr	r3, [r7, #12]
 5618 20d2 5B6A     		ldr	r3, [r3, #36]
 5619 20d4 BB61     		str	r3, [r7, #24]
2169:../src/os/rt-thread/src/ipc.c **** 
2170:../src/os/rt-thread/src/ipc.c **** 			/* move message queue head */
2171:../src/os/rt-thread/src/ipc.c **** 			mq->msg_queue_head = msg->next;
 5620              		.loc 2 2171 0
 5621 20d6 BB69     		ldr	r3, [r7, #24]
 5622 20d8 1A68     		ldr	r2, [r3, #0]
 5623 20da FB68     		ldr	r3, [r7, #12]
 5624 20dc 5A62     		str	r2, [r3, #36]
2172:../src/os/rt-thread/src/ipc.c **** 			/* reach queue tail, set to NULL */
2173:../src/os/rt-thread/src/ipc.c **** 			if (mq->msg_queue_tail == msg)
 5625              		.loc 2 2173 0
 5626 20de FB68     		ldr	r3, [r7, #12]
 5627 20e0 9A6A     		ldr	r2, [r3, #40]
 5628 20e2 BB69     		ldr	r3, [r7, #24]
 5629 20e4 9A42     		cmp	r2, r3
 5630 20e6 03D1     		bne	.L370
2174:../src/os/rt-thread/src/ipc.c **** 				mq->msg_queue_tail = RT_NULL;
 5631              		.loc 2 2174 0
 5632 20e8 FB68     		ldr	r3, [r7, #12]
 5633 20ea 4FF00002 		mov	r2, #0
 5634 20ee 9A62     		str	r2, [r3, #40]
 5635              	.L370:
2175:../src/os/rt-thread/src/ipc.c **** 
2176:../src/os/rt-thread/src/ipc.c **** 			/* put message to free list */
2177:../src/os/rt-thread/src/ipc.c **** 			msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 5636              		.loc 2 2177 0
 5637 20f0 FB68     		ldr	r3, [r7, #12]
 5638 20f2 DA6A     		ldr	r2, [r3, #44]
 5639 20f4 BB69     		ldr	r3, [r7, #24]
 5640 20f6 1A60     		str	r2, [r3, #0]
2178:../src/os/rt-thread/src/ipc.c **** 			mq->msg_queue_free = msg;
 5641              		.loc 2 2178 0
 5642 20f8 FB68     		ldr	r3, [r7, #12]
 5643 20fa BA69     		ldr	r2, [r7, #24]
 5644 20fc DA62     		str	r2, [r3, #44]
 5645              	.L369:
2165:../src/os/rt-thread/src/ipc.c **** 		while (mq->msg_queue_head != RT_NULL)
 5646              		.loc 2 2165 0 discriminator 1
 5647 20fe FB68     		ldr	r3, [r7, #12]
 5648 2100 5B6A     		ldr	r3, [r3, #36]
 5649 2102 002B     		cmp	r3, #0
 5650 2104 E4D1     		bne	.L371
2179:../src/os/rt-thread/src/ipc.c **** 		}
2180:../src/os/rt-thread/src/ipc.c **** 
2181:../src/os/rt-thread/src/ipc.c **** 		/* clean entry */
2182:../src/os/rt-thread/src/ipc.c **** 		mq->entry = 0;
 5651              		.loc 2 2182 0
 5652 2106 FB68     		ldr	r3, [r7, #12]
 5653 2108 4FF00002 		mov	r2, #0
 5654 210c 1A84     		strh	r2, [r3, #32]	@ movhi
2183:../src/os/rt-thread/src/ipc.c **** 
2184:../src/os/rt-thread/src/ipc.c **** 		/* enable interrupt */
2185:../src/os/rt-thread/src/ipc.c **** 		rt_hw_interrupt_enable(level);
 5655              		.loc 2 2185 0
 5656 210e FB69     		ldr	r3, [r7, #28]
 5657 2110 1846     		mov	r0, r3
 5658 2112 FFF7FEFF 		bl	rt_hw_interrupt_enable
2186:../src/os/rt-thread/src/ipc.c **** 
2187:../src/os/rt-thread/src/ipc.c **** 		rt_schedule();
 5659              		.loc 2 2187 0
 5660 2116 FFF7FEFF 		bl	rt_schedule
2188:../src/os/rt-thread/src/ipc.c **** 
2189:../src/os/rt-thread/src/ipc.c **** 		return RT_EOK;
 5661              		.loc 2 2189 0
 5662 211a 4FF00003 		mov	r3, #0
 5663 211e 01E0     		b	.L372
 5664              	.L368:
2190:../src/os/rt-thread/src/ipc.c **** 	}
2191:../src/os/rt-thread/src/ipc.c **** 
2192:../src/os/rt-thread/src/ipc.c **** 	return -RT_ERROR;
 5665              		.loc 2 2192 0
 5666 2120 4FF0FF33 		mov	r3, #-1
 5667              	.L372:
2193:../src/os/rt-thread/src/ipc.c **** }
 5668              		.loc 2 2193 0
 5669 2124 1846     		mov	r0, r3
 5670 2126 07F12007 		add	r7, r7, #32
 5671 212a BD46     		mov	sp, r7
 5672 212c 80BD     		pop	{r7, pc}
 5673              	.L374:
 5674 212e 00BF     		.align	2
 5675              	.L373:
 5676 2130 00000000 		.word	.LC0
 5677 2134 90000000 		.word	.LC7
 5678 2138 C0000000 		.word	__FUNCTION__.5350
 5679              		.cfi_endproc
 5680              	.LFE46:
 5682              		.section	.rodata
 5683 00be 0000     		.align	2
 5686              	__FUNCTION__.5350:
 5687 00c0 72745F6D 		.ascii	"rt_mq_control\000"
 5687      715F636F 
 5687      6E74726F 
 5687      6C00
 5688 00ce 0000     		.align	2
 5691              	__FUNCTION__.5322:
 5692 00d0 72745F6D 		.ascii	"rt_mq_recv\000"
 5692      715F7265 
 5692      637600
 5693 00db 00       		.align	2
 5696              	__FUNCTION__.5299:
 5697 00dc 72745F6D 		.ascii	"rt_mq_urgent\000"
 5697      715F7572 
 5697      67656E74 
 5697      00
 5698 00e9 000000   		.align	2
 5701              	__FUNCTION__.5279:
 5702 00ec 72745F6D 		.ascii	"rt_mq_send\000"
 5702      715F7365 
 5702      6E6400
 5703 00f7 00       		.align	2
 5706              	__FUNCTION__.5262:
 5707 00f8 72745F6D 		.ascii	"rt_mq_delete\000"
 5707      715F6465 
 5707      6C657465 
 5707      00
 5708 0105 000000   		.align	2
 5711              	__FUNCTION__.5250:
 5712 0108 72745F6D 		.ascii	"rt_mq_create\000"
 5712      715F6372 
 5712      65617465 
 5712      00
 5713 0115 000000   		.align	2
 5716              	__FUNCTION__.5236:
 5717 0118 72745F6D 		.ascii	"rt_mq_detach\000"
 5717      715F6465 
 5717      74616368 
 5717      00
 5718 0125 000000   		.align	2
 5721              	__FUNCTION__.5225:
 5722 0128 72745F6D 		.ascii	"rt_mq_init\000"
 5722      715F696E 
 5722      697400
 5723 0133 00       		.align	2
 5726              	__FUNCTION__.5208:
 5727 0134 72745F6D 		.ascii	"rt_mb_control\000"
 5727      625F636F 
 5727      6E74726F 
 5727      6C00
 5728 0142 0000     		.align	2
 5731              	__FUNCTION__.5189:
 5732 0144 72745F6D 		.ascii	"rt_mb_recv\000"
 5732      625F7265 
 5732      637600
 5733 014f 00       		.align	2
 5736              	__FUNCTION__.5164:
 5737 0150 72745F6D 		.ascii	"rt_mb_send_wait\000"
 5737      625F7365 
 5737      6E645F77 
 5737      61697400 
 5738              		.align	2
 5741              	__FUNCTION__.5146:
 5742 0160 72745F6D 		.ascii	"rt_mb_delete\000"
 5742      625F6465 
 5742      6C657465 
 5742      00
 5743 016d 000000   		.align	2
 5746              	__FUNCTION__.5137:
 5747 0170 72745F6D 		.ascii	"rt_mb_create\000"
 5747      625F6372 
 5747      65617465 
 5747      00
 5748 017d 000000   		.align	2
 5751              	__FUNCTION__.5126:
 5752 0180 72745F6D 		.ascii	"rt_mb_detach\000"
 5752      625F6465 
 5752      74616368 
 5752      00
 5753 018d 000000   		.align	2
 5756              	__FUNCTION__.5118:
 5757 0190 72745F6D 		.ascii	"rt_mb_init\000"
 5757      625F696E 
 5757      697400
 5758 019b 00       		.align	2
 5761              	__FUNCTION__.5106:
 5762 019c 72745F65 		.ascii	"rt_event_control\000"
 5762      76656E74 
 5762      5F636F6E 
 5762      74726F6C 
 5762      00
 5763 01ad 000000   		.align	2
 5766              	__FUNCTION__.5090:
 5767 01b0 72745F65 		.ascii	"rt_event_recv\000"
 5767      76656E74 
 5767      5F726563 
 5767      7600
 5768 01be 0000     		.align	2
 5771              	__FUNCTION__.5072:
 5772 01c0 72745F65 		.ascii	"rt_event_send\000"
 5772      76656E74 
 5772      5F73656E 
 5772      6400
 5773 01ce 0000     		.align	2
 5776              	__FUNCTION__.5053:
 5777 01d0 72745F65 		.ascii	"rt_event_delete\000"
 5777      76656E74 
 5777      5F64656C 
 5777      65746500 
 5778              		.align	2
 5781              	__FUNCTION__.5044:
 5782 01e0 72745F65 		.ascii	"rt_event_create\000"
 5782      76656E74 
 5782      5F637265 
 5782      61746500 
 5783              		.align	2
 5786              	__FUNCTION__.5034:
 5787 01f0 72745F65 		.ascii	"rt_event_detach\000"
 5787      76656E74 
 5787      5F646574 
 5787      61636800 
 5788              		.align	2
 5791              	__FUNCTION__.5026:
 5792 0200 72745F65 		.ascii	"rt_event_init\000"
 5792      76656E74 
 5792      5F696E69 
 5792      7400
 5793 020e 0000     		.align	2
 5796              	__FUNCTION__.5000:
 5797 0210 72745F6D 		.ascii	"rt_mutex_take\000"
 5797      75746578 
 5797      5F74616B 
 5797      6500
 5798 021e 0000     		.align	2
 5801              	__FUNCTION__.4984:
 5802 0220 72745F6D 		.ascii	"rt_mutex_delete\000"
 5802      75746578 
 5802      5F64656C 
 5802      65746500 
 5803              		.align	2
 5806              	__FUNCTION__.4975:
 5807 0230 72745F6D 		.ascii	"rt_mutex_create\000"
 5807      75746578 
 5807      5F637265 
 5807      61746500 
 5808              		.align	2
 5811              	__FUNCTION__.4965:
 5812 0240 72745F6D 		.ascii	"rt_mutex_detach\000"
 5812      75746578 
 5812      5F646574 
 5812      61636800 
 5813              		.align	2
 5816              	__FUNCTION__.4957:
 5817 0250 72745F6D 		.ascii	"rt_mutex_init\000"
 5817      75746578 
 5817      5F696E69 
 5817      7400
 5818 025e 0000     		.align	2
 5821              	__FUNCTION__.4946:
 5822 0260 72745F73 		.ascii	"rt_sem_control\000"
 5822      656D5F63 
 5822      6F6E7472 
 5822      6F6C00
 5823 026f 00       		.align	2
 5826              	__FUNCTION__.4922:
 5827 0270 72745F73 		.ascii	"rt_sem_take\000"
 5827      656D5F74 
 5827      616B6500 
 5828              		.align	2
 5831              	__FUNCTION__.4906:
 5832 027c 72745F73 		.ascii	"rt_sem_delete\000"
 5832      656D5F64 
 5832      656C6574 
 5832      6500
 5833 028a 0000     		.align	2
 5836              	__FUNCTION__.4897:
 5837 028c 72745F73 		.ascii	"rt_sem_create\000"
 5837      656D5F63 
 5837      72656174 
 5837      6500
 5838 029a 0000     		.align	2
 5841              	__FUNCTION__.4886:
 5842 029c 72745F73 		.ascii	"rt_sem_detach\000"
 5842      656D5F64 
 5842      65746163 
 5842      6800
 5843 02aa 0000     		.align	2
 5846              	__FUNCTION__.4878:
 5847 02ac 72745F73 		.ascii	"rt_sem_init\000"
 5847      656D5F69 
 5847      6E697400 
 5848              		.text
 5849              	.Letext0:
 5850              		.file 3 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ipc.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:18     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:22     .text:00000000 rt_list_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:61     .text:00000020 rt_list_insert_before
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:110    .text:00000050 rt_list_isempty
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:150    .text:00000074 rt_ipc_object_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:188    .text:00000098 rt_ipc_list_suspend
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:299    .text:00000134 rt_ipc_list_resume
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:339    .text:0000015c rt_ipc_list_resume_all
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:399    .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:411    .text:000001a8 rt_sem_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:482    .text:0000020c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5846   .rodata:000002ac __FUNCTION__.4878
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:488    .text:00000218 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:493    .text:00000218 rt_sem_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:551    .text:00000264 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5841   .rodata:0000029c __FUNCTION__.4886
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:565    .text:00000270 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:570    .text:00000270 rt_sem_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:660    .text:000002f0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5836   .rodata:0000028c __FUNCTION__.4897
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:667    .text:00000300 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:672    .text:00000300 rt_sem_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:762    .text:00000388 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5831   .rodata:0000027c __FUNCTION__.4906
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:770    .text:0000039c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:775    .text:0000039c rt_sem_take
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:965    .text:000004cc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5826   .rodata:00000270 __FUNCTION__.4922
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:975    .text:000004e8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:980    .text:000004e8 rt_sem_trytake
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1016   .text:00000508 rt_sem_release
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1097   .text:0000057c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1101   .text:00000580 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1106   .text:00000580 rt_sem_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1192   .text:000005f8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5821   .rodata:00000260 __FUNCTION__.4946
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1203   .text:00000604 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1208   .text:00000604 rt_mutex_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1290   .text:00000680 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5816   .rodata:00000250 __FUNCTION__.4957
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1296   .text:0000068c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1301   .text:0000068c rt_mutex_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1359   .text:000006d8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5811   .rodata:00000240 __FUNCTION__.4965
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1365   .text:000006e4 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1370   .text:000006e4 rt_mutex_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1470   .text:0000077c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5806   .rodata:00000230 __FUNCTION__.4975
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1477   .text:0000078c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1482   .text:0000078c rt_mutex_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1572   .text:00000814 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5801   .rodata:00000220 __FUNCTION__.4984
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1580   .text:00000828 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1585   .text:00000828 rt_mutex_take
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1834   .text:000009c4 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5796   .rodata:00000210 __FUNCTION__.5000
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1844   .text:000009e0 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:1849   .text:000009e0 rt_mutex_release
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2014   .text:00000af0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2018   .text:00000af4 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2023   .text:00000af4 rt_mutex_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2065   .text:00000b14 rt_event_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2135   .text:00000b78 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5791   .rodata:00000200 __FUNCTION__.5026
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2141   .text:00000b84 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2146   .text:00000b84 rt_event_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2204   .text:00000bd0 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5786   .rodata:000001f0 __FUNCTION__.5034
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2210   .text:00000bdc $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2215   .text:00000bdc rt_event_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2303   .text:00000c5c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5781   .rodata:000001e0 __FUNCTION__.5044
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2310   .text:00000c6c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2315   .text:00000c6c rt_event_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2405   .text:00000cf4 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5776   .rodata:000001d0 __FUNCTION__.5053
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2413   .text:00000d08 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2418   .text:00000d08 rt_event_send
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2619   .text:00000e48 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5771   .rodata:000001c0 __FUNCTION__.5072
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2626   .text:00000e58 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2631   .text:00000e58 rt_event_recv
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2897   .text:0000100c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5766   .rodata:000001b0 __FUNCTION__.5090
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2907   .text:00001028 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2912   .text:00001028 rt_event_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:2992   .text:0000109c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5761   .rodata:0000019c __FUNCTION__.5106
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3003   .text:000010a8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3008   .text:000010a8 rt_mb_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3100   .text:00001138 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5756   .rodata:00000190 __FUNCTION__.5118
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3106   .text:00001144 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3111   .text:00001144 rt_mb_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3174   .text:0000119c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5751   .rodata:00000180 __FUNCTION__.5126
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3180   .text:000011a8 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3185   .text:000011a8 rt_mb_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3314   .text:00001278 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5746   .rodata:00000170 __FUNCTION__.5137
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3321   .text:00001288 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3326   .text:00001288 rt_mb_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3426   .text:00001324 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5741   .rodata:00000160 __FUNCTION__.5146
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3434   .text:00001338 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3439   .text:00001338 rt_mb_send_wait
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3728   .text:00001528 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5736   .rodata:00000150 __FUNCTION__.5164
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3737   .text:00001540 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3742   .text:00001540 rt_mb_send
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:3780   .text:00001564 rt_mb_recv
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4094   .text:00001778 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5731   .rodata:00000144 __FUNCTION__.5189
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4104   .text:00001794 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4109   .text:00001794 rt_mb_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4202   .text:00001824 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5726   .rodata:00000134 __FUNCTION__.5208
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4213   .text:00001830 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4218   .text:00001830 rt_mq_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4356   .text:00001910 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5721   .rodata:00000128 __FUNCTION__.5225
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4362   .text:0000191c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4367   .text:0000191c rt_mq_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4425   .text:00001968 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5716   .rodata:00000118 __FUNCTION__.5236
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4431   .text:00001974 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4436   .text:00001974 rt_mq_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4621   .text:00001aa0 rt_mq_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4609   .text:00001a90 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5711   .rodata:00000108 __FUNCTION__.5250
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4616   .text:00001aa0 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4716   .text:00001b30 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5706   .rodata:000000f8 __FUNCTION__.5262
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4732   .text:00001b44 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4737   .text:00001b44 rt_mq_send
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4958   .text:00001ca4 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5701   .rodata:000000ec __FUNCTION__.5279
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4967   .text:00001cbc $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:4972   .text:00001cbc rt_mq_urgent
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5183   .text:00001e0c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5696   .rodata:000000dc __FUNCTION__.5299
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5192   .text:00001e24 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5197   .text:00001e24 rt_mq_recv
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5541   .text:00002060 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5691   .rodata:000000d0 __FUNCTION__.5322
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5553   .text:00002084 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5558   .text:00002084 rt_mq_control
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5676   .text:00002130 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccclZyf5.s:5686   .rodata:000000c0 __FUNCTION__.5350
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.1271905b0c3eea0323671cb235cf482e
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_thread_suspend
rt_thread_resume
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_kprintf
rt_object_init
rt_object_detach
rt_interrupt_get_nest
rt_object_allocate
rt_object_delete
rt_thread_self
rt_timer_control
rt_timer_start
rt_schedule
rt_object_trytake_hook
rt_object_take_hook
rt_object_put_hook
rt_thread_control
rt_malloc
rt_free
rt_tick_get
rt_memcpy
