   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mempool.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	rt_list_init:
  23              	.LFB0:
  24              		.file 1 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtservice.h"
   1:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*
   2:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * File      : rtservice.h
   3:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * This file is part of RT-Thread RTOS
   4:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
   6:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * The license and distribution terms for this file may be
   7:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * found in the file LICENSE in this distribution or at
   8:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * http://www.rt-thread.org/license/LICENSE
   9:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  10:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Change Logs:
  11:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * Date           Author       Notes
  12:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-03-16     Bernard      the first version
  13:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  14:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  15:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  16:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  17:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  18:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifndef __RT_SERVICE_H__
  19:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define __RT_SERVICE_H__
  20:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  21:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #ifdef __cplusplus
  22:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** extern "C" {
  23:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #endif
  24:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  25:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  26:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @addtogroup KernelService
  27:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  28:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  29:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /*@{*/
  30:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  31:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  32:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list object
  33:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  34:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  35:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  36:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  37:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief initialize a list
  38:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  39:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to be initialized
  40:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  41:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  42:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  25              		.loc 1 42 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  43:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = l->prev = l;
  41              		.loc 1 43 0
  42 0008 7B68     		ldr	r3, [r7, #4]
  43 000a 7A68     		ldr	r2, [r7, #4]
  44 000c 5A60     		str	r2, [r3, #4]
  45 000e 7B68     		ldr	r3, [r7, #4]
  46 0010 5A68     		ldr	r2, [r3, #4]
  47 0012 7B68     		ldr	r3, [r7, #4]
  48 0014 1A60     		str	r2, [r3, #0]
  44:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  49              		.loc 1 44 0
  50 0016 07F10C07 		add	r7, r7, #12
  51 001a BD46     		mov	sp, r7
  52 001c 80BC     		pop	{r7}
  53 001e 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.align	2
  58              		.thumb
  59              		.thumb_func
  61              	rt_list_insert_after:
  62              	.LFB1:
  45:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  46:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  47:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node after a list
  48:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  49:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  50:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  51:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  52:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  53:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  63              		.loc 1 53 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68 0020 80B4     		push	{r7}
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 7, -4
  72 0022 83B0     		sub	sp, sp, #12
  73              	.LCFI4:
  74              		.cfi_def_cfa_offset 16
  75 0024 00AF     		add	r7, sp, #0
  76              	.LCFI5:
  77              		.cfi_def_cfa_register 7
  78 0026 7860     		str	r0, [r7, #4]
  79 0028 3960     		str	r1, [r7, #0]
  54:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next->prev = n;
  80              		.loc 1 54 0
  81 002a 7B68     		ldr	r3, [r7, #4]
  82 002c 1B68     		ldr	r3, [r3, #0]
  83 002e 3A68     		ldr	r2, [r7, #0]
  84 0030 5A60     		str	r2, [r3, #4]
  55:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l->next;
  85              		.loc 1 55 0
  86 0032 7B68     		ldr	r3, [r7, #4]
  87 0034 1A68     		ldr	r2, [r3, #0]
  88 0036 3B68     		ldr	r3, [r7, #0]
  89 0038 1A60     		str	r2, [r3, #0]
  56:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  57:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->next = n;
  90              		.loc 1 57 0
  91 003a 7B68     		ldr	r3, [r7, #4]
  92 003c 3A68     		ldr	r2, [r7, #0]
  93 003e 1A60     		str	r2, [r3, #0]
  58:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l;
  94              		.loc 1 58 0
  95 0040 3B68     		ldr	r3, [r7, #0]
  96 0042 7A68     		ldr	r2, [r7, #4]
  97 0044 5A60     		str	r2, [r3, #4]
  59:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  98              		.loc 1 59 0
  99 0046 07F10C07 		add	r7, r7, #12
 100 004a BD46     		mov	sp, r7
 101 004c 80BC     		pop	{r7}
 102 004e 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE1:
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 110              	rt_list_isempty:
 111              	.LFB4:
  60:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  61:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  62:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief insert a node before a list
  63:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  *
  64:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n new node to be inserted
  65:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l list to insert it
  66:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  67:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  68:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  69:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev->next = n;
  70:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev = l->prev;
  71:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  72:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     l->prev = n;
  73:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = l;
  74:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  75:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  76:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  77:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief remove node from list.
  78:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param n the node to remove from the list.
  79:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  80:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  81:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
  82:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next->prev = n->prev;
  83:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->prev->next = n->next;
  84:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  85:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     n->next = n->prev = n;
  86:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
  87:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** 
  88:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** /**
  89:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @brief tests whether a list is empty
  90:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  * @param l the list to test.
  91:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****  */
  92:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  93:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** {
 112              		.loc 1 93 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0050 80B4     		push	{r7}
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0052 83B0     		sub	sp, sp, #12
 122              	.LCFI7:
 123              		.cfi_def_cfa_offset 16
 124 0054 00AF     		add	r7, sp, #0
 125              	.LCFI8:
 126              		.cfi_def_cfa_register 7
 127 0056 7860     		str	r0, [r7, #4]
  94:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h ****     return l->next == l;
 128              		.loc 1 94 0
 129 0058 7B68     		ldr	r3, [r7, #4]
 130 005a 1A68     		ldr	r2, [r3, #0]
 131 005c 7B68     		ldr	r3, [r7, #4]
 132 005e 9A42     		cmp	r2, r3
 133 0060 14BF     		ite	ne
 134 0062 0023     		movne	r3, #0
 135 0064 0123     		moveq	r3, #1
 136 0066 DBB2     		uxtb	r3, r3
  95:D:\workspace_gnu\RTT_Demo0\src\os\rt-thread\include\rtservice.h **** }
 137              		.loc 1 95 0
 138 0068 1846     		mov	r0, r3
 139 006a 07F10C07 		add	r7, r7, #12
 140 006e BD46     		mov	sp, r7
 141 0070 80BC     		pop	{r7}
 142 0072 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE4:
 146              		.bss
 147              		.align	2
 148              	rt_mp_alloc_hook:
 149 0000 00000000 		.space	4
 150              		.align	2
 151              	rt_mp_free_hook:
 152 0004 00000000 		.space	4
 153              		.text
 154              		.align	2
 155              		.global	rt_mp_alloc_sethook
 156              		.thumb
 157              		.thumb_func
 159              	rt_mp_alloc_sethook:
 160              	.LFB5:
 161              		.file 2 "../src/os/rt-thread/src/mempool.c"
   1:../src/os/rt-thread/src/mempool.c **** /*
   2:../src/os/rt-thread/src/mempool.c ****  * File      : mempool.c
   3:../src/os/rt-thread/src/mempool.c ****  * This file is part of RT-Thread RTOS
   4:../src/os/rt-thread/src/mempool.c ****  * COPYRIGHT (C) 2006 - 2012, RT-Thread Development Team
   5:../src/os/rt-thread/src/mempool.c ****  *
   6:../src/os/rt-thread/src/mempool.c ****  * The license and distribution terms for this file may be
   7:../src/os/rt-thread/src/mempool.c ****  * found in the file LICENSE in this distribution or at
   8:../src/os/rt-thread/src/mempool.c ****  * http://www.rt-thread.org/license/LICENSE
   9:../src/os/rt-thread/src/mempool.c ****  *
  10:../src/os/rt-thread/src/mempool.c ****  * Change Logs:
  11:../src/os/rt-thread/src/mempool.c ****  * Date           Author       Notes
  12:../src/os/rt-thread/src/mempool.c ****  * 2006-05-27     Bernard      implement memory pool
  13:../src/os/rt-thread/src/mempool.c ****  * 2006-06-03     Bernard      fix the thread timer init bug
  14:../src/os/rt-thread/src/mempool.c ****  * 2006-06-30     Bernard      fix the allocate/free block bug
  15:../src/os/rt-thread/src/mempool.c ****  * 2006-08-04     Bernard      add hook support
  16:../src/os/rt-thread/src/mempool.c ****  * 2006-08-10     Bernard      fix interrupt bug in rt_mp_alloc
  17:../src/os/rt-thread/src/mempool.c ****  * 2010-07-13     Bernard      fix RT_ALIGN issue found by kuronca
  18:../src/os/rt-thread/src/mempool.c ****  * 2010-10-26     yi.qiu       add module support in rt_mp_delete
  19:../src/os/rt-thread/src/mempool.c ****  * 2011-01-24     Bernard      add object allocation check.
  20:../src/os/rt-thread/src/mempool.c ****  * 2012-03-22     Bernard      fix align issue in rt_mp_init and rt_mp_create.
  21:../src/os/rt-thread/src/mempool.c ****  */
  22:../src/os/rt-thread/src/mempool.c **** 
  23:../src/os/rt-thread/src/mempool.c **** #include <rthw.h>
  24:../src/os/rt-thread/src/mempool.c **** #include <rtthread.h>
  25:../src/os/rt-thread/src/mempool.c **** 
  26:../src/os/rt-thread/src/mempool.c **** #ifdef RT_USING_MEMPOOL
  27:../src/os/rt-thread/src/mempool.c **** 
  28:../src/os/rt-thread/src/mempool.c **** #ifdef RT_USING_HOOK
  29:../src/os/rt-thread/src/mempool.c **** static void (*rt_mp_alloc_hook)(struct rt_mempool *mp, void *block);
  30:../src/os/rt-thread/src/mempool.c **** static void (*rt_mp_free_hook)(struct rt_mempool *mp, void *block);
  31:../src/os/rt-thread/src/mempool.c **** 
  32:../src/os/rt-thread/src/mempool.c **** /**
  33:../src/os/rt-thread/src/mempool.c ****  * @addtogroup Hook
  34:../src/os/rt-thread/src/mempool.c ****  */
  35:../src/os/rt-thread/src/mempool.c **** 
  36:../src/os/rt-thread/src/mempool.c **** /*@{*/
  37:../src/os/rt-thread/src/mempool.c **** 
  38:../src/os/rt-thread/src/mempool.c **** /**
  39:../src/os/rt-thread/src/mempool.c ****  * This function will set a hook function, which will be invoked when a memory
  40:../src/os/rt-thread/src/mempool.c ****  * block is allocated from memory pool.
  41:../src/os/rt-thread/src/mempool.c ****  *
  42:../src/os/rt-thread/src/mempool.c ****  * @param hook the hook function
  43:../src/os/rt-thread/src/mempool.c ****  */
  44:../src/os/rt-thread/src/mempool.c **** void rt_mp_alloc_sethook(void (*hook)(struct rt_mempool *mp, void *block))
  45:../src/os/rt-thread/src/mempool.c **** {
 162              		.loc 2 45 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 0074 80B4     		push	{r7}
 168              	.LCFI9:
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0076 83B0     		sub	sp, sp, #12
 172              	.LCFI10:
 173              		.cfi_def_cfa_offset 16
 174 0078 00AF     		add	r7, sp, #0
 175              	.LCFI11:
 176              		.cfi_def_cfa_register 7
 177 007a 7860     		str	r0, [r7, #4]
  46:../src/os/rt-thread/src/mempool.c **** 	rt_mp_alloc_hook = hook;
 178              		.loc 2 46 0
 179 007c 034B     		ldr	r3, .L6
 180 007e 7A68     		ldr	r2, [r7, #4]
 181 0080 1A60     		str	r2, [r3, #0]
  47:../src/os/rt-thread/src/mempool.c **** }
 182              		.loc 2 47 0
 183 0082 07F10C07 		add	r7, r7, #12
 184 0086 BD46     		mov	sp, r7
 185 0088 80BC     		pop	{r7}
 186 008a 7047     		bx	lr
 187              	.L7:
 188              		.align	2
 189              	.L6:
 190 008c 00000000 		.word	rt_mp_alloc_hook
 191              		.cfi_endproc
 192              	.LFE5:
 194              		.align	2
 195              		.global	rt_mp_free_sethook
 196              		.thumb
 197              		.thumb_func
 199              	rt_mp_free_sethook:
 200              	.LFB6:
  48:../src/os/rt-thread/src/mempool.c **** 
  49:../src/os/rt-thread/src/mempool.c **** /**
  50:../src/os/rt-thread/src/mempool.c ****  * This function will set a hook function, which will be invoked when a memory
  51:../src/os/rt-thread/src/mempool.c ****  * block is released to memory pool.
  52:../src/os/rt-thread/src/mempool.c ****  *
  53:../src/os/rt-thread/src/mempool.c ****  * @param hook the hook function
  54:../src/os/rt-thread/src/mempool.c ****  */
  55:../src/os/rt-thread/src/mempool.c **** void rt_mp_free_sethook(void (*hook)(struct rt_mempool *mp, void *block))
  56:../src/os/rt-thread/src/mempool.c **** {
 201              		.loc 2 56 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0090 80B4     		push	{r7}
 207              	.LCFI12:
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0092 83B0     		sub	sp, sp, #12
 211              	.LCFI13:
 212              		.cfi_def_cfa_offset 16
 213 0094 00AF     		add	r7, sp, #0
 214              	.LCFI14:
 215              		.cfi_def_cfa_register 7
 216 0096 7860     		str	r0, [r7, #4]
  57:../src/os/rt-thread/src/mempool.c **** 	rt_mp_free_hook = hook;
 217              		.loc 2 57 0
 218 0098 034B     		ldr	r3, .L9
 219 009a 7A68     		ldr	r2, [r7, #4]
 220 009c 1A60     		str	r2, [r3, #0]
  58:../src/os/rt-thread/src/mempool.c **** }
 221              		.loc 2 58 0
 222 009e 07F10C07 		add	r7, r7, #12
 223 00a2 BD46     		mov	sp, r7
 224 00a4 80BC     		pop	{r7}
 225 00a6 7047     		bx	lr
 226              	.L10:
 227              		.align	2
 228              	.L9:
 229 00a8 04000000 		.word	rt_mp_free_hook
 230              		.cfi_endproc
 231              	.LFE6:
 233              		.section	.rodata
 234              		.align	2
 235              	.LC0:
 236 0000 28257329 		.ascii	"(%s) assert failed at %s:%d \012\000"
 236      20617373 
 236      65727420 
 236      6661696C 
 236      65642061 
 237 001e 0000     		.align	2
 238              	.LC1:
 239 0020 6D702021 		.ascii	"mp != RT_NULL\000"
 239      3D205254 
 239      5F4E554C 
 239      4C00
 240              		.text
 241              		.align	2
 242              		.global	rt_mp_init
 243              		.thumb
 244              		.thumb_func
 246              	rt_mp_init:
 247              	.LFB7:
  59:../src/os/rt-thread/src/mempool.c **** 
  60:../src/os/rt-thread/src/mempool.c **** /*@}*/
  61:../src/os/rt-thread/src/mempool.c **** #endif
  62:../src/os/rt-thread/src/mempool.c **** 
  63:../src/os/rt-thread/src/mempool.c **** /**
  64:../src/os/rt-thread/src/mempool.c ****  * @addtogroup MM
  65:../src/os/rt-thread/src/mempool.c ****  */
  66:../src/os/rt-thread/src/mempool.c **** 
  67:../src/os/rt-thread/src/mempool.c **** /*@{*/
  68:../src/os/rt-thread/src/mempool.c **** 
  69:../src/os/rt-thread/src/mempool.c **** /**
  70:../src/os/rt-thread/src/mempool.c ****  * This function will initialize a memory pool object, normally which is used for
  71:../src/os/rt-thread/src/mempool.c ****  * static object.
  72:../src/os/rt-thread/src/mempool.c ****  *
  73:../src/os/rt-thread/src/mempool.c ****  * @param mp the memory pool object
  74:../src/os/rt-thread/src/mempool.c ****  * @param name the name of memory pool
  75:../src/os/rt-thread/src/mempool.c ****  * @param start the star address of memory pool
  76:../src/os/rt-thread/src/mempool.c ****  * @param size the total size of memory pool
  77:../src/os/rt-thread/src/mempool.c ****  * @param block_size the size for each block
  78:../src/os/rt-thread/src/mempool.c ****  *
  79:../src/os/rt-thread/src/mempool.c ****  * @return RT_EOK
  80:../src/os/rt-thread/src/mempool.c ****  */
  81:../src/os/rt-thread/src/mempool.c **** rt_err_t rt_mp_init(struct rt_mempool *mp, const char *name, void *start, rt_size_t size, rt_size_t
  82:../src/os/rt-thread/src/mempool.c **** {
 248              		.loc 2 82 0
 249              		.cfi_startproc
 250              		@ args = 4, pretend = 0, frame = 24
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 00ac 90B5     		push	{r4, r7, lr}
 253              	.LCFI15:
 254              		.cfi_def_cfa_offset 12
 255              		.cfi_offset 4, -12
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 00ae 87B0     		sub	sp, sp, #28
 259              	.LCFI16:
 260              		.cfi_def_cfa_offset 40
 261 00b0 00AF     		add	r7, sp, #0
 262              	.LCFI17:
 263              		.cfi_def_cfa_register 7
 264 00b2 F860     		str	r0, [r7, #12]
 265 00b4 B960     		str	r1, [r7, #8]
 266 00b6 7A60     		str	r2, [r7, #4]
 267 00b8 3B60     		str	r3, [r7, #0]
  83:../src/os/rt-thread/src/mempool.c **** 	rt_uint8_t *block_ptr;
  84:../src/os/rt-thread/src/mempool.c **** 	register rt_base_t offset;
  85:../src/os/rt-thread/src/mempool.c **** 
  86:../src/os/rt-thread/src/mempool.c **** 	/* parameter check */
  87:../src/os/rt-thread/src/mempool.c **** 	RT_ASSERT(mp != RT_NULL);
 268              		.loc 2 87 0
 269 00ba FB68     		ldr	r3, [r7, #12]
 270 00bc 002B     		cmp	r3, #0
 271 00be 0DD1     		bne	.L12
 272              	.LBB2:
 273              		.loc 2 87 0 is_stmt 0 discriminator 1
 274 00c0 4FF00003 		mov	r3, #0
 275 00c4 FB74     		strb	r3, [r7, #19]
 276 00c6 3848     		ldr	r0, .L17
 277 00c8 3849     		ldr	r1, .L17+4
 278 00ca 394A     		ldr	r2, .L17+8
 279 00cc 4FF05703 		mov	r3, #87
 280 00d0 FFF7FEFF 		bl	rt_kprintf
 281              	.L13:
 282              		.loc 2 87 0 discriminator 2
 283 00d4 FB7C     		ldrb	r3, [r7, #19]
 284 00d6 DBB2     		uxtb	r3, r3
 285 00d8 002B     		cmp	r3, #0
 286 00da FBD0     		beq	.L13
 287              	.L12:
 288              	.LBE2:
  88:../src/os/rt-thread/src/mempool.c **** 
  89:../src/os/rt-thread/src/mempool.c **** 	/* initialize object */
  90:../src/os/rt-thread/src/mempool.c **** 	rt_object_init(&(mp->parent), RT_Object_Class_MemPool, name);
 289              		.loc 2 90 0 is_stmt 1
 290 00dc FB68     		ldr	r3, [r7, #12]
 291 00de 1846     		mov	r0, r3
 292 00e0 4FF00701 		mov	r1, #7
 293 00e4 BA68     		ldr	r2, [r7, #8]
 294 00e6 FFF7FEFF 		bl	rt_object_init
  91:../src/os/rt-thread/src/mempool.c **** 
  92:../src/os/rt-thread/src/mempool.c **** 	/* initialize memory pool */
  93:../src/os/rt-thread/src/mempool.c **** 	mp->start_address = start;
 295              		.loc 2 93 0
 296 00ea FB68     		ldr	r3, [r7, #12]
 297 00ec 7A68     		ldr	r2, [r7, #4]
 298 00ee 1A61     		str	r2, [r3, #16]
  94:../src/os/rt-thread/src/mempool.c **** 	mp->size = RT_ALIGN_DOWN(size, RT_ALIGN_SIZE);
 299              		.loc 2 94 0
 300 00f0 3B68     		ldr	r3, [r7, #0]
 301 00f2 23F00302 		bic	r2, r3, #3
 302 00f6 FB68     		ldr	r3, [r7, #12]
 303 00f8 5A61     		str	r2, [r3, #20]
  95:../src/os/rt-thread/src/mempool.c **** 
  96:../src/os/rt-thread/src/mempool.c **** 	/* align the block size */
  97:../src/os/rt-thread/src/mempool.c **** 	block_size = RT_ALIGN(block_size, RT_ALIGN_SIZE);
 304              		.loc 2 97 0
 305 00fa BB6A     		ldr	r3, [r7, #40]
 306 00fc 03F10303 		add	r3, r3, #3
 307 0100 23F00303 		bic	r3, r3, #3
 308 0104 BB62     		str	r3, [r7, #40]
  98:../src/os/rt-thread/src/mempool.c **** 	mp->block_size = block_size;
 309              		.loc 2 98 0
 310 0106 FB68     		ldr	r3, [r7, #12]
 311 0108 BA6A     		ldr	r2, [r7, #40]
 312 010a 9A61     		str	r2, [r3, #24]
  99:../src/os/rt-thread/src/mempool.c **** 
 100:../src/os/rt-thread/src/mempool.c **** 	/* align to align size byte */
 101:../src/os/rt-thread/src/mempool.c **** 	mp->block_total_count = mp->size / (mp->block_size + sizeof(rt_uint8_t *));
 313              		.loc 2 101 0
 314 010c FB68     		ldr	r3, [r7, #12]
 315 010e 5A69     		ldr	r2, [r3, #20]
 316 0110 FB68     		ldr	r3, [r7, #12]
 317 0112 9B69     		ldr	r3, [r3, #24]
 318 0114 03F10403 		add	r3, r3, #4
 319 0118 B2FBF3F2 		udiv	r2, r2, r3
 320 011c FB68     		ldr	r3, [r7, #12]
 321 011e 1A62     		str	r2, [r3, #32]
 102:../src/os/rt-thread/src/mempool.c **** 	mp->block_free_count = mp->block_total_count;
 322              		.loc 2 102 0
 323 0120 FB68     		ldr	r3, [r7, #12]
 324 0122 1A6A     		ldr	r2, [r3, #32]
 325 0124 FB68     		ldr	r3, [r7, #12]
 326 0126 5A62     		str	r2, [r3, #36]
 103:../src/os/rt-thread/src/mempool.c **** 
 104:../src/os/rt-thread/src/mempool.c **** 	/* initialize suspended thread list */
 105:../src/os/rt-thread/src/mempool.c **** 	rt_list_init(&(mp->suspend_thread));
 327              		.loc 2 105 0
 328 0128 FB68     		ldr	r3, [r7, #12]
 329 012a 03F12803 		add	r3, r3, #40
 330 012e 1846     		mov	r0, r3
 331 0130 FFF766FF 		bl	rt_list_init
 106:../src/os/rt-thread/src/mempool.c **** 	mp->suspend_thread_count = 0;
 332              		.loc 2 106 0
 333 0134 FB68     		ldr	r3, [r7, #12]
 334 0136 4FF00002 		mov	r2, #0
 335 013a 1A63     		str	r2, [r3, #48]
 107:../src/os/rt-thread/src/mempool.c **** 
 108:../src/os/rt-thread/src/mempool.c **** 	/* initialize free block list */
 109:../src/os/rt-thread/src/mempool.c **** 	block_ptr = (rt_uint8_t *)mp->start_address;
 336              		.loc 2 109 0
 337 013c FB68     		ldr	r3, [r7, #12]
 338 013e 1B69     		ldr	r3, [r3, #16]
 339 0140 7B61     		str	r3, [r7, #20]
 110:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 340              		.loc 2 110 0
 341 0142 4FF00004 		mov	r4, #0
 342 0146 13E0     		b	.L14
 343              	.L15:
 111:../src/os/rt-thread/src/mempool.c **** 	{
 112:../src/os/rt-thread/src/mempool.c **** 		*(rt_uint8_t **)(block_ptr + offset * (block_size + sizeof(rt_uint8_t *)))
 344              		.loc 2 112 0 discriminator 2
 345 0148 BB6A     		ldr	r3, [r7, #40]
 346 014a 03F10403 		add	r3, r3, #4
 347 014e 2246     		mov	r2, r4
 348 0150 02FB03F3 		mul	r3, r2, r3
 349 0154 7A69     		ldr	r2, [r7, #20]
 350 0156 D318     		adds	r3, r2, r3
 113:../src/os/rt-thread/src/mempool.c **** 			= (rt_uint8_t *)(block_ptr + (offset + 1) * (block_size + sizeof(rt_uint8_t *)));
 351              		.loc 2 113 0 discriminator 2
 352 0158 04F10102 		add	r2, r4, #1
 353 015c B96A     		ldr	r1, [r7, #40]
 354 015e 01F10401 		add	r1, r1, #4
 355 0162 01FB02F2 		mul	r2, r1, r2
 356 0166 7969     		ldr	r1, [r7, #20]
 357 0168 8A18     		adds	r2, r1, r2
 358 016a 1A60     		str	r2, [r3, #0]
 110:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 359              		.loc 2 110 0 discriminator 2
 360 016c 04F10104 		add	r4, r4, #1
 361              	.L14:
 110:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 362              		.loc 2 110 0 is_stmt 0 discriminator 1
 363 0170 2246     		mov	r2, r4
 364 0172 FB68     		ldr	r3, [r7, #12]
 365 0174 1B6A     		ldr	r3, [r3, #32]
 366 0176 9A42     		cmp	r2, r3
 367 0178 E6D3     		bcc	.L15
 114:../src/os/rt-thread/src/mempool.c **** 	}
 115:../src/os/rt-thread/src/mempool.c **** 
 116:../src/os/rt-thread/src/mempool.c **** 	*(rt_uint8_t **)(block_ptr + (offset - 1) * (block_size + sizeof(rt_uint8_t *))) = RT_NULL;
 368              		.loc 2 116 0 is_stmt 1
 369 017a 04F1FF33 		add	r3, r4, #-1
 370 017e BA6A     		ldr	r2, [r7, #40]
 371 0180 02F10402 		add	r2, r2, #4
 372 0184 02FB03F3 		mul	r3, r2, r3
 373 0188 7A69     		ldr	r2, [r7, #20]
 374 018a D318     		adds	r3, r2, r3
 375 018c 4FF00002 		mov	r2, #0
 376 0190 1A60     		str	r2, [r3, #0]
 117:../src/os/rt-thread/src/mempool.c **** 
 118:../src/os/rt-thread/src/mempool.c **** 	mp->block_list = block_ptr;
 377              		.loc 2 118 0
 378 0192 FB68     		ldr	r3, [r7, #12]
 379 0194 7A69     		ldr	r2, [r7, #20]
 380 0196 DA61     		str	r2, [r3, #28]
 119:../src/os/rt-thread/src/mempool.c **** 
 120:../src/os/rt-thread/src/mempool.c **** 	return RT_EOK;
 381              		.loc 2 120 0
 382 0198 4FF00003 		mov	r3, #0
 121:../src/os/rt-thread/src/mempool.c **** }
 383              		.loc 2 121 0
 384 019c 1846     		mov	r0, r3
 385 019e 07F11C07 		add	r7, r7, #28
 386 01a2 BD46     		mov	sp, r7
 387 01a4 90BD     		pop	{r4, r7, pc}
 388              	.L18:
 389 01a6 00BF     		.align	2
 390              	.L17:
 391 01a8 00000000 		.word	.LC0
 392 01ac 20000000 		.word	.LC1
 393 01b0 94000000 		.word	__FUNCTION__.4863
 394              		.cfi_endproc
 395              	.LFE7:
 397              		.align	2
 398              		.global	rt_mp_detach
 399              		.thumb
 400              		.thumb_func
 402              	rt_mp_detach:
 403              	.LFB8:
 122:../src/os/rt-thread/src/mempool.c **** RTM_EXPORT(rt_mp_init);
 123:../src/os/rt-thread/src/mempool.c **** 
 124:../src/os/rt-thread/src/mempool.c **** /**
 125:../src/os/rt-thread/src/mempool.c ****  * This function will detach a memory pool from system object management.
 126:../src/os/rt-thread/src/mempool.c ****  *
 127:../src/os/rt-thread/src/mempool.c ****  * @param mp the memory pool object
 128:../src/os/rt-thread/src/mempool.c ****  *
 129:../src/os/rt-thread/src/mempool.c ****  * @return RT_EOK
 130:../src/os/rt-thread/src/mempool.c ****  */
 131:../src/os/rt-thread/src/mempool.c **** rt_err_t rt_mp_detach(struct rt_mempool *mp)
 132:../src/os/rt-thread/src/mempool.c **** {
 404              		.loc 2 132 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 16
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408 01b4 90B5     		push	{r4, r7, lr}
 409              	.LCFI18:
 410              		.cfi_def_cfa_offset 12
 411              		.cfi_offset 4, -12
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 01b6 85B0     		sub	sp, sp, #20
 415              	.LCFI19:
 416              		.cfi_def_cfa_offset 32
 417 01b8 00AF     		add	r7, sp, #0
 418              	.LCFI20:
 419              		.cfi_def_cfa_register 7
 420 01ba 7860     		str	r0, [r7, #4]
 133:../src/os/rt-thread/src/mempool.c **** 	struct rt_thread *thread;
 134:../src/os/rt-thread/src/mempool.c **** 	register rt_ubase_t temp;
 135:../src/os/rt-thread/src/mempool.c **** 
 136:../src/os/rt-thread/src/mempool.c **** 	/* parameter check */
 137:../src/os/rt-thread/src/mempool.c **** 	RT_ASSERT(mp != RT_NULL);
 421              		.loc 2 137 0
 422 01bc 7B68     		ldr	r3, [r7, #4]
 423 01be 002B     		cmp	r3, #0
 424 01c0 29D1     		bne	.L25
 425              	.LBB3:
 426              		.loc 2 137 0 is_stmt 0 discriminator 1
 427 01c2 4FF00003 		mov	r3, #0
 428 01c6 FB72     		strb	r3, [r7, #11]
 429 01c8 1D48     		ldr	r0, .L26
 430 01ca 1E49     		ldr	r1, .L26+4
 431 01cc 1E4A     		ldr	r2, .L26+8
 432 01ce 4FF08903 		mov	r3, #137
 433 01d2 FFF7FEFF 		bl	rt_kprintf
 434              	.L21:
 435              		.loc 2 137 0 discriminator 2
 436 01d6 FB7A     		ldrb	r3, [r7, #11]
 437 01d8 DBB2     		uxtb	r3, r3
 438 01da 002B     		cmp	r3, #0
 439 01dc FBD0     		beq	.L21
 440              	.LBE3:
 138:../src/os/rt-thread/src/mempool.c **** 
 139:../src/os/rt-thread/src/mempool.c **** 	/* wake up all suspended threads */
 140:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 441              		.loc 2 140 0 is_stmt 1
 442 01de 1AE0     		b	.L25
 443              	.L23:
 141:../src/os/rt-thread/src/mempool.c **** 	{
 142:../src/os/rt-thread/src/mempool.c **** 		/* disable interrupt */
 143:../src/os/rt-thread/src/mempool.c **** 		temp = rt_hw_interrupt_disable();
 444              		.loc 2 143 0
 445 01e0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 446 01e4 0346     		mov	r3, r0
 447 01e6 1C46     		mov	r4, r3
 144:../src/os/rt-thread/src/mempool.c **** 
 145:../src/os/rt-thread/src/mempool.c **** 		/* get next suspend thread */
 146:../src/os/rt-thread/src/mempool.c **** 		thread = rt_list_entry(mp->suspend_thread.next, struct rt_thread, tlist);
 448              		.loc 2 146 0
 449 01e8 7B68     		ldr	r3, [r7, #4]
 450 01ea 9B6A     		ldr	r3, [r3, #40]
 451 01ec A3F11003 		sub	r3, r3, #16
 452 01f0 FB60     		str	r3, [r7, #12]
 147:../src/os/rt-thread/src/mempool.c **** 		/* set error code to RT_ERROR */
 148:../src/os/rt-thread/src/mempool.c **** 		thread->error = -RT_ERROR;
 453              		.loc 2 148 0
 454 01f2 FB68     		ldr	r3, [r7, #12]
 455 01f4 4FF0FF32 		mov	r2, #-1
 456 01f8 DA62     		str	r2, [r3, #44]
 149:../src/os/rt-thread/src/mempool.c **** 
 150:../src/os/rt-thread/src/mempool.c **** 		/*
 151:../src/os/rt-thread/src/mempool.c **** 		 * resume thread
 152:../src/os/rt-thread/src/mempool.c **** 		 * In rt_thread_resume function, it will remove current thread from suspend
 153:../src/os/rt-thread/src/mempool.c **** 		 * list
 154:../src/os/rt-thread/src/mempool.c **** 		 */
 155:../src/os/rt-thread/src/mempool.c **** 		rt_thread_resume(thread);
 457              		.loc 2 155 0
 458 01fa F868     		ldr	r0, [r7, #12]
 459 01fc FFF7FEFF 		bl	rt_thread_resume
 156:../src/os/rt-thread/src/mempool.c **** 
 157:../src/os/rt-thread/src/mempool.c **** 		/* decrease suspended thread count */
 158:../src/os/rt-thread/src/mempool.c **** 		mp->suspend_thread_count --;
 460              		.loc 2 158 0
 461 0200 7B68     		ldr	r3, [r7, #4]
 462 0202 1B6B     		ldr	r3, [r3, #48]
 463 0204 03F1FF32 		add	r2, r3, #-1
 464 0208 7B68     		ldr	r3, [r7, #4]
 465 020a 1A63     		str	r2, [r3, #48]
 159:../src/os/rt-thread/src/mempool.c **** 
 160:../src/os/rt-thread/src/mempool.c **** 		/* enable interrupt */
 161:../src/os/rt-thread/src/mempool.c **** 		rt_hw_interrupt_enable(temp);
 466              		.loc 2 161 0
 467 020c 2346     		mov	r3, r4
 468 020e 1846     		mov	r0, r3
 469 0210 FFF7FEFF 		bl	rt_hw_interrupt_enable
 470 0214 00E0     		b	.L22
 471              	.L25:
 140:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 472              		.loc 2 140 0
 473 0216 00BF     		nop
 474              	.L22:
 140:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 475              		.loc 2 140 0 is_stmt 0 discriminator 1
 476 0218 7B68     		ldr	r3, [r7, #4]
 477 021a 03F12803 		add	r3, r3, #40
 478 021e 1846     		mov	r0, r3
 479 0220 FFF716FF 		bl	rt_list_isempty
 480 0224 0346     		mov	r3, r0
 481 0226 002B     		cmp	r3, #0
 482 0228 DAD0     		beq	.L23
 162:../src/os/rt-thread/src/mempool.c **** 	}
 163:../src/os/rt-thread/src/mempool.c **** 
 164:../src/os/rt-thread/src/mempool.c **** 	/* detach object */
 165:../src/os/rt-thread/src/mempool.c **** 	rt_object_detach(&(mp->parent));
 483              		.loc 2 165 0 is_stmt 1
 484 022a 7B68     		ldr	r3, [r7, #4]
 485 022c 1846     		mov	r0, r3
 486 022e FFF7FEFF 		bl	rt_object_detach
 166:../src/os/rt-thread/src/mempool.c **** 
 167:../src/os/rt-thread/src/mempool.c **** 	return RT_EOK;
 487              		.loc 2 167 0
 488 0232 4FF00003 		mov	r3, #0
 168:../src/os/rt-thread/src/mempool.c **** }
 489              		.loc 2 168 0
 490 0236 1846     		mov	r0, r3
 491 0238 07F11407 		add	r7, r7, #20
 492 023c BD46     		mov	sp, r7
 493 023e 90BD     		pop	{r4, r7, pc}
 494              	.L27:
 495              		.align	2
 496              	.L26:
 497 0240 00000000 		.word	.LC0
 498 0244 20000000 		.word	.LC1
 499 0248 84000000 		.word	__FUNCTION__.4876
 500              		.cfi_endproc
 501              	.LFE8:
 503              		.section	.rodata
 504 002e 0000     		.align	2
 505              	.LC2:
 506 0030 46756E63 		.ascii	"Function[%s] shall not used in ISR\012\000"
 506      74696F6E 
 506      5B25735D 
 506      20736861 
 506      6C6C206E 
 507              		.align	2
 508              	.LC3:
 509 0054 3000     		.ascii	"0\000"
 510              		.text
 511              		.align	2
 512              		.global	rt_mp_create
 513              		.thumb
 514              		.thumb_func
 516              	rt_mp_create:
 517              	.LFB9:
 169:../src/os/rt-thread/src/mempool.c **** RTM_EXPORT(rt_mp_detach);
 170:../src/os/rt-thread/src/mempool.c **** 
 171:../src/os/rt-thread/src/mempool.c **** #ifdef RT_USING_HEAP
 172:../src/os/rt-thread/src/mempool.c **** /**
 173:../src/os/rt-thread/src/mempool.c ****  * This function will create a mempool object and allocate the memory pool from heap.
 174:../src/os/rt-thread/src/mempool.c ****  *
 175:../src/os/rt-thread/src/mempool.c ****  * @param name the name of memory pool
 176:../src/os/rt-thread/src/mempool.c ****  * @param block_count the count of blocks in memory pool
 177:../src/os/rt-thread/src/mempool.c ****  * @param block_size the size for each block
 178:../src/os/rt-thread/src/mempool.c ****  *
 179:../src/os/rt-thread/src/mempool.c ****  * @return the created mempool object
 180:../src/os/rt-thread/src/mempool.c ****  */
 181:../src/os/rt-thread/src/mempool.c **** rt_mp_t rt_mp_create(const char *name, rt_size_t block_count, rt_size_t block_size)
 182:../src/os/rt-thread/src/mempool.c **** {
 518              		.loc 2 182 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 32
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 024c 90B5     		push	{r4, r7, lr}
 523              	.LCFI21:
 524              		.cfi_def_cfa_offset 12
 525              		.cfi_offset 4, -12
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 024e 89B0     		sub	sp, sp, #36
 529              	.LCFI22:
 530              		.cfi_def_cfa_offset 48
 531 0250 00AF     		add	r7, sp, #0
 532              	.LCFI23:
 533              		.cfi_def_cfa_register 7
 534 0252 F860     		str	r0, [r7, #12]
 535 0254 B960     		str	r1, [r7, #8]
 536 0256 7A60     		str	r2, [r7, #4]
 537              	.LBB4:
 183:../src/os/rt-thread/src/mempool.c **** 	rt_uint8_t *block_ptr;
 184:../src/os/rt-thread/src/mempool.c **** 	struct rt_mempool *mp;
 185:../src/os/rt-thread/src/mempool.c **** 	register rt_base_t offset;
 186:../src/os/rt-thread/src/mempool.c **** 
 187:../src/os/rt-thread/src/mempool.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 538              		.loc 2 187 0
 539 0258 FFF7FEFF 		bl	rt_hw_interrupt_disable
 540 025c F861     		str	r0, [r7, #28]
 541 025e FFF7FEFF 		bl	rt_interrupt_get_nest
 542 0262 0346     		mov	r3, r0
 543 0264 002B     		cmp	r3, #0
 544 0266 11D0     		beq	.L29
 545              		.loc 2 187 0 is_stmt 0 discriminator 1
 546 0268 4648     		ldr	r0, .L36
 547 026a 4749     		ldr	r1, .L36+4
 548 026c FFF7FEFF 		bl	rt_kprintf
 549              	.LBB5:
 550 0270 4FF00003 		mov	r3, #0
 551 0274 FB74     		strb	r3, [r7, #19]
 552 0276 4548     		ldr	r0, .L36+8
 553 0278 4549     		ldr	r1, .L36+12
 554 027a 434A     		ldr	r2, .L36+4
 555 027c 4FF0BB03 		mov	r3, #187
 556 0280 FFF7FEFF 		bl	rt_kprintf
 557              	.L30:
 558              		.loc 2 187 0 discriminator 4
 559 0284 FB7C     		ldrb	r3, [r7, #19]
 560 0286 DBB2     		uxtb	r3, r3
 561 0288 002B     		cmp	r3, #0
 562 028a FBD0     		beq	.L30
 563              	.L29:
 564              	.LBE5:
 565              		.loc 2 187 0 discriminator 2
 566 028c F869     		ldr	r0, [r7, #28]
 567 028e FFF7FEFF 		bl	rt_hw_interrupt_enable
 568              	.LBE4:
 188:../src/os/rt-thread/src/mempool.c **** 
 189:../src/os/rt-thread/src/mempool.c **** 	/* allocate object */
 190:../src/os/rt-thread/src/mempool.c **** 	mp = (struct rt_mempool *)rt_object_allocate(RT_Object_Class_MemPool, name);
 569              		.loc 2 190 0 is_stmt 1 discriminator 2
 570 0292 4FF00700 		mov	r0, #7
 571 0296 F968     		ldr	r1, [r7, #12]
 572 0298 FFF7FEFF 		bl	rt_object_allocate
 573 029c B861     		str	r0, [r7, #24]
 191:../src/os/rt-thread/src/mempool.c **** 	if (mp == RT_NULL)
 574              		.loc 2 191 0 discriminator 2
 575 029e BB69     		ldr	r3, [r7, #24]
 576 02a0 002B     		cmp	r3, #0
 577 02a2 02D1     		bne	.L31
 192:../src/os/rt-thread/src/mempool.c **** 		return RT_NULL; /* allocate object failed */
 578              		.loc 2 192 0
 579 02a4 4FF00003 		mov	r3, #0
 580 02a8 67E0     		b	.L32
 581              	.L31:
 193:../src/os/rt-thread/src/mempool.c **** 
 194:../src/os/rt-thread/src/mempool.c **** 	/* initialize memory pool */
 195:../src/os/rt-thread/src/mempool.c **** 	block_size = RT_ALIGN(block_size, RT_ALIGN_SIZE);
 582              		.loc 2 195 0
 583 02aa 7B68     		ldr	r3, [r7, #4]
 584 02ac 03F10303 		add	r3, r3, #3
 585 02b0 23F00303 		bic	r3, r3, #3
 586 02b4 7B60     		str	r3, [r7, #4]
 196:../src/os/rt-thread/src/mempool.c **** 	mp->block_size = block_size;
 587              		.loc 2 196 0
 588 02b6 BB69     		ldr	r3, [r7, #24]
 589 02b8 7A68     		ldr	r2, [r7, #4]
 590 02ba 9A61     		str	r2, [r3, #24]
 197:../src/os/rt-thread/src/mempool.c **** 	mp->size = (block_size + sizeof(rt_uint8_t *)) * block_count;
 591              		.loc 2 197 0
 592 02bc 7B68     		ldr	r3, [r7, #4]
 593 02be 03F10403 		add	r3, r3, #4
 594 02c2 BA68     		ldr	r2, [r7, #8]
 595 02c4 02FB03F2 		mul	r2, r2, r3
 596 02c8 BB69     		ldr	r3, [r7, #24]
 597 02ca 5A61     		str	r2, [r3, #20]
 198:../src/os/rt-thread/src/mempool.c **** 
 199:../src/os/rt-thread/src/mempool.c **** 	/* allocate memory */
 200:../src/os/rt-thread/src/mempool.c **** 	mp->start_address = rt_malloc((block_size + sizeof(rt_uint8_t *)) * block_count);
 598              		.loc 2 200 0
 599 02cc 7B68     		ldr	r3, [r7, #4]
 600 02ce 03F10403 		add	r3, r3, #4
 601 02d2 BA68     		ldr	r2, [r7, #8]
 602 02d4 02FB03F3 		mul	r3, r2, r3
 603 02d8 1846     		mov	r0, r3
 604 02da FFF7FEFF 		bl	rt_malloc
 605 02de 0246     		mov	r2, r0
 606 02e0 BB69     		ldr	r3, [r7, #24]
 607 02e2 1A61     		str	r2, [r3, #16]
 201:../src/os/rt-thread/src/mempool.c **** 	if (mp->start_address == RT_NULL)
 608              		.loc 2 201 0
 609 02e4 BB69     		ldr	r3, [r7, #24]
 610 02e6 1B69     		ldr	r3, [r3, #16]
 611 02e8 002B     		cmp	r3, #0
 612 02ea 06D1     		bne	.L33
 202:../src/os/rt-thread/src/mempool.c **** 	{
 203:../src/os/rt-thread/src/mempool.c **** 		/* no memory, delete memory pool object */
 204:../src/os/rt-thread/src/mempool.c **** 		rt_object_delete(&(mp->parent));
 613              		.loc 2 204 0
 614 02ec BB69     		ldr	r3, [r7, #24]
 615 02ee 1846     		mov	r0, r3
 616 02f0 FFF7FEFF 		bl	rt_object_delete
 205:../src/os/rt-thread/src/mempool.c **** 
 206:../src/os/rt-thread/src/mempool.c **** 		return RT_NULL;
 617              		.loc 2 206 0
 618 02f4 4FF00003 		mov	r3, #0
 619 02f8 3FE0     		b	.L32
 620              	.L33:
 207:../src/os/rt-thread/src/mempool.c **** 	}
 208:../src/os/rt-thread/src/mempool.c **** 
 209:../src/os/rt-thread/src/mempool.c **** 	mp->block_total_count = block_count;
 621              		.loc 2 209 0
 622 02fa BB69     		ldr	r3, [r7, #24]
 623 02fc BA68     		ldr	r2, [r7, #8]
 624 02fe 1A62     		str	r2, [r3, #32]
 210:../src/os/rt-thread/src/mempool.c **** 	mp->block_free_count = mp->block_total_count;
 625              		.loc 2 210 0
 626 0300 BB69     		ldr	r3, [r7, #24]
 627 0302 1A6A     		ldr	r2, [r3, #32]
 628 0304 BB69     		ldr	r3, [r7, #24]
 629 0306 5A62     		str	r2, [r3, #36]
 211:../src/os/rt-thread/src/mempool.c **** 
 212:../src/os/rt-thread/src/mempool.c **** 	/* initialize suspended thread list */
 213:../src/os/rt-thread/src/mempool.c **** 	rt_list_init(&(mp->suspend_thread));
 630              		.loc 2 213 0
 631 0308 BB69     		ldr	r3, [r7, #24]
 632 030a 03F12803 		add	r3, r3, #40
 633 030e 1846     		mov	r0, r3
 634 0310 FFF776FE 		bl	rt_list_init
 214:../src/os/rt-thread/src/mempool.c **** 	mp->suspend_thread_count = 0;
 635              		.loc 2 214 0
 636 0314 BB69     		ldr	r3, [r7, #24]
 637 0316 4FF00002 		mov	r2, #0
 638 031a 1A63     		str	r2, [r3, #48]
 215:../src/os/rt-thread/src/mempool.c **** 
 216:../src/os/rt-thread/src/mempool.c **** 	/* initialize free block list */
 217:../src/os/rt-thread/src/mempool.c **** 	block_ptr = (rt_uint8_t *)mp->start_address;
 639              		.loc 2 217 0
 640 031c BB69     		ldr	r3, [r7, #24]
 641 031e 1B69     		ldr	r3, [r3, #16]
 642 0320 7B61     		str	r3, [r7, #20]
 218:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 643              		.loc 2 218 0
 644 0322 4FF00004 		mov	r4, #0
 645 0326 13E0     		b	.L34
 646              	.L35:
 219:../src/os/rt-thread/src/mempool.c **** 	{
 220:../src/os/rt-thread/src/mempool.c **** 		*(rt_uint8_t **)(block_ptr + offset * (block_size + sizeof(rt_uint8_t *)))
 647              		.loc 2 220 0 discriminator 2
 648 0328 7B68     		ldr	r3, [r7, #4]
 649 032a 03F10403 		add	r3, r3, #4
 650 032e 2246     		mov	r2, r4
 651 0330 02FB03F3 		mul	r3, r2, r3
 652 0334 7A69     		ldr	r2, [r7, #20]
 653 0336 D318     		adds	r3, r2, r3
 221:../src/os/rt-thread/src/mempool.c **** 			= block_ptr + (offset + 1) * (block_size + sizeof(rt_uint8_t *));
 654              		.loc 2 221 0 discriminator 2
 655 0338 04F10102 		add	r2, r4, #1
 656 033c 7968     		ldr	r1, [r7, #4]
 657 033e 01F10401 		add	r1, r1, #4
 658 0342 01FB02F2 		mul	r2, r1, r2
 659 0346 7969     		ldr	r1, [r7, #20]
 660 0348 8A18     		adds	r2, r1, r2
 661 034a 1A60     		str	r2, [r3, #0]
 218:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 662              		.loc 2 218 0 discriminator 2
 663 034c 04F10104 		add	r4, r4, #1
 664              	.L34:
 218:../src/os/rt-thread/src/mempool.c **** 	for (offset = 0; offset < mp->block_total_count; offset ++)
 665              		.loc 2 218 0 is_stmt 0 discriminator 1
 666 0350 2246     		mov	r2, r4
 667 0352 BB69     		ldr	r3, [r7, #24]
 668 0354 1B6A     		ldr	r3, [r3, #32]
 669 0356 9A42     		cmp	r2, r3
 670 0358 E6D3     		bcc	.L35
 222:../src/os/rt-thread/src/mempool.c **** 	}
 223:../src/os/rt-thread/src/mempool.c **** 
 224:../src/os/rt-thread/src/mempool.c **** 	*(rt_uint8_t **)(block_ptr + (offset - 1) * (block_size + sizeof(rt_uint8_t *))) = RT_NULL;
 671              		.loc 2 224 0 is_stmt 1
 672 035a 04F1FF33 		add	r3, r4, #-1
 673 035e 7A68     		ldr	r2, [r7, #4]
 674 0360 02F10402 		add	r2, r2, #4
 675 0364 02FB03F3 		mul	r3, r2, r3
 676 0368 7A69     		ldr	r2, [r7, #20]
 677 036a D318     		adds	r3, r2, r3
 678 036c 4FF00002 		mov	r2, #0
 679 0370 1A60     		str	r2, [r3, #0]
 225:../src/os/rt-thread/src/mempool.c **** 
 226:../src/os/rt-thread/src/mempool.c **** 	mp->block_list = block_ptr;
 680              		.loc 2 226 0
 681 0372 BB69     		ldr	r3, [r7, #24]
 682 0374 7A69     		ldr	r2, [r7, #20]
 683 0376 DA61     		str	r2, [r3, #28]
 227:../src/os/rt-thread/src/mempool.c **** 
 228:../src/os/rt-thread/src/mempool.c **** 	return mp;
 684              		.loc 2 228 0
 685 0378 BB69     		ldr	r3, [r7, #24]
 686              	.L32:
 229:../src/os/rt-thread/src/mempool.c **** }
 687              		.loc 2 229 0
 688 037a 1846     		mov	r0, r3
 689 037c 07F12407 		add	r7, r7, #36
 690 0380 BD46     		mov	sp, r7
 691 0382 90BD     		pop	{r4, r7, pc}
 692              	.L37:
 693              		.align	2
 694              	.L36:
 695 0384 30000000 		.word	.LC2
 696 0388 74000000 		.word	__FUNCTION__.4892
 697 038c 00000000 		.word	.LC0
 698 0390 54000000 		.word	.LC3
 699              		.cfi_endproc
 700              	.LFE9:
 702              		.align	2
 703              		.global	rt_mp_delete
 704              		.thumb
 705              		.thumb_func
 707              	rt_mp_delete:
 708              	.LFB10:
 230:../src/os/rt-thread/src/mempool.c **** RTM_EXPORT(rt_mp_create);
 231:../src/os/rt-thread/src/mempool.c **** 
 232:../src/os/rt-thread/src/mempool.c **** /**
 233:../src/os/rt-thread/src/mempool.c ****  * This function will delete a memory pool and release the object memory.
 234:../src/os/rt-thread/src/mempool.c ****  *
 235:../src/os/rt-thread/src/mempool.c ****  * @param mp the memory pool object
 236:../src/os/rt-thread/src/mempool.c ****  *
 237:../src/os/rt-thread/src/mempool.c ****  * @return RT_EOK
 238:../src/os/rt-thread/src/mempool.c ****  */
 239:../src/os/rt-thread/src/mempool.c **** rt_err_t rt_mp_delete(rt_mp_t mp)
 240:../src/os/rt-thread/src/mempool.c **** {
 709              		.loc 2 240 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 24
 712              		@ frame_needed = 1, uses_anonymous_args = 0
 713 0394 90B5     		push	{r4, r7, lr}
 714              	.LCFI24:
 715              		.cfi_def_cfa_offset 12
 716              		.cfi_offset 4, -12
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0396 87B0     		sub	sp, sp, #28
 720              	.LCFI25:
 721              		.cfi_def_cfa_offset 40
 722 0398 00AF     		add	r7, sp, #0
 723              	.LCFI26:
 724              		.cfi_def_cfa_register 7
 725 039a 7860     		str	r0, [r7, #4]
 726              	.LBB6:
 241:../src/os/rt-thread/src/mempool.c **** 	struct rt_thread *thread;
 242:../src/os/rt-thread/src/mempool.c **** 	register rt_ubase_t temp;
 243:../src/os/rt-thread/src/mempool.c **** 
 244:../src/os/rt-thread/src/mempool.c **** 	RT_DEBUG_NOT_IN_INTERRUPT;
 727              		.loc 2 244 0
 728 039c FFF7FEFF 		bl	rt_hw_interrupt_disable
 729 03a0 7861     		str	r0, [r7, #20]
 730 03a2 FFF7FEFF 		bl	rt_interrupt_get_nest
 731 03a6 0346     		mov	r3, r0
 732 03a8 002B     		cmp	r3, #0
 733 03aa 11D0     		beq	.L39
 734              		.loc 2 244 0 is_stmt 0 discriminator 1
 735 03ac 2D48     		ldr	r0, .L47
 736 03ae 2E49     		ldr	r1, .L47+4
 737 03b0 FFF7FEFF 		bl	rt_kprintf
 738              	.LBB7:
 739 03b4 4FF00003 		mov	r3, #0
 740 03b8 FB73     		strb	r3, [r7, #15]
 741 03ba 2C48     		ldr	r0, .L47+8
 742 03bc 2C49     		ldr	r1, .L47+12
 743 03be 2A4A     		ldr	r2, .L47+4
 744 03c0 4FF0F403 		mov	r3, #244
 745 03c4 FFF7FEFF 		bl	rt_kprintf
 746              	.L40:
 747              		.loc 2 244 0 discriminator 4
 748 03c8 FB7B     		ldrb	r3, [r7, #15]
 749 03ca DBB2     		uxtb	r3, r3
 750 03cc 002B     		cmp	r3, #0
 751 03ce FBD0     		beq	.L40
 752              	.L39:
 753              	.LBE7:
 754              		.loc 2 244 0 discriminator 2
 755 03d0 7869     		ldr	r0, [r7, #20]
 756 03d2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 757              	.LBE6:
 245:../src/os/rt-thread/src/mempool.c **** 
 246:../src/os/rt-thread/src/mempool.c **** 	/* parameter check */
 247:../src/os/rt-thread/src/mempool.c **** 	RT_ASSERT(mp != RT_NULL);
 758              		.loc 2 247 0 is_stmt 1 discriminator 2
 759 03d6 7B68     		ldr	r3, [r7, #4]
 760 03d8 002B     		cmp	r3, #0
 761 03da 29D1     		bne	.L46
 762              	.LBB8:
 763              		.loc 2 247 0 is_stmt 0 discriminator 1
 764 03dc 4FF00003 		mov	r3, #0
 765 03e0 BB73     		strb	r3, [r7, #14]
 766 03e2 2248     		ldr	r0, .L47+8
 767 03e4 2349     		ldr	r1, .L47+16
 768 03e6 204A     		ldr	r2, .L47+4
 769 03e8 4FF0F703 		mov	r3, #247
 770 03ec FFF7FEFF 		bl	rt_kprintf
 771              	.L42:
 772              		.loc 2 247 0 discriminator 2
 773 03f0 BB7B     		ldrb	r3, [r7, #14]
 774 03f2 DBB2     		uxtb	r3, r3
 775 03f4 002B     		cmp	r3, #0
 776 03f6 FBD0     		beq	.L42
 777              	.LBE8:
 248:../src/os/rt-thread/src/mempool.c **** 
 249:../src/os/rt-thread/src/mempool.c **** 	/* wake up all suspended threads */
 250:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 778              		.loc 2 250 0 is_stmt 1
 779 03f8 1AE0     		b	.L46
 780              	.L44:
 251:../src/os/rt-thread/src/mempool.c **** 	{
 252:../src/os/rt-thread/src/mempool.c **** 		/* disable interrupt */
 253:../src/os/rt-thread/src/mempool.c **** 		temp = rt_hw_interrupt_disable();
 781              		.loc 2 253 0
 782 03fa FFF7FEFF 		bl	rt_hw_interrupt_disable
 783 03fe 0346     		mov	r3, r0
 784 0400 1C46     		mov	r4, r3
 254:../src/os/rt-thread/src/mempool.c **** 
 255:../src/os/rt-thread/src/mempool.c **** 		/* get next suspend thread */
 256:../src/os/rt-thread/src/mempool.c **** 		thread = rt_list_entry(mp->suspend_thread.next, struct rt_thread, tlist);
 785              		.loc 2 256 0
 786 0402 7B68     		ldr	r3, [r7, #4]
 787 0404 9B6A     		ldr	r3, [r3, #40]
 788 0406 A3F11003 		sub	r3, r3, #16
 789 040a 3B61     		str	r3, [r7, #16]
 257:../src/os/rt-thread/src/mempool.c **** 		/* set error code to RT_ERROR */
 258:../src/os/rt-thread/src/mempool.c **** 		thread->error = -RT_ERROR;
 790              		.loc 2 258 0
 791 040c 3B69     		ldr	r3, [r7, #16]
 792 040e 4FF0FF32 		mov	r2, #-1
 793 0412 DA62     		str	r2, [r3, #44]
 259:../src/os/rt-thread/src/mempool.c **** 
 260:../src/os/rt-thread/src/mempool.c **** 		/*
 261:../src/os/rt-thread/src/mempool.c **** 		 * resume thread
 262:../src/os/rt-thread/src/mempool.c **** 		 * In rt_thread_resume function, it will remove current thread from suspend
 263:../src/os/rt-thread/src/mempool.c **** 		 * list
 264:../src/os/rt-thread/src/mempool.c **** 		 */
 265:../src/os/rt-thread/src/mempool.c **** 		rt_thread_resume(thread);
 794              		.loc 2 265 0
 795 0414 3869     		ldr	r0, [r7, #16]
 796 0416 FFF7FEFF 		bl	rt_thread_resume
 266:../src/os/rt-thread/src/mempool.c **** 
 267:../src/os/rt-thread/src/mempool.c **** 		/* decrease suspended thread count */
 268:../src/os/rt-thread/src/mempool.c **** 		mp->suspend_thread_count --;
 797              		.loc 2 268 0
 798 041a 7B68     		ldr	r3, [r7, #4]
 799 041c 1B6B     		ldr	r3, [r3, #48]
 800 041e 03F1FF32 		add	r2, r3, #-1
 801 0422 7B68     		ldr	r3, [r7, #4]
 802 0424 1A63     		str	r2, [r3, #48]
 269:../src/os/rt-thread/src/mempool.c **** 
 270:../src/os/rt-thread/src/mempool.c **** 		/* enable interrupt */
 271:../src/os/rt-thread/src/mempool.c **** 		rt_hw_interrupt_enable(temp);
 803              		.loc 2 271 0
 804 0426 2346     		mov	r3, r4
 805 0428 1846     		mov	r0, r3
 806 042a FFF7FEFF 		bl	rt_hw_interrupt_enable
 807 042e 00E0     		b	.L43
 808              	.L46:
 250:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 809              		.loc 2 250 0
 810 0430 00BF     		nop
 811              	.L43:
 250:../src/os/rt-thread/src/mempool.c **** 	while (!rt_list_isempty(&(mp->suspend_thread)))
 812              		.loc 2 250 0 is_stmt 0 discriminator 1
 813 0432 7B68     		ldr	r3, [r7, #4]
 814 0434 03F12803 		add	r3, r3, #40
 815 0438 1846     		mov	r0, r3
 816 043a FFF709FE 		bl	rt_list_isempty
 817 043e 0346     		mov	r3, r0
 818 0440 002B     		cmp	r3, #0
 819 0442 DAD0     		beq	.L44
 272:../src/os/rt-thread/src/mempool.c **** 	}
 273:../src/os/rt-thread/src/mempool.c **** 
 274:../src/os/rt-thread/src/mempool.c **** #if defined(RT_USING_MODULE) && defined(RT_USING_SLAB)
 275:../src/os/rt-thread/src/mempool.c **** 	/* the mp object belongs to an application module */
 276:../src/os/rt-thread/src/mempool.c **** 	if (mp->parent.flag & RT_OBJECT_FLAG_MODULE) 
 277:../src/os/rt-thread/src/mempool.c **** 		rt_module_free(mp->parent.module_id, mp->start_address);
 278:../src/os/rt-thread/src/mempool.c **** 	else
 279:../src/os/rt-thread/src/mempool.c **** #endif
 280:../src/os/rt-thread/src/mempool.c **** 
 281:../src/os/rt-thread/src/mempool.c **** 	/* release allocated room */
 282:../src/os/rt-thread/src/mempool.c **** 	rt_free(mp->start_address);
 820              		.loc 2 282 0 is_stmt 1
 821 0444 7B68     		ldr	r3, [r7, #4]
 822 0446 1B69     		ldr	r3, [r3, #16]
 823 0448 1846     		mov	r0, r3
 824 044a FFF7FEFF 		bl	rt_free
 283:../src/os/rt-thread/src/mempool.c **** 
 284:../src/os/rt-thread/src/mempool.c **** 	/* detach object */
 285:../src/os/rt-thread/src/mempool.c **** 	rt_object_delete(&(mp->parent));
 825              		.loc 2 285 0
 826 044e 7B68     		ldr	r3, [r7, #4]
 827 0450 1846     		mov	r0, r3
 828 0452 FFF7FEFF 		bl	rt_object_delete
 286:../src/os/rt-thread/src/mempool.c **** 
 287:../src/os/rt-thread/src/mempool.c **** 	return RT_EOK;
 829              		.loc 2 287 0
 830 0456 4FF00003 		mov	r3, #0
 288:../src/os/rt-thread/src/mempool.c **** }
 831              		.loc 2 288 0
 832 045a 1846     		mov	r0, r3
 833 045c 07F11C07 		add	r7, r7, #28
 834 0460 BD46     		mov	sp, r7
 835 0462 90BD     		pop	{r4, r7, pc}
 836              	.L48:
 837              		.align	2
 838              	.L47:
 839 0464 30000000 		.word	.LC2
 840 0468 64000000 		.word	__FUNCTION__.4906
 841 046c 00000000 		.word	.LC0
 842 0470 54000000 		.word	.LC3
 843 0474 20000000 		.word	.LC1
 844              		.cfi_endproc
 845              	.LFE10:
 847              		.align	2
 848              		.global	rt_mp_alloc
 849              		.thumb
 850              		.thumb_func
 852              	rt_mp_alloc:
 853              	.LFB11:
 289:../src/os/rt-thread/src/mempool.c **** RTM_EXPORT(rt_mp_delete);
 290:../src/os/rt-thread/src/mempool.c **** #endif
 291:../src/os/rt-thread/src/mempool.c **** 
 292:../src/os/rt-thread/src/mempool.c **** /**
 293:../src/os/rt-thread/src/mempool.c ****  * This function will allocate a block from memory pool
 294:../src/os/rt-thread/src/mempool.c ****  *
 295:../src/os/rt-thread/src/mempool.c ****  * @param mp the memory pool object
 296:../src/os/rt-thread/src/mempool.c ****  * @param time the waiting time
 297:../src/os/rt-thread/src/mempool.c ****  *
 298:../src/os/rt-thread/src/mempool.c ****  * @return the allocated memory block or RT_NULL on allocated failed
 299:../src/os/rt-thread/src/mempool.c ****  */
 300:../src/os/rt-thread/src/mempool.c **** void *rt_mp_alloc(rt_mp_t mp, rt_int32_t time)
 301:../src/os/rt-thread/src/mempool.c **** {
 854              		.loc 2 301 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 24
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858 0478 90B5     		push	{r4, r7, lr}
 859              	.LCFI27:
 860              		.cfi_def_cfa_offset 12
 861              		.cfi_offset 4, -12
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 047a 87B0     		sub	sp, sp, #28
 865              	.LCFI28:
 866              		.cfi_def_cfa_offset 40
 867 047c 00AF     		add	r7, sp, #0
 868              	.LCFI29:
 869              		.cfi_def_cfa_register 7
 870 047e 7860     		str	r0, [r7, #4]
 871 0480 3960     		str	r1, [r7, #0]
 302:../src/os/rt-thread/src/mempool.c **** 	rt_uint8_t *block_ptr;
 303:../src/os/rt-thread/src/mempool.c **** 	register rt_base_t level;
 304:../src/os/rt-thread/src/mempool.c **** 	struct rt_thread *thread;
 305:../src/os/rt-thread/src/mempool.c **** 
 306:../src/os/rt-thread/src/mempool.c **** 	/* disable interrupt */
 307:../src/os/rt-thread/src/mempool.c **** 	level = rt_hw_interrupt_disable();
 872              		.loc 2 307 0
 873 0482 FFF7FEFF 		bl	rt_hw_interrupt_disable
 874 0486 0446     		mov	r4, r0
 308:../src/os/rt-thread/src/mempool.c **** 
 309:../src/os/rt-thread/src/mempool.c **** 	if (mp->block_free_count)
 875              		.loc 2 309 0
 876 0488 7B68     		ldr	r3, [r7, #4]
 877 048a 5B6A     		ldr	r3, [r3, #36]
 878 048c 002B     		cmp	r3, #0
 879 048e 10D0     		beq	.L50
 310:../src/os/rt-thread/src/mempool.c **** 	{
 311:../src/os/rt-thread/src/mempool.c **** 		/* memory block is available. decrease the free block counter */
 312:../src/os/rt-thread/src/mempool.c **** 		mp->block_free_count --;
 880              		.loc 2 312 0
 881 0490 7B68     		ldr	r3, [r7, #4]
 882 0492 5B6A     		ldr	r3, [r3, #36]
 883 0494 03F1FF32 		add	r2, r3, #-1
 884 0498 7B68     		ldr	r3, [r7, #4]
 885 049a 5A62     		str	r2, [r3, #36]
 313:../src/os/rt-thread/src/mempool.c **** 
 314:../src/os/rt-thread/src/mempool.c **** 		/* get block from block list */
 315:../src/os/rt-thread/src/mempool.c **** 		block_ptr = mp->block_list;
 886              		.loc 2 315 0
 887 049c 7B68     		ldr	r3, [r7, #4]
 888 049e DB69     		ldr	r3, [r3, #28]
 889 04a0 7B61     		str	r3, [r7, #20]
 316:../src/os/rt-thread/src/mempool.c **** 		mp->block_list = *(rt_uint8_t **)block_ptr;
 890              		.loc 2 316 0
 891 04a2 7B69     		ldr	r3, [r7, #20]
 892 04a4 1A68     		ldr	r2, [r3, #0]
 893 04a6 7B68     		ldr	r3, [r7, #4]
 894 04a8 DA61     		str	r2, [r3, #28]
 317:../src/os/rt-thread/src/mempool.c **** 
 318:../src/os/rt-thread/src/mempool.c **** 		/* point to memory pool */
 319:../src/os/rt-thread/src/mempool.c **** 		*(rt_uint8_t **)block_ptr = (rt_uint8_t *)mp;
 895              		.loc 2 319 0
 896 04aa 7B69     		ldr	r3, [r7, #20]
 897 04ac 7A68     		ldr	r2, [r7, #4]
 898 04ae 1A60     		str	r2, [r3, #0]
 899 04b0 6DE0     		b	.L51
 900              	.L50:
 320:../src/os/rt-thread/src/mempool.c **** 	}
 321:../src/os/rt-thread/src/mempool.c **** 	else
 322:../src/os/rt-thread/src/mempool.c **** 	{
 323:../src/os/rt-thread/src/mempool.c **** 		/* memory block is unavailable. */
 324:../src/os/rt-thread/src/mempool.c **** 		if (time == 0)
 901              		.loc 2 324 0
 902 04b2 3B68     		ldr	r3, [r7, #0]
 903 04b4 002B     		cmp	r3, #0
 904 04b6 05D1     		bne	.L52
 325:../src/os/rt-thread/src/mempool.c **** 		{
 326:../src/os/rt-thread/src/mempool.c **** 			/* enable interrupt */
 327:../src/os/rt-thread/src/mempool.c **** 			rt_hw_interrupt_enable(level);
 905              		.loc 2 327 0
 906 04b8 2046     		mov	r0, r4
 907 04ba FFF7FEFF 		bl	rt_hw_interrupt_enable
 328:../src/os/rt-thread/src/mempool.c **** 			return RT_NULL;
 908              		.loc 2 328 0
 909 04be 4FF00003 		mov	r3, #0
 910 04c2 76E0     		b	.L53
 911              	.L52:
 912              	.LBB9:
 329:../src/os/rt-thread/src/mempool.c **** 		}
 330:../src/os/rt-thread/src/mempool.c **** 		else
 331:../src/os/rt-thread/src/mempool.c **** 		{
 332:../src/os/rt-thread/src/mempool.c **** 			RT_DEBUG_NOT_IN_INTERRUPT;
 913              		.loc 2 332 0
 914 04c4 FFF7FEFF 		bl	rt_hw_interrupt_disable
 915 04c8 3861     		str	r0, [r7, #16]
 916 04ca FFF7FEFF 		bl	rt_interrupt_get_nest
 917 04ce 0346     		mov	r3, r0
 918 04d0 002B     		cmp	r3, #0
 919 04d2 11D0     		beq	.L54
 920              		.loc 2 332 0 is_stmt 0 discriminator 1
 921 04d4 3948     		ldr	r0, .L59
 922 04d6 3A49     		ldr	r1, .L59+4
 923 04d8 FFF7FEFF 		bl	rt_kprintf
 924              	.LBB10:
 925 04dc 4FF00003 		mov	r3, #0
 926 04e0 FB72     		strb	r3, [r7, #11]
 927 04e2 3848     		ldr	r0, .L59+8
 928 04e4 3849     		ldr	r1, .L59+12
 929 04e6 364A     		ldr	r2, .L59+4
 930 04e8 4FF4A673 		mov	r3, #332
 931 04ec FFF7FEFF 		bl	rt_kprintf
 932              	.L55:
 933              		.loc 2 332 0 discriminator 4
 934 04f0 FB7A     		ldrb	r3, [r7, #11]
 935 04f2 DBB2     		uxtb	r3, r3
 936 04f4 002B     		cmp	r3, #0
 937 04f6 FBD0     		beq	.L55
 938              	.L54:
 939              	.LBE10:
 940              		.loc 2 332 0 discriminator 2
 941 04f8 3869     		ldr	r0, [r7, #16]
 942 04fa FFF7FEFF 		bl	rt_hw_interrupt_enable
 943              	.LBE9:
 333:../src/os/rt-thread/src/mempool.c **** 
 334:../src/os/rt-thread/src/mempool.c **** 			/* get current thread */
 335:../src/os/rt-thread/src/mempool.c **** 			thread = rt_thread_self();
 944              		.loc 2 335 0 is_stmt 1 discriminator 2
 945 04fe FFF7FEFF 		bl	rt_thread_self
 946 0502 F860     		str	r0, [r7, #12]
 336:../src/os/rt-thread/src/mempool.c **** 
 337:../src/os/rt-thread/src/mempool.c **** 			/* need suspend thread */
 338:../src/os/rt-thread/src/mempool.c **** 			rt_thread_suspend(thread);
 947              		.loc 2 338 0 discriminator 2
 948 0504 F868     		ldr	r0, [r7, #12]
 949 0506 FFF7FEFF 		bl	rt_thread_suspend
 339:../src/os/rt-thread/src/mempool.c **** 			rt_list_insert_after(&(mp->suspend_thread), &(thread->tlist));
 950              		.loc 2 339 0 discriminator 2
 951 050a 7B68     		ldr	r3, [r7, #4]
 952 050c 03F12802 		add	r2, r3, #40
 953 0510 FB68     		ldr	r3, [r7, #12]
 954 0512 03F11003 		add	r3, r3, #16
 955 0516 1046     		mov	r0, r2
 956 0518 1946     		mov	r1, r3
 957 051a FFF781FD 		bl	rt_list_insert_after
 340:../src/os/rt-thread/src/mempool.c **** 			mp->suspend_thread_count ++;
 958              		.loc 2 340 0 discriminator 2
 959 051e 7B68     		ldr	r3, [r7, #4]
 960 0520 1B6B     		ldr	r3, [r3, #48]
 961 0522 03F10102 		add	r2, r3, #1
 962 0526 7B68     		ldr	r3, [r7, #4]
 963 0528 1A63     		str	r2, [r3, #48]
 341:../src/os/rt-thread/src/mempool.c **** 
 342:../src/os/rt-thread/src/mempool.c **** 			if (time > 0)
 964              		.loc 2 342 0 discriminator 2
 965 052a 3B68     		ldr	r3, [r7, #0]
 966 052c 002B     		cmp	r3, #0
 967 052e 0FDD     		ble	.L56
 343:../src/os/rt-thread/src/mempool.c **** 			{
 344:../src/os/rt-thread/src/mempool.c **** 				/* init thread timer and start it */
 345:../src/os/rt-thread/src/mempool.c **** 				rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &time);
 968              		.loc 2 345 0
 969 0530 FB68     		ldr	r3, [r7, #12]
 970 0532 03F14802 		add	r2, r3, #72
 971 0536 3B46     		mov	r3, r7
 972 0538 1046     		mov	r0, r2
 973 053a 4FF00001 		mov	r1, #0
 974 053e 1A46     		mov	r2, r3
 975 0540 FFF7FEFF 		bl	rt_timer_control
 346:../src/os/rt-thread/src/mempool.c **** 				rt_timer_start(&(thread->thread_timer));
 976              		.loc 2 346 0
 977 0544 FB68     		ldr	r3, [r7, #12]
 978 0546 03F14803 		add	r3, r3, #72
 979 054a 1846     		mov	r0, r3
 980 054c FFF7FEFF 		bl	rt_timer_start
 981              	.L56:
 347:../src/os/rt-thread/src/mempool.c **** 			}
 348:../src/os/rt-thread/src/mempool.c **** 
 349:../src/os/rt-thread/src/mempool.c **** 			/* enable interrupt */
 350:../src/os/rt-thread/src/mempool.c **** 			rt_hw_interrupt_enable(level);
 982              		.loc 2 350 0
 983 0550 2046     		mov	r0, r4
 984 0552 FFF7FEFF 		bl	rt_hw_interrupt_enable
 351:../src/os/rt-thread/src/mempool.c **** 
 352:../src/os/rt-thread/src/mempool.c **** 			/* do a schedule */
 353:../src/os/rt-thread/src/mempool.c **** 			rt_schedule();
 985              		.loc 2 353 0
 986 0556 FFF7FEFF 		bl	rt_schedule
 354:../src/os/rt-thread/src/mempool.c **** 
 355:../src/os/rt-thread/src/mempool.c **** 			if (thread->error != RT_EOK)
 987              		.loc 2 355 0
 988 055a FB68     		ldr	r3, [r7, #12]
 989 055c DB6A     		ldr	r3, [r3, #44]
 990 055e 002B     		cmp	r3, #0
 991 0560 02D0     		beq	.L57
 356:../src/os/rt-thread/src/mempool.c **** 				return RT_NULL;
 992              		.loc 2 356 0
 993 0562 4FF00003 		mov	r3, #0
 994 0566 24E0     		b	.L53
 995              	.L57:
 357:../src/os/rt-thread/src/mempool.c **** 
 358:../src/os/rt-thread/src/mempool.c **** 			/* disable interrupt */
 359:../src/os/rt-thread/src/mempool.c **** 			level = rt_hw_interrupt_disable();
 996              		.loc 2 359 0
 997 0568 FFF7FEFF 		bl	rt_hw_interrupt_disable
 998 056c 0446     		mov	r4, r0
 360:../src/os/rt-thread/src/mempool.c **** 
 361:../src/os/rt-thread/src/mempool.c **** 			/* decrease free block */
 362:../src/os/rt-thread/src/mempool.c **** 			mp->block_free_count --;
 999              		.loc 2 362 0
 1000 056e 7B68     		ldr	r3, [r7, #4]
 1001 0570 5B6A     		ldr	r3, [r3, #36]
 1002 0572 03F1FF32 		add	r2, r3, #-1
 1003 0576 7B68     		ldr	r3, [r7, #4]
 1004 0578 5A62     		str	r2, [r3, #36]
 363:../src/os/rt-thread/src/mempool.c **** 
 364:../src/os/rt-thread/src/mempool.c **** 			/* get block from block list */
 365:../src/os/rt-thread/src/mempool.c **** 			block_ptr = mp->block_list;
 1005              		.loc 2 365 0
 1006 057a 7B68     		ldr	r3, [r7, #4]
 1007 057c DB69     		ldr	r3, [r3, #28]
 1008 057e 7B61     		str	r3, [r7, #20]
 366:../src/os/rt-thread/src/mempool.c **** 			mp->block_list = *(rt_uint8_t **)block_ptr;
 1009              		.loc 2 366 0
 1010 0580 7B69     		ldr	r3, [r7, #20]
 1011 0582 1A68     		ldr	r2, [r3, #0]
 1012 0584 7B68     		ldr	r3, [r7, #4]
 1013 0586 DA61     		str	r2, [r3, #28]
 367:../src/os/rt-thread/src/mempool.c **** 
 368:../src/os/rt-thread/src/mempool.c **** 			/* point to memory pool */
 369:../src/os/rt-thread/src/mempool.c **** 			*(rt_uint8_t **)block_ptr = (rt_uint8_t *)mp;
 1014              		.loc 2 369 0
 1015 0588 7B69     		ldr	r3, [r7, #20]
 1016 058a 7A68     		ldr	r2, [r7, #4]
 1017 058c 1A60     		str	r2, [r3, #0]
 1018              	.L51:
 370:../src/os/rt-thread/src/mempool.c **** 		}
 371:../src/os/rt-thread/src/mempool.c **** 	}
 372:../src/os/rt-thread/src/mempool.c **** 
 373:../src/os/rt-thread/src/mempool.c **** 	/* enable interrupt */
 374:../src/os/rt-thread/src/mempool.c **** 	rt_hw_interrupt_enable(level);
 1019              		.loc 2 374 0
 1020 058e 2046     		mov	r0, r4
 1021 0590 FFF7FEFF 		bl	rt_hw_interrupt_enable
 375:../src/os/rt-thread/src/mempool.c **** 
 376:../src/os/rt-thread/src/mempool.c **** 	RT_OBJECT_HOOK_CALL(rt_mp_alloc_hook, (mp, (rt_uint8_t *)(block_ptr + sizeof(rt_uint8_t *))));
 1022              		.loc 2 376 0
 1023 0594 0D4B     		ldr	r3, .L59+16
 1024 0596 1B68     		ldr	r3, [r3, #0]
 1025 0598 002B     		cmp	r3, #0
 1026 059a 07D0     		beq	.L58
 1027              		.loc 2 376 0 is_stmt 0 discriminator 1
 1028 059c 0B4B     		ldr	r3, .L59+16
 1029 059e 1B68     		ldr	r3, [r3, #0]
 1030 05a0 7A69     		ldr	r2, [r7, #20]
 1031 05a2 02F10402 		add	r2, r2, #4
 1032 05a6 7868     		ldr	r0, [r7, #4]
 1033 05a8 1146     		mov	r1, r2
 1034 05aa 9847     		blx	r3
 1035              	.L58:
 377:../src/os/rt-thread/src/mempool.c **** 
 378:../src/os/rt-thread/src/mempool.c **** 	return (rt_uint8_t *)(block_ptr + sizeof(rt_uint8_t *));
 1036              		.loc 2 378 0 is_stmt 1
 1037 05ac 7B69     		ldr	r3, [r7, #20]
 1038 05ae 03F10403 		add	r3, r3, #4
 1039              	.L53:
 379:../src/os/rt-thread/src/mempool.c **** }
 1040              		.loc 2 379 0
 1041 05b2 1846     		mov	r0, r3
 1042 05b4 07F11C07 		add	r7, r7, #28
 1043 05b8 BD46     		mov	sp, r7
 1044 05ba 90BD     		pop	{r4, r7, pc}
 1045              	.L60:
 1046              		.align	2
 1047              	.L59:
 1048 05bc 30000000 		.word	.LC2
 1049 05c0 58000000 		.word	__FUNCTION__.4926
 1050 05c4 00000000 		.word	.LC0
 1051 05c8 54000000 		.word	.LC3
 1052 05cc 00000000 		.word	rt_mp_alloc_hook
 1053              		.cfi_endproc
 1054              	.LFE11:
 1056              		.align	2
 1057              		.global	rt_mp_free
 1058              		.thumb
 1059              		.thumb_func
 1061              	rt_mp_free:
 1062              	.LFB12:
 380:../src/os/rt-thread/src/mempool.c **** RTM_EXPORT(rt_mp_alloc);
 381:../src/os/rt-thread/src/mempool.c **** 
 382:../src/os/rt-thread/src/mempool.c **** /**
 383:../src/os/rt-thread/src/mempool.c ****  * This function will release a memory block
 384:../src/os/rt-thread/src/mempool.c ****  *
 385:../src/os/rt-thread/src/mempool.c ****  * @param block the address of memory block to be released
 386:../src/os/rt-thread/src/mempool.c ****  */
 387:../src/os/rt-thread/src/mempool.c **** void rt_mp_free(void *block)
 388:../src/os/rt-thread/src/mempool.c **** {
 1063              		.loc 2 388 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 24
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067 05d0 90B5     		push	{r4, r7, lr}
 1068              	.LCFI30:
 1069              		.cfi_def_cfa_offset 12
 1070              		.cfi_offset 4, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 05d2 87B0     		sub	sp, sp, #28
 1074              	.LCFI31:
 1075              		.cfi_def_cfa_offset 40
 1076 05d4 00AF     		add	r7, sp, #0
 1077              	.LCFI32:
 1078              		.cfi_def_cfa_register 7
 1079 05d6 7860     		str	r0, [r7, #4]
 389:../src/os/rt-thread/src/mempool.c **** 	rt_uint8_t **block_ptr;
 390:../src/os/rt-thread/src/mempool.c **** 	struct rt_mempool *mp;
 391:../src/os/rt-thread/src/mempool.c **** 	struct rt_thread *thread;
 392:../src/os/rt-thread/src/mempool.c **** 	register rt_base_t level;
 393:../src/os/rt-thread/src/mempool.c **** 
 394:../src/os/rt-thread/src/mempool.c **** 	/* get the control block of pool which the block belongs to */
 395:../src/os/rt-thread/src/mempool.c **** 	block_ptr = (rt_uint8_t **)((rt_uint8_t *)block - sizeof(rt_uint8_t *));
 1080              		.loc 2 395 0
 1081 05d8 7B68     		ldr	r3, [r7, #4]
 1082 05da A3F10403 		sub	r3, r3, #4
 1083 05de 7B61     		str	r3, [r7, #20]
 396:../src/os/rt-thread/src/mempool.c **** 	mp = (struct rt_mempool *)*block_ptr;
 1084              		.loc 2 396 0
 1085 05e0 7B69     		ldr	r3, [r7, #20]
 1086 05e2 1B68     		ldr	r3, [r3, #0]
 1087 05e4 3B61     		str	r3, [r7, #16]
 397:../src/os/rt-thread/src/mempool.c **** 
 398:../src/os/rt-thread/src/mempool.c **** 	RT_OBJECT_HOOK_CALL(rt_mp_free_hook, (mp, block));
 1088              		.loc 2 398 0
 1089 05e6 1E4B     		ldr	r3, .L65
 1090 05e8 1B68     		ldr	r3, [r3, #0]
 1091 05ea 002B     		cmp	r3, #0
 1092 05ec 04D0     		beq	.L62
 1093              		.loc 2 398 0 is_stmt 0 discriminator 1
 1094 05ee 1C4B     		ldr	r3, .L65
 1095 05f0 1B68     		ldr	r3, [r3, #0]
 1096 05f2 3869     		ldr	r0, [r7, #16]
 1097 05f4 7968     		ldr	r1, [r7, #4]
 1098 05f6 9847     		blx	r3
 1099              	.L62:
 399:../src/os/rt-thread/src/mempool.c **** 
 400:../src/os/rt-thread/src/mempool.c **** 	/* disable interrupt */
 401:../src/os/rt-thread/src/mempool.c **** 	level = rt_hw_interrupt_disable();
 1100              		.loc 2 401 0 is_stmt 1
 1101 05f8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1102 05fc 0446     		mov	r4, r0
 402:../src/os/rt-thread/src/mempool.c **** 
 403:../src/os/rt-thread/src/mempool.c **** 	/* increase the free block count */
 404:../src/os/rt-thread/src/mempool.c **** 	mp->block_free_count ++;
 1103              		.loc 2 404 0
 1104 05fe 3B69     		ldr	r3, [r7, #16]
 1105 0600 5B6A     		ldr	r3, [r3, #36]
 1106 0602 03F10102 		add	r2, r3, #1
 1107 0606 3B69     		ldr	r3, [r7, #16]
 1108 0608 5A62     		str	r2, [r3, #36]
 405:../src/os/rt-thread/src/mempool.c **** 
 406:../src/os/rt-thread/src/mempool.c **** 	/* link the block into the block list */
 407:../src/os/rt-thread/src/mempool.c **** 	*block_ptr = mp->block_list;
 1109              		.loc 2 407 0
 1110 060a 3B69     		ldr	r3, [r7, #16]
 1111 060c DA69     		ldr	r2, [r3, #28]
 1112 060e 7B69     		ldr	r3, [r7, #20]
 1113 0610 1A60     		str	r2, [r3, #0]
 408:../src/os/rt-thread/src/mempool.c **** 	mp->block_list = (rt_uint8_t *)block_ptr;
 1114              		.loc 2 408 0
 1115 0612 3B69     		ldr	r3, [r7, #16]
 1116 0614 7A69     		ldr	r2, [r7, #20]
 1117 0616 DA61     		str	r2, [r3, #28]
 409:../src/os/rt-thread/src/mempool.c **** 
 410:../src/os/rt-thread/src/mempool.c **** 	if (mp->suspend_thread_count > 0)
 1118              		.loc 2 410 0
 1119 0618 3B69     		ldr	r3, [r7, #16]
 1120 061a 1B6B     		ldr	r3, [r3, #48]
 1121 061c 002B     		cmp	r3, #0
 1122 061e 17D0     		beq	.L63
 411:../src/os/rt-thread/src/mempool.c **** 	{
 412:../src/os/rt-thread/src/mempool.c **** 		/* get the suspended thread */
 413:../src/os/rt-thread/src/mempool.c **** 		thread = rt_list_entry(mp->suspend_thread.next, struct rt_thread, tlist);
 1123              		.loc 2 413 0
 1124 0620 3B69     		ldr	r3, [r7, #16]
 1125 0622 9B6A     		ldr	r3, [r3, #40]
 1126 0624 A3F11003 		sub	r3, r3, #16
 1127 0628 FB60     		str	r3, [r7, #12]
 414:../src/os/rt-thread/src/mempool.c **** 
 415:../src/os/rt-thread/src/mempool.c **** 		/* set error */
 416:../src/os/rt-thread/src/mempool.c **** 		thread->error = RT_EOK;
 1128              		.loc 2 416 0
 1129 062a FB68     		ldr	r3, [r7, #12]
 1130 062c 4FF00002 		mov	r2, #0
 1131 0630 DA62     		str	r2, [r3, #44]
 417:../src/os/rt-thread/src/mempool.c **** 
 418:../src/os/rt-thread/src/mempool.c **** 		/* resume thread */
 419:../src/os/rt-thread/src/mempool.c **** 		rt_thread_resume(thread);
 1132              		.loc 2 419 0
 1133 0632 F868     		ldr	r0, [r7, #12]
 1134 0634 FFF7FEFF 		bl	rt_thread_resume
 420:../src/os/rt-thread/src/mempool.c **** 
 421:../src/os/rt-thread/src/mempool.c **** 		/* decrease suspended thread count */
 422:../src/os/rt-thread/src/mempool.c **** 		mp->suspend_thread_count --;
 1135              		.loc 2 422 0
 1136 0638 3B69     		ldr	r3, [r7, #16]
 1137 063a 1B6B     		ldr	r3, [r3, #48]
 1138 063c 03F1FF32 		add	r2, r3, #-1
 1139 0640 3B69     		ldr	r3, [r7, #16]
 1140 0642 1A63     		str	r2, [r3, #48]
 423:../src/os/rt-thread/src/mempool.c **** 
 424:../src/os/rt-thread/src/mempool.c **** 		/* enable interrupt */
 425:../src/os/rt-thread/src/mempool.c **** 		rt_hw_interrupt_enable(level);
 1141              		.loc 2 425 0
 1142 0644 2046     		mov	r0, r4
 1143 0646 FFF7FEFF 		bl	rt_hw_interrupt_enable
 426:../src/os/rt-thread/src/mempool.c **** 
 427:../src/os/rt-thread/src/mempool.c **** 		/* do a schedule */
 428:../src/os/rt-thread/src/mempool.c **** 		rt_schedule();
 1144              		.loc 2 428 0
 1145 064a FFF7FEFF 		bl	rt_schedule
 429:../src/os/rt-thread/src/mempool.c **** 
 430:../src/os/rt-thread/src/mempool.c **** 		return;
 1146              		.loc 2 430 0
 1147 064e 02E0     		b	.L61
 1148              	.L63:
 431:../src/os/rt-thread/src/mempool.c **** 	}
 432:../src/os/rt-thread/src/mempool.c **** 
 433:../src/os/rt-thread/src/mempool.c **** 	/* enable interrupt */
 434:../src/os/rt-thread/src/mempool.c **** 	rt_hw_interrupt_enable(level);
 1149              		.loc 2 434 0
 1150 0650 2046     		mov	r0, r4
 1151 0652 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1152              	.L61:
 435:../src/os/rt-thread/src/mempool.c **** }
 1153              		.loc 2 435 0
 1154 0656 07F11C07 		add	r7, r7, #28
 1155 065a BD46     		mov	sp, r7
 1156 065c 90BD     		pop	{r4, r7, pc}
 1157              	.L66:
 1158 065e 00BF     		.align	2
 1159              	.L65:
 1160 0660 04000000 		.word	rt_mp_free_hook
 1161              		.cfi_endproc
 1162              	.LFE12:
 1164              		.section	.rodata
 1165 0056 0000     		.align	2
 1168              	__FUNCTION__.4926:
 1169 0058 72745F6D 		.ascii	"rt_mp_alloc\000"
 1169      705F616C 
 1169      6C6F6300 
 1170              		.align	2
 1173              	__FUNCTION__.4906:
 1174 0064 72745F6D 		.ascii	"rt_mp_delete\000"
 1174      705F6465 
 1174      6C657465 
 1174      00
 1175 0071 000000   		.align	2
 1178              	__FUNCTION__.4892:
 1179 0074 72745F6D 		.ascii	"rt_mp_create\000"
 1179      705F6372 
 1179      65617465 
 1179      00
 1180 0081 000000   		.align	2
 1183              	__FUNCTION__.4876:
 1184 0084 72745F6D 		.ascii	"rt_mp_detach\000"
 1184      705F6465 
 1184      74616368 
 1184      00
 1185 0091 000000   		.align	2
 1188              	__FUNCTION__.4863:
 1189 0094 72745F6D 		.ascii	"rt_mp_init\000"
 1189      705F696E 
 1189      697400
 1190 009f 00       		.text
 1191              	.Letext0:
 1192              		.file 3 "D:\\workspace_gnu\\RTT_Demo0\\src\\os\\rt-thread\\include/rtdef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mempool.c
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:18     .text:00000000 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:22     .text:00000000 rt_list_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:61     .text:00000020 rt_list_insert_after
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:110    .text:00000050 rt_list_isempty
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:147    .bss:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:148    .bss:00000000 rt_mp_alloc_hook
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:151    .bss:00000004 rt_mp_free_hook
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:159    .text:00000074 rt_mp_alloc_sethook
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:190    .text:0000008c $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:194    .text:00000090 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:199    .text:00000090 rt_mp_free_sethook
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:229    .text:000000a8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:234    .rodata:00000000 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:241    .text:000000ac $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:246    .text:000000ac rt_mp_init
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:391    .text:000001a8 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1188   .rodata:00000094 __FUNCTION__.4863
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:397    .text:000001b4 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:402    .text:000001b4 rt_mp_detach
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:497    .text:00000240 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1183   .rodata:00000084 __FUNCTION__.4876
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:511    .text:0000024c $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:516    .text:0000024c rt_mp_create
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:695    .text:00000384 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1178   .rodata:00000074 __FUNCTION__.4892
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:702    .text:00000394 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:707    .text:00000394 rt_mp_delete
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:839    .text:00000464 $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1173   .rodata:00000064 __FUNCTION__.4906
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:847    .text:00000478 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:852    .text:00000478 rt_mp_alloc
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1048   .text:000005bc $d
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1168   .rodata:00000058 __FUNCTION__.4926
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1056   .text:000005d0 $t
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1061   .text:000005d0 rt_mp_free
C:\Users\YANGZH~1\AppData\Local\Temp\ccgwY7Nf.s:1160   .text:00000660 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9fa2be94b3b27131c651c32db681ca6e
                           .group:00000000 wm4.rtconfig.h.3.5a4bd5c079694966fb1e9ee3a4751929
                           .group:00000000 wm4.rtdef.h.36.f520ed9310a9e6fa8719d7b7d81c046a
                           .group:00000000 wm4.rtdebug.h.12.1fd584faa18c8d5ccd4774b9c31afcd0
                           .group:00000000 wm4.rtservice.h.19.f6999772500f0a8f811ba3fba5581f34

UNDEFINED SYMBOLS
rt_kprintf
rt_object_init
rt_hw_interrupt_disable
rt_thread_resume
rt_hw_interrupt_enable
rt_object_detach
rt_interrupt_get_nest
rt_object_allocate
rt_malloc
rt_object_delete
rt_free
rt_thread_self
rt_thread_suspend
rt_timer_control
rt_timer_start
rt_schedule
